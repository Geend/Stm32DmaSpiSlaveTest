
SpiTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003460  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  08003600  08003600  00013600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003b34  08003b34  00013b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003b38  08003b38  00013b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08003b3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  7 .bss          0000039c  20000070  20000070  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000040c  2000040c  00020070  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012a22  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000026e6  00000000  00000000  00032ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005691  00000000  00000000  000351a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000880  00000000  00000000  0003a840  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c98  00000000  00000000  0003b0c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000048cd  00000000  00000000  0003bd58  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003445  00000000  00000000  00040625  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00043a6a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001ecc  00000000  00000000  00043ae8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080035e8 	.word	0x080035e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080035e8 	.word	0x080035e8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000280:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000282:	4a0e      	ldr	r2, [pc, #56]	; (80002bc <HAL_InitTick+0x3c>)
 8000284:	4b0e      	ldr	r3, [pc, #56]	; (80002c0 <HAL_InitTick+0x40>)
{
 8000286:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000288:	7818      	ldrb	r0, [r3, #0]
 800028a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800028e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000292:	6810      	ldr	r0, [r2, #0]
 8000294:	fbb0 f0f3 	udiv	r0, r0, r3
 8000298:	f000 f88c 	bl	80003b4 <HAL_SYSTICK_Config>
 800029c:	4604      	mov	r4, r0
 800029e:	b958      	cbnz	r0, 80002b8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002a0:	2d0f      	cmp	r5, #15
 80002a2:	d809      	bhi.n	80002b8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002a4:	4602      	mov	r2, r0
 80002a6:	4629      	mov	r1, r5
 80002a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80002ac:	f000 f842 	bl	8000334 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002b0:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <HAL_InitTick+0x44>)
 80002b2:	4620      	mov	r0, r4
 80002b4:	601d      	str	r5, [r3, #0]
 80002b6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80002b8:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 80002ba:	bd38      	pop	{r3, r4, r5, pc}
 80002bc:	20000008 	.word	0x20000008
 80002c0:	20000000 	.word	0x20000000
 80002c4:	20000004 	.word	0x20000004

080002c8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002c8:	4a07      	ldr	r2, [pc, #28]	; (80002e8 <HAL_Init+0x20>)
{
 80002ca:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002cc:	6813      	ldr	r3, [r2, #0]
 80002ce:	f043 0310 	orr.w	r3, r3, #16
 80002d2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002d4:	2003      	movs	r0, #3
 80002d6:	f000 f81b 	bl	8000310 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80002da:	2000      	movs	r0, #0
 80002dc:	f7ff ffd0 	bl	8000280 <HAL_InitTick>
  HAL_MspInit();
 80002e0:	f002 f88e 	bl	8002400 <HAL_MspInit>
}
 80002e4:	2000      	movs	r0, #0
 80002e6:	bd08      	pop	{r3, pc}
 80002e8:	40022000 	.word	0x40022000

080002ec <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80002ec:	4a03      	ldr	r2, [pc, #12]	; (80002fc <HAL_IncTick+0x10>)
 80002ee:	4b04      	ldr	r3, [pc, #16]	; (8000300 <HAL_IncTick+0x14>)
 80002f0:	6811      	ldr	r1, [r2, #0]
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	440b      	add	r3, r1
 80002f6:	6013      	str	r3, [r2, #0]
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	200000a4 	.word	0x200000a4
 8000300:	20000000 	.word	0x20000000

08000304 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000304:	4b01      	ldr	r3, [pc, #4]	; (800030c <HAL_GetTick+0x8>)
 8000306:	6818      	ldr	r0, [r3, #0]
}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	200000a4 	.word	0x200000a4

08000310 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000310:	4a07      	ldr	r2, [pc, #28]	; (8000330 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000312:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000314:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000318:	041b      	lsls	r3, r3, #16
 800031a:	0c1b      	lsrs	r3, r3, #16
 800031c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000320:	0200      	lsls	r0, r0, #8
 8000322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000326:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800032a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800032c:	60d3      	str	r3, [r2, #12]
 800032e:	4770      	bx	lr
 8000330:	e000ed00 	.word	0xe000ed00

08000334 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000334:	4b17      	ldr	r3, [pc, #92]	; (8000394 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000336:	b530      	push	{r4, r5, lr}
 8000338:	68dc      	ldr	r4, [r3, #12]
 800033a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800033e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000342:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000344:	2b04      	cmp	r3, #4
 8000346:	bf28      	it	cs
 8000348:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800034a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800034c:	f04f 0501 	mov.w	r5, #1
 8000350:	fa05 f303 	lsl.w	r3, r5, r3
 8000354:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000358:	bf8c      	ite	hi
 800035a:	3c03      	subhi	r4, #3
 800035c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800035e:	4019      	ands	r1, r3
 8000360:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000362:	fa05 f404 	lsl.w	r4, r5, r4
 8000366:	3c01      	subs	r4, #1
 8000368:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800036a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800036c:	ea42 0201 	orr.w	r2, r2, r1
 8000370:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000374:	bfaf      	iteee	ge
 8000376:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800037a:	f000 000f 	andlt.w	r0, r0, #15
 800037e:	4b06      	ldrlt	r3, [pc, #24]	; (8000398 <HAL_NVIC_SetPriority+0x64>)
 8000380:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000382:	bfa5      	ittet	ge
 8000384:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000388:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800038a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800038c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	bf00      	nop
 8000394:	e000ed00 	.word	0xe000ed00
 8000398:	e000ed14 	.word	0xe000ed14

0800039c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800039c:	0942      	lsrs	r2, r0, #5
 800039e:	2301      	movs	r3, #1
 80003a0:	f000 001f 	and.w	r0, r0, #31
 80003a4:	fa03 f000 	lsl.w	r0, r3, r0
 80003a8:	4b01      	ldr	r3, [pc, #4]	; (80003b0 <HAL_NVIC_EnableIRQ+0x14>)
 80003aa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80003ae:	4770      	bx	lr
 80003b0:	e000e100 	.word	0xe000e100

080003b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003b4:	3801      	subs	r0, #1
 80003b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80003ba:	d20a      	bcs.n	80003d2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003bc:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003be:	4a07      	ldr	r2, [pc, #28]	; (80003dc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003c0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003c2:	21f0      	movs	r1, #240	; 0xf0
 80003c4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003c8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003ca:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003cc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80003d2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	e000e010 	.word	0xe000e010
 80003dc:	e000ed00 	.word	0xe000ed00

080003e0 <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80003e0:	6801      	ldr	r1, [r0, #0]
 80003e2:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <DMA_CalcBaseAndBitshift+0x34>)
 80003e4:	4299      	cmp	r1, r3
{
 80003e6:	b510      	push	{r4, lr}
 80003e8:	f04f 0414 	mov.w	r4, #20
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80003ec:	d809      	bhi.n	8000402 <DMA_CalcBaseAndBitshift+0x22>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80003ee:	4a0a      	ldr	r2, [pc, #40]	; (8000418 <DMA_CalcBaseAndBitshift+0x38>)
 80003f0:	440a      	add	r2, r1
 80003f2:	fbb2 f2f4 	udiv	r2, r2, r4
 80003f6:	0092      	lsls	r2, r2, #2
 80003f8:	6402      	str	r2, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80003fa:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
 80003fe:	63c3      	str	r3, [r0, #60]	; 0x3c
 8000400:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000402:	4b06      	ldr	r3, [pc, #24]	; (800041c <DMA_CalcBaseAndBitshift+0x3c>)
 8000404:	440b      	add	r3, r1
 8000406:	fbb3 f3f4 	udiv	r3, r3, r4
 800040a:	009b      	lsls	r3, r3, #2
 800040c:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800040e:	4b04      	ldr	r3, [pc, #16]	; (8000420 <DMA_CalcBaseAndBitshift+0x40>)
 8000410:	e7f5      	b.n	80003fe <DMA_CalcBaseAndBitshift+0x1e>
 8000412:	bf00      	nop
 8000414:	40020407 	.word	0x40020407
 8000418:	bffdfff8 	.word	0xbffdfff8
 800041c:	bffdfbf8 	.word	0xbffdfbf8
 8000420:	40020400 	.word	0x40020400

08000424 <HAL_DMA_Init>:
{ 
 8000424:	b538      	push	{r3, r4, r5, lr}
  if(NULL == hdma)
 8000426:	4604      	mov	r4, r0
 8000428:	b308      	cbz	r0, 800046e <HAL_DMA_Init+0x4a>
  hdma->State = HAL_DMA_STATE_BUSY;
 800042a:	2302      	movs	r3, #2
  tmp |=  hdma->Init.Direction        |
 800042c:	6885      	ldr	r5, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 800042e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp |=  hdma->Init.Direction        |
 8000432:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 8000434:	6801      	ldr	r1, [r0, #0]
  tmp |=  hdma->Init.Direction        |
 8000436:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000438:	68c5      	ldr	r5, [r0, #12]
  tmp = hdma->Instance->CCR;
 800043a:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800043c:	432b      	orrs	r3, r5
 800043e:	6905      	ldr	r5, [r0, #16]
 8000440:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000442:	6945      	ldr	r5, [r0, #20]
 8000444:	432b      	orrs	r3, r5
 8000446:	6985      	ldr	r5, [r0, #24]
 8000448:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800044a:	69c5      	ldr	r5, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800044c:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8000450:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8000454:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8000456:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8000458:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 800045a:	f7ff ffc1 	bl	80003e0 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800045e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000460:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000462:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8000464:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8000468:	f884 0020 	strb.w	r0, [r4, #32]
  return HAL_OK;
 800046c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800046e:	2001      	movs	r0, #1
}  
 8000470:	bd38      	pop	{r3, r4, r5, pc}

08000472 <HAL_DMA_Start_IT>:
{
 8000472:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8000474:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000478:	2c01      	cmp	r4, #1
 800047a:	d035      	beq.n	80004e8 <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 800047c:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000480:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8000482:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8000484:	f880 4020 	strb.w	r4, [r0, #32]
 8000488:	f04f 0600 	mov.w	r6, #0
 800048c:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 8000490:	d128      	bne.n	80004e4 <HAL_DMA_Start_IT+0x72>
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000492:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000496:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000498:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800049a:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800049c:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800049e:	f026 0601 	bic.w	r6, r6, #1
 80004a2:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80004a4:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 80004a6:	40bd      	lsls	r5, r7
 80004a8:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 80004aa:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80004ac:	6843      	ldr	r3, [r0, #4]
 80004ae:	6805      	ldr	r5, [r0, #0]
 80004b0:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 80004b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 80004b4:	bf0b      	itete	eq
 80004b6:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 80004b8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80004ba:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 80004bc:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80004be:	b14b      	cbz	r3, 80004d4 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80004c0:	6823      	ldr	r3, [r4, #0]
 80004c2:	f043 030e 	orr.w	r3, r3, #14
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80004c6:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80004c8:	682b      	ldr	r3, [r5, #0]
 80004ca:	f043 0301 	orr.w	r3, r3, #1
 80004ce:	602b      	str	r3, [r5, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80004d0:	2000      	movs	r0, #0
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80004d4:	6823      	ldr	r3, [r4, #0]
 80004d6:	f043 030a 	orr.w	r3, r3, #10
 80004da:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80004dc:	6823      	ldr	r3, [r4, #0]
 80004de:	f023 0304 	bic.w	r3, r3, #4
 80004e2:	e7f0      	b.n	80004c6 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 80004e4:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80004e8:	2002      	movs	r0, #2
} 
 80004ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004ec <HAL_DMA_Abort>:
	 hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80004ec:	6802      	ldr	r2, [r0, #0]
 80004ee:	6811      	ldr	r1, [r2, #0]
 80004f0:	f021 010e 	bic.w	r1, r1, #14
 80004f4:	6011      	str	r1, [r2, #0]
	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80004f6:	6811      	ldr	r1, [r2, #0]
{
 80004f8:	4603      	mov	r3, r0
	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80004fa:	f021 0101 	bic.w	r1, r1, #1
 80004fe:	6011      	str	r1, [r2, #0]
	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000500:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000502:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8000504:	2101      	movs	r1, #1
 8000506:	fa01 f202 	lsl.w	r2, r1, r2
 800050a:	6042      	str	r2, [r0, #4]
	__HAL_UNLOCK(hdma);
 800050c:	2000      	movs	r0, #0
	hdma->State = HAL_DMA_STATE_READY; 
 800050e:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
	__HAL_UNLOCK(hdma);
 8000512:	f883 0020 	strb.w	r0, [r3, #32]
}
 8000516:	4770      	bx	lr

08000518 <HAL_DMA_IRQHandler>:
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000518:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800051a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 800051c:	6803      	ldr	r3, [r0, #0]
{
 800051e:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000520:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000522:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000524:	2404      	movs	r4, #4
 8000526:	4094      	lsls	r4, r2
 8000528:	4226      	tst	r6, r4
 800052a:	d00e      	beq.n	800054a <HAL_DMA_IRQHandler+0x32>
 800052c:	f015 0f04 	tst.w	r5, #4
 8000530:	d00b      	beq.n	800054a <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	0692      	lsls	r2, r2, #26
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000536:	bf5e      	ittt	pl
 8000538:	681a      	ldrpl	r2, [r3, #0]
 800053a:	f022 0204 	bicpl.w	r2, r2, #4
 800053e:	601a      	strpl	r2, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000540:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000542:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 8000544:	b373      	cbz	r3, 80005a4 <HAL_DMA_IRQHandler+0x8c>
}  
 8000546:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 8000548:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800054a:	2402      	movs	r4, #2
 800054c:	4094      	lsls	r4, r2
 800054e:	4226      	tst	r6, r4
 8000550:	d012      	beq.n	8000578 <HAL_DMA_IRQHandler+0x60>
 8000552:	f015 0f02 	tst.w	r5, #2
 8000556:	d00f      	beq.n	8000578 <HAL_DMA_IRQHandler+0x60>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	0695      	lsls	r5, r2, #26
 800055c:	d406      	bmi.n	800056c <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	f022 020a 	bic.w	r2, r2, #10
 8000564:	601a      	str	r2, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000566:	2301      	movs	r3, #1
 8000568:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	__HAL_UNLOCK(hdma);
 800056c:	2300      	movs	r3, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800056e:	604c      	str	r4, [r1, #4]
  	__HAL_UNLOCK(hdma);
 8000570:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8000574:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000576:	e7e5      	b.n	8000544 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000578:	2408      	movs	r4, #8
 800057a:	4094      	lsls	r4, r2
 800057c:	4234      	tst	r4, r6
 800057e:	d011      	beq.n	80005a4 <HAL_DMA_IRQHandler+0x8c>
 8000580:	072c      	lsls	r4, r5, #28
 8000582:	d50f      	bpl.n	80005a4 <HAL_DMA_IRQHandler+0x8c>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000584:	681c      	ldr	r4, [r3, #0]
 8000586:	f024 040e 	bic.w	r4, r4, #14
 800058a:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800058c:	2301      	movs	r3, #1
 800058e:	fa03 f202 	lsl.w	r2, r3, r2
 8000592:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000594:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8000596:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 800059a:	2300      	movs	r3, #0
 800059c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 80005a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80005a2:	e7cf      	b.n	8000544 <HAL_DMA_IRQHandler+0x2c>
}  
 80005a4:	bc70      	pop	{r4, r5, r6}
 80005a6:	4770      	bx	lr

080005a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80005ac:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005b0:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8000744 <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80005b4:	4a61      	ldr	r2, [pc, #388]	; (800073c <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 80005b6:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 80005b8:	fa38 f403 	lsrs.w	r4, r8, r3
 80005bc:	d102      	bne.n	80005c4 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 80005be:	b003      	add	sp, #12
 80005c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80005c4:	f04f 0e01 	mov.w	lr, #1
 80005c8:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 80005cc:	ea18 060e 	ands.w	r6, r8, lr
 80005d0:	f000 80a6 	beq.w	8000720 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005d4:	684c      	ldr	r4, [r1, #4]
 80005d6:	f024 0710 	bic.w	r7, r4, #16
 80005da:	2f02      	cmp	r7, #2
 80005dc:	d116      	bne.n	800060c <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 80005de:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80005e2:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80005e6:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80005ea:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80005ee:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80005f2:	f04f 0c0f 	mov.w	ip, #15
 80005f6:	fa0c fc0b 	lsl.w	ip, ip, fp
 80005fa:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80005fe:	690d      	ldr	r5, [r1, #16]
 8000600:	fa05 f50b 	lsl.w	r5, r5, fp
 8000604:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000608:	f8ca 5020 	str.w	r5, [sl, #32]
 800060c:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000610:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000612:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000616:	fa05 f50a 	lsl.w	r5, r5, sl
 800061a:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800061c:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000620:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000624:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000628:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800062a:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800062e:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000630:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000634:	d811      	bhi.n	800065a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000636:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000638:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800063c:	68cf      	ldr	r7, [r1, #12]
 800063e:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000642:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000646:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000648:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800064a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800064e:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000652:	409f      	lsls	r7, r3
 8000654:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000658:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800065a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800065c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800065e:	688f      	ldr	r7, [r1, #8]
 8000660:	fa07 f70a 	lsl.w	r7, r7, sl
 8000664:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000666:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000668:	00e5      	lsls	r5, r4, #3
 800066a:	d559      	bpl.n	8000720 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800066c:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000670:	f045 0501 	orr.w	r5, r5, #1
 8000674:	f8c9 5018 	str.w	r5, [r9, #24]
 8000678:	f8d9 5018 	ldr.w	r5, [r9, #24]
 800067c:	f023 0703 	bic.w	r7, r3, #3
 8000680:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000684:	f005 0501 	and.w	r5, r5, #1
 8000688:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800068c:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800068e:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000692:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000694:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000696:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800069a:	f04f 0e0f 	mov.w	lr, #15
 800069e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80006a2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80006a6:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80006aa:	d03b      	beq.n	8000724 <HAL_GPIO_Init+0x17c>
 80006ac:	4d24      	ldr	r5, [pc, #144]	; (8000740 <HAL_GPIO_Init+0x198>)
 80006ae:	42a8      	cmp	r0, r5
 80006b0:	d03a      	beq.n	8000728 <HAL_GPIO_Init+0x180>
 80006b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006b6:	42a8      	cmp	r0, r5
 80006b8:	d038      	beq.n	800072c <HAL_GPIO_Init+0x184>
 80006ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006be:	42a8      	cmp	r0, r5
 80006c0:	d036      	beq.n	8000730 <HAL_GPIO_Init+0x188>
 80006c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006c6:	42a8      	cmp	r0, r5
 80006c8:	d034      	beq.n	8000734 <HAL_GPIO_Init+0x18c>
 80006ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006ce:	42a8      	cmp	r0, r5
 80006d0:	d032      	beq.n	8000738 <HAL_GPIO_Init+0x190>
 80006d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006d6:	42a8      	cmp	r0, r5
 80006d8:	bf14      	ite	ne
 80006da:	2507      	movne	r5, #7
 80006dc:	2506      	moveq	r5, #6
 80006de:	fa05 f50c 	lsl.w	r5, r5, ip
 80006e2:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80006e6:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80006e8:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80006ea:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006ec:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80006f0:	bf0c      	ite	eq
 80006f2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80006f4:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 80006f6:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80006f8:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006fa:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80006fe:	bf0c      	ite	eq
 8000700:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000702:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000704:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000706:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000708:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800070c:	bf0c      	ite	eq
 800070e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000710:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8000712:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000714:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000716:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000718:	bf54      	ite	pl
 800071a:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800071c:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 800071e:	60d5      	str	r5, [r2, #12]
    position++;
 8000720:	3301      	adds	r3, #1
 8000722:	e749      	b.n	80005b8 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000724:	2500      	movs	r5, #0
 8000726:	e7da      	b.n	80006de <HAL_GPIO_Init+0x136>
 8000728:	2501      	movs	r5, #1
 800072a:	e7d8      	b.n	80006de <HAL_GPIO_Init+0x136>
 800072c:	2502      	movs	r5, #2
 800072e:	e7d6      	b.n	80006de <HAL_GPIO_Init+0x136>
 8000730:	2503      	movs	r5, #3
 8000732:	e7d4      	b.n	80006de <HAL_GPIO_Init+0x136>
 8000734:	2504      	movs	r5, #4
 8000736:	e7d2      	b.n	80006de <HAL_GPIO_Init+0x136>
 8000738:	2505      	movs	r5, #5
 800073a:	e7d0      	b.n	80006de <HAL_GPIO_Init+0x136>
 800073c:	40010400 	.word	0x40010400
 8000740:	48000400 	.word	0x48000400
 8000744:	40021000 	.word	0x40021000

08000748 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000748:	6903      	ldr	r3, [r0, #16]
 800074a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800074c:	bf14      	ite	ne
 800074e:	2001      	movne	r0, #1
 8000750:	2000      	moveq	r0, #0
 8000752:	4770      	bx	lr

08000754 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000754:	b10a      	cbz	r2, 800075a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000756:	6181      	str	r1, [r0, #24]
 8000758:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800075a:	6281      	str	r1, [r0, #40]	; 0x28
 800075c:	4770      	bx	lr

0800075e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800075e:	6943      	ldr	r3, [r0, #20]
 8000760:	4059      	eors	r1, r3
 8000762:	6141      	str	r1, [r0, #20]
 8000764:	4770      	bx	lr
	...

08000768 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000768:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800076a:	4b04      	ldr	r3, [pc, #16]	; (800077c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800076c:	6959      	ldr	r1, [r3, #20]
 800076e:	4201      	tst	r1, r0
 8000770:	d002      	beq.n	8000778 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000772:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000774:	f001 fc82 	bl	800207c <HAL_GPIO_EXTI_Callback>
 8000778:	bd08      	pop	{r3, pc}
 800077a:	bf00      	nop
 800077c:	40010400 	.word	0x40010400

08000780 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000780:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000784:	4605      	mov	r5, r0
 8000786:	b918      	cbnz	r0, 8000790 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000788:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 800078a:	b002      	add	sp, #8
 800078c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000790:	6803      	ldr	r3, [r0, #0]
 8000792:	07df      	lsls	r7, r3, #31
 8000794:	d411      	bmi.n	80007ba <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000796:	682b      	ldr	r3, [r5, #0]
 8000798:	079e      	lsls	r6, r3, #30
 800079a:	f100 8088 	bmi.w	80008ae <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800079e:	682b      	ldr	r3, [r5, #0]
 80007a0:	071c      	lsls	r4, r3, #28
 80007a2:	f100 80fc 	bmi.w	800099e <HAL_RCC_OscConfig+0x21e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80007a6:	682b      	ldr	r3, [r5, #0]
 80007a8:	0758      	lsls	r0, r3, #29
 80007aa:	f100 8145 	bmi.w	8000a38 <HAL_RCC_OscConfig+0x2b8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80007ae:	69aa      	ldr	r2, [r5, #24]
 80007b0:	2a00      	cmp	r2, #0
 80007b2:	f040 81dc 	bne.w	8000b6e <HAL_RCC_OscConfig+0x3ee>
  return HAL_OK;
 80007b6:	2000      	movs	r0, #0
 80007b8:	e7e7      	b.n	800078a <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80007ba:	4cbd      	ldr	r4, [pc, #756]	; (8000ab0 <HAL_RCC_OscConfig+0x330>)
 80007bc:	6863      	ldr	r3, [r4, #4]
 80007be:	f003 030c 	and.w	r3, r3, #12
 80007c2:	2b04      	cmp	r3, #4
 80007c4:	d00a      	beq.n	80007dc <HAL_RCC_OscConfig+0x5c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007c6:	6863      	ldr	r3, [r4, #4]
 80007c8:	f003 030c 	and.w	r3, r3, #12
 80007cc:	2b08      	cmp	r3, #8
 80007ce:	d119      	bne.n	8000804 <HAL_RCC_OscConfig+0x84>
 80007d0:	6863      	ldr	r3, [r4, #4]
 80007d2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80007d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007da:	d113      	bne.n	8000804 <HAL_RCC_OscConfig+0x84>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007e0:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007e4:	6821      	ldr	r1, [r4, #0]
 80007e6:	fa93 f3a3 	rbit	r3, r3
 80007ea:	fab3 f383 	clz	r3, r3
 80007ee:	f003 031f 	and.w	r3, r3, #31
 80007f2:	2201      	movs	r2, #1
 80007f4:	fa02 f303 	lsl.w	r3, r2, r3
 80007f8:	420b      	tst	r3, r1
 80007fa:	d0cc      	beq.n	8000796 <HAL_RCC_OscConfig+0x16>
 80007fc:	686b      	ldr	r3, [r5, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d1c9      	bne.n	8000796 <HAL_RCC_OscConfig+0x16>
 8000802:	e7c1      	b.n	8000788 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000804:	686b      	ldr	r3, [r5, #4]
 8000806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800080a:	d11e      	bne.n	800084a <HAL_RCC_OscConfig+0xca>
 800080c:	6823      	ldr	r3, [r4, #0]
 800080e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000812:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000814:	f7ff fd76 	bl	8000304 <HAL_GetTick>
 8000818:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800081c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800081e:	2701      	movs	r7, #1
 8000820:	fa96 f3a6 	rbit	r3, r6
 8000824:	6822      	ldr	r2, [r4, #0]
 8000826:	fa96 f3a6 	rbit	r3, r6
 800082a:	fab3 f383 	clz	r3, r3
 800082e:	f003 031f 	and.w	r3, r3, #31
 8000832:	fa07 f303 	lsl.w	r3, r7, r3
 8000836:	4213      	tst	r3, r2
 8000838:	d1ad      	bne.n	8000796 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800083a:	f7ff fd63 	bl	8000304 <HAL_GetTick>
 800083e:	eba0 0008 	sub.w	r0, r0, r8
 8000842:	2864      	cmp	r0, #100	; 0x64
 8000844:	d9ec      	bls.n	8000820 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8000846:	2003      	movs	r0, #3
 8000848:	e79f      	b.n	800078a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800084a:	bb0b      	cbnz	r3, 8000890 <HAL_RCC_OscConfig+0x110>
 800084c:	6823      	ldr	r3, [r4, #0]
 800084e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000852:	6023      	str	r3, [r4, #0]
 8000854:	6823      	ldr	r3, [r4, #0]
 8000856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800085a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800085c:	f7ff fd52 	bl	8000304 <HAL_GetTick>
 8000860:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000864:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000866:	2701      	movs	r7, #1
 8000868:	fa96 f3a6 	rbit	r3, r6
 800086c:	6822      	ldr	r2, [r4, #0]
 800086e:	fa96 f3a6 	rbit	r3, r6
 8000872:	fab3 f383 	clz	r3, r3
 8000876:	f003 031f 	and.w	r3, r3, #31
 800087a:	fa07 f303 	lsl.w	r3, r7, r3
 800087e:	4213      	tst	r3, r2
 8000880:	d089      	beq.n	8000796 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000882:	f7ff fd3f 	bl	8000304 <HAL_GetTick>
 8000886:	eba0 0008 	sub.w	r0, r0, r8
 800088a:	2864      	cmp	r0, #100	; 0x64
 800088c:	d9ec      	bls.n	8000868 <HAL_RCC_OscConfig+0xe8>
 800088e:	e7da      	b.n	8000846 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000890:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000894:	6823      	ldr	r3, [r4, #0]
 8000896:	d103      	bne.n	80008a0 <HAL_RCC_OscConfig+0x120>
 8000898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800089c:	6023      	str	r3, [r4, #0]
 800089e:	e7b5      	b.n	800080c <HAL_RCC_OscConfig+0x8c>
 80008a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008a4:	6023      	str	r3, [r4, #0]
 80008a6:	6823      	ldr	r3, [r4, #0]
 80008a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008ac:	e7b1      	b.n	8000812 <HAL_RCC_OscConfig+0x92>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80008ae:	4c80      	ldr	r4, [pc, #512]	; (8000ab0 <HAL_RCC_OscConfig+0x330>)
 80008b0:	6863      	ldr	r3, [r4, #4]
 80008b2:	f013 0f0c 	tst.w	r3, #12
 80008b6:	d00a      	beq.n	80008ce <HAL_RCC_OscConfig+0x14e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80008b8:	6863      	ldr	r3, [r4, #4]
 80008ba:	f003 030c 	and.w	r3, r3, #12
 80008be:	2b08      	cmp	r3, #8
 80008c0:	d125      	bne.n	800090e <HAL_RCC_OscConfig+0x18e>
 80008c2:	6863      	ldr	r3, [r4, #4]
 80008c4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80008c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80008cc:	d11f      	bne.n	800090e <HAL_RCC_OscConfig+0x18e>
 80008ce:	2302      	movs	r3, #2
 80008d0:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008d4:	6821      	ldr	r1, [r4, #0]
 80008d6:	fa93 f3a3 	rbit	r3, r3
 80008da:	fab3 f383 	clz	r3, r3
 80008de:	f003 031f 	and.w	r3, r3, #31
 80008e2:	2201      	movs	r2, #1
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	420b      	tst	r3, r1
 80008ea:	d003      	beq.n	80008f4 <HAL_RCC_OscConfig+0x174>
 80008ec:	68eb      	ldr	r3, [r5, #12]
 80008ee:	4293      	cmp	r3, r2
 80008f0:	f47f af4a 	bne.w	8000788 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008f4:	6821      	ldr	r1, [r4, #0]
 80008f6:	23f8      	movs	r3, #248	; 0xf8
 80008f8:	fa93 f3a3 	rbit	r3, r3
 80008fc:	fab3 f283 	clz	r2, r3
 8000900:	692b      	ldr	r3, [r5, #16]
 8000902:	4093      	lsls	r3, r2
 8000904:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000908:	4313      	orrs	r3, r2
 800090a:	6023      	str	r3, [r4, #0]
 800090c:	e747      	b.n	800079e <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800090e:	68ea      	ldr	r2, [r5, #12]
 8000910:	2601      	movs	r6, #1
 8000912:	b30a      	cbz	r2, 8000958 <HAL_RCC_OscConfig+0x1d8>
 8000914:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000918:	fab3 f383 	clz	r3, r3
 800091c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000920:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	2702      	movs	r7, #2
 8000928:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800092a:	f7ff fceb 	bl	8000304 <HAL_GetTick>
 800092e:	4680      	mov	r8, r0
 8000930:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000934:	6822      	ldr	r2, [r4, #0]
 8000936:	fa97 f3a7 	rbit	r3, r7
 800093a:	fab3 f383 	clz	r3, r3
 800093e:	f003 031f 	and.w	r3, r3, #31
 8000942:	fa06 f303 	lsl.w	r3, r6, r3
 8000946:	4213      	tst	r3, r2
 8000948:	d1d4      	bne.n	80008f4 <HAL_RCC_OscConfig+0x174>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800094a:	f7ff fcdb 	bl	8000304 <HAL_GetTick>
 800094e:	eba0 0008 	sub.w	r0, r0, r8
 8000952:	2802      	cmp	r0, #2
 8000954:	d9ec      	bls.n	8000930 <HAL_RCC_OscConfig+0x1b0>
 8000956:	e776      	b.n	8000846 <HAL_RCC_OscConfig+0xc6>
 8000958:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 800095c:	fab3 f383 	clz	r3, r3
 8000960:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000964:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	2702      	movs	r7, #2
 800096c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800096e:	f7ff fcc9 	bl	8000304 <HAL_GetTick>
 8000972:	4680      	mov	r8, r0
 8000974:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000978:	6822      	ldr	r2, [r4, #0]
 800097a:	fa97 f3a7 	rbit	r3, r7
 800097e:	fab3 f383 	clz	r3, r3
 8000982:	f003 031f 	and.w	r3, r3, #31
 8000986:	fa06 f303 	lsl.w	r3, r6, r3
 800098a:	4213      	tst	r3, r2
 800098c:	f43f af07 	beq.w	800079e <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000990:	f7ff fcb8 	bl	8000304 <HAL_GetTick>
 8000994:	eba0 0008 	sub.w	r0, r0, r8
 8000998:	2802      	cmp	r0, #2
 800099a:	d9eb      	bls.n	8000974 <HAL_RCC_OscConfig+0x1f4>
 800099c:	e753      	b.n	8000846 <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800099e:	696a      	ldr	r2, [r5, #20]
 80009a0:	4e43      	ldr	r6, [pc, #268]	; (8000ab0 <HAL_RCC_OscConfig+0x330>)
 80009a2:	4944      	ldr	r1, [pc, #272]	; (8000ab4 <HAL_RCC_OscConfig+0x334>)
 80009a4:	2401      	movs	r4, #1
 80009a6:	b31a      	cbz	r2, 80009f0 <HAL_RCC_OscConfig+0x270>
 80009a8:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80009ac:	fab3 f383 	clz	r3, r3
 80009b0:	440b      	add	r3, r1
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	2702      	movs	r7, #2
 80009b6:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 80009b8:	f7ff fca4 	bl	8000304 <HAL_GetTick>
 80009bc:	4680      	mov	r8, r0
 80009be:	fa97 f3a7 	rbit	r3, r7
 80009c2:	fa97 f3a7 	rbit	r3, r7
 80009c6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ca:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80009cc:	fa97 f3a7 	rbit	r3, r7
 80009d0:	fab3 f383 	clz	r3, r3
 80009d4:	f003 031f 	and.w	r3, r3, #31
 80009d8:	fa04 f303 	lsl.w	r3, r4, r3
 80009dc:	4213      	tst	r3, r2
 80009de:	f47f aee2 	bne.w	80007a6 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009e2:	f7ff fc8f 	bl	8000304 <HAL_GetTick>
 80009e6:	eba0 0008 	sub.w	r0, r0, r8
 80009ea:	2802      	cmp	r0, #2
 80009ec:	d9e7      	bls.n	80009be <HAL_RCC_OscConfig+0x23e>
 80009ee:	e72a      	b.n	8000846 <HAL_RCC_OscConfig+0xc6>
 80009f0:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 80009f4:	fab3 f383 	clz	r3, r3
 80009f8:	440b      	add	r3, r1
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	2702      	movs	r7, #2
 80009fe:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a00:	f7ff fc80 	bl	8000304 <HAL_GetTick>
 8000a04:	4680      	mov	r8, r0
 8000a06:	fa97 f3a7 	rbit	r3, r7
 8000a0a:	fa97 f3a7 	rbit	r3, r7
 8000a0e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a12:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000a14:	fa97 f3a7 	rbit	r3, r7
 8000a18:	fab3 f383 	clz	r3, r3
 8000a1c:	f003 031f 	and.w	r3, r3, #31
 8000a20:	fa04 f303 	lsl.w	r3, r4, r3
 8000a24:	4213      	tst	r3, r2
 8000a26:	f43f aebe 	beq.w	80007a6 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a2a:	f7ff fc6b 	bl	8000304 <HAL_GetTick>
 8000a2e:	eba0 0008 	sub.w	r0, r0, r8
 8000a32:	2802      	cmp	r0, #2
 8000a34:	d9e7      	bls.n	8000a06 <HAL_RCC_OscConfig+0x286>
 8000a36:	e706      	b.n	8000846 <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a38:	4c1d      	ldr	r4, [pc, #116]	; (8000ab0 <HAL_RCC_OscConfig+0x330>)
 8000a3a:	69e3      	ldr	r3, [r4, #28]
 8000a3c:	00d9      	lsls	r1, r3, #3
 8000a3e:	d434      	bmi.n	8000aaa <HAL_RCC_OscConfig+0x32a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a40:	69e3      	ldr	r3, [r4, #28]
 8000a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a46:	61e3      	str	r3, [r4, #28]
 8000a48:	69e3      	ldr	r3, [r4, #28]
 8000a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4e:	9301      	str	r3, [sp, #4]
 8000a50:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a52:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a54:	4f18      	ldr	r7, [pc, #96]	; (8000ab8 <HAL_RCC_OscConfig+0x338>)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	05da      	lsls	r2, r3, #23
 8000a5a:	d52f      	bpl.n	8000abc <HAL_RCC_OscConfig+0x33c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a5c:	68ab      	ldr	r3, [r5, #8]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d13d      	bne.n	8000ade <HAL_RCC_OscConfig+0x35e>
 8000a62:	6a23      	ldr	r3, [r4, #32]
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000a6a:	f7ff fc4b 	bl	8000304 <HAL_GetTick>
 8000a6e:	2702      	movs	r7, #2
 8000a70:	4682      	mov	sl, r0
 8000a72:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a74:	f04f 0801 	mov.w	r8, #1
 8000a78:	fa97 f3a7 	rbit	r3, r7
 8000a7c:	fa97 f3a7 	rbit	r3, r7
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d06c      	beq.n	8000b5e <HAL_RCC_OscConfig+0x3de>
 8000a84:	6a22      	ldr	r2, [r4, #32]
 8000a86:	fa99 f3a9 	rbit	r3, r9
 8000a8a:	fab3 f383 	clz	r3, r3
 8000a8e:	f003 031f 	and.w	r3, r3, #31
 8000a92:	fa08 f303 	lsl.w	r3, r8, r3
 8000a96:	4213      	tst	r3, r2
 8000a98:	d058      	beq.n	8000b4c <HAL_RCC_OscConfig+0x3cc>
    if(pwrclkchanged == SET)
 8000a9a:	2e00      	cmp	r6, #0
 8000a9c:	f43f ae87 	beq.w	80007ae <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000aa0:	69e3      	ldr	r3, [r4, #28]
 8000aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	61e3      	str	r3, [r4, #28]
 8000aa8:	e681      	b.n	80007ae <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 8000aaa:	2600      	movs	r6, #0
 8000aac:	e7d2      	b.n	8000a54 <HAL_RCC_OscConfig+0x2d4>
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	10908120 	.word	0x10908120
 8000ab8:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000ac4:	f7ff fc1e 	bl	8000304 <HAL_GetTick>
 8000ac8:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	05db      	lsls	r3, r3, #23
 8000ace:	d4c5      	bmi.n	8000a5c <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ad0:	f7ff fc18 	bl	8000304 <HAL_GetTick>
 8000ad4:	eba0 0008 	sub.w	r0, r0, r8
 8000ad8:	2864      	cmp	r0, #100	; 0x64
 8000ada:	d9f6      	bls.n	8000aca <HAL_RCC_OscConfig+0x34a>
 8000adc:	e6b3      	b.n	8000846 <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ade:	bb3b      	cbnz	r3, 8000b30 <HAL_RCC_OscConfig+0x3b0>
 8000ae0:	6a23      	ldr	r3, [r4, #32]
 8000ae2:	f023 0301 	bic.w	r3, r3, #1
 8000ae6:	6223      	str	r3, [r4, #32]
 8000ae8:	6a23      	ldr	r3, [r4, #32]
 8000aea:	f023 0304 	bic.w	r3, r3, #4
 8000aee:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000af0:	f7ff fc08 	bl	8000304 <HAL_GetTick>
 8000af4:	2702      	movs	r7, #2
 8000af6:	4682      	mov	sl, r0
 8000af8:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000afa:	f04f 0801 	mov.w	r8, #1
 8000afe:	fa97 f3a7 	rbit	r3, r7
 8000b02:	fa97 f3a7 	rbit	r3, r7
 8000b06:	b373      	cbz	r3, 8000b66 <HAL_RCC_OscConfig+0x3e6>
 8000b08:	6a22      	ldr	r2, [r4, #32]
 8000b0a:	fa99 f3a9 	rbit	r3, r9
 8000b0e:	fab3 f383 	clz	r3, r3
 8000b12:	f003 031f 	and.w	r3, r3, #31
 8000b16:	fa08 f303 	lsl.w	r3, r8, r3
 8000b1a:	4213      	tst	r3, r2
 8000b1c:	d0bd      	beq.n	8000a9a <HAL_RCC_OscConfig+0x31a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b1e:	f7ff fbf1 	bl	8000304 <HAL_GetTick>
 8000b22:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b26:	eba0 000a 	sub.w	r0, r0, sl
 8000b2a:	4298      	cmp	r0, r3
 8000b2c:	d9e7      	bls.n	8000afe <HAL_RCC_OscConfig+0x37e>
 8000b2e:	e68a      	b.n	8000846 <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b30:	2b05      	cmp	r3, #5
 8000b32:	6a23      	ldr	r3, [r4, #32]
 8000b34:	d103      	bne.n	8000b3e <HAL_RCC_OscConfig+0x3be>
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	6223      	str	r3, [r4, #32]
 8000b3c:	e791      	b.n	8000a62 <HAL_RCC_OscConfig+0x2e2>
 8000b3e:	f023 0301 	bic.w	r3, r3, #1
 8000b42:	6223      	str	r3, [r4, #32]
 8000b44:	6a23      	ldr	r3, [r4, #32]
 8000b46:	f023 0304 	bic.w	r3, r3, #4
 8000b4a:	e78d      	b.n	8000a68 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b4c:	f7ff fbda 	bl	8000304 <HAL_GetTick>
 8000b50:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b54:	eba0 000a 	sub.w	r0, r0, sl
 8000b58:	4298      	cmp	r0, r3
 8000b5a:	d98d      	bls.n	8000a78 <HAL_RCC_OscConfig+0x2f8>
 8000b5c:	e673      	b.n	8000846 <HAL_RCC_OscConfig+0xc6>
 8000b5e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b62:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b64:	e78f      	b.n	8000a86 <HAL_RCC_OscConfig+0x306>
 8000b66:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b6c:	e7cd      	b.n	8000b0a <HAL_RCC_OscConfig+0x38a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b6e:	4c44      	ldr	r4, [pc, #272]	; (8000c80 <HAL_RCC_OscConfig+0x500>)
 8000b70:	6863      	ldr	r3, [r4, #4]
 8000b72:	f003 030c 	and.w	r3, r3, #12
 8000b76:	2b08      	cmp	r3, #8
 8000b78:	f43f ae06 	beq.w	8000788 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b7c:	2a02      	cmp	r2, #2
 8000b7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b82:	d158      	bne.n	8000c36 <HAL_RCC_OscConfig+0x4b6>
 8000b84:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000b88:	fab3 f383 	clz	r3, r3
 8000b8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b9a:	f7ff fbb3 	bl	8000304 <HAL_GetTick>
 8000b9e:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8000ba2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ba4:	2601      	movs	r6, #1
 8000ba6:	fa97 f3a7 	rbit	r3, r7
 8000baa:	6822      	ldr	r2, [r4, #0]
 8000bac:	fa97 f3a7 	rbit	r3, r7
 8000bb0:	fab3 f383 	clz	r3, r3
 8000bb4:	f003 031f 	and.w	r3, r3, #31
 8000bb8:	fa06 f303 	lsl.w	r3, r6, r3
 8000bbc:	4213      	tst	r3, r2
 8000bbe:	d133      	bne.n	8000c28 <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000bc2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000bc4:	f023 030f 	bic.w	r3, r3, #15
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000bcc:	6862      	ldr	r2, [r4, #4]
 8000bce:	6a2b      	ldr	r3, [r5, #32]
 8000bd0:	69e9      	ldr	r1, [r5, #28]
 8000bd2:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8000bd6:	430b      	orrs	r3, r1
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	6063      	str	r3, [r4, #4]
 8000bdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000be0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000be4:	fab3 f383 	clz	r3, r3
 8000be8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000bec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000bf6:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000bf8:	f7ff fb84 	bl	8000304 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bfc:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8000bfe:	4607      	mov	r7, r0
 8000c00:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c04:	6822      	ldr	r2, [r4, #0]
 8000c06:	fa95 f3a5 	rbit	r3, r5
 8000c0a:	fab3 f383 	clz	r3, r3
 8000c0e:	f003 031f 	and.w	r3, r3, #31
 8000c12:	fa06 f303 	lsl.w	r3, r6, r3
 8000c16:	4213      	tst	r3, r2
 8000c18:	f47f adcd 	bne.w	80007b6 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c1c:	f7ff fb72 	bl	8000304 <HAL_GetTick>
 8000c20:	1bc0      	subs	r0, r0, r7
 8000c22:	2802      	cmp	r0, #2
 8000c24:	d9ec      	bls.n	8000c00 <HAL_RCC_OscConfig+0x480>
 8000c26:	e60e      	b.n	8000846 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c28:	f7ff fb6c 	bl	8000304 <HAL_GetTick>
 8000c2c:	eba0 0008 	sub.w	r0, r0, r8
 8000c30:	2802      	cmp	r0, #2
 8000c32:	d9b8      	bls.n	8000ba6 <HAL_RCC_OscConfig+0x426>
 8000c34:	e607      	b.n	8000846 <HAL_RCC_OscConfig+0xc6>
 8000c36:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000c3a:	fab3 f383 	clz	r3, r3
 8000c3e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c42:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c4c:	f7ff fb5a 	bl	8000304 <HAL_GetTick>
 8000c50:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000c54:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c56:	2601      	movs	r6, #1
 8000c58:	fa95 f3a5 	rbit	r3, r5
 8000c5c:	6822      	ldr	r2, [r4, #0]
 8000c5e:	fa95 f3a5 	rbit	r3, r5
 8000c62:	fab3 f383 	clz	r3, r3
 8000c66:	f003 031f 	and.w	r3, r3, #31
 8000c6a:	fa06 f303 	lsl.w	r3, r6, r3
 8000c6e:	4213      	tst	r3, r2
 8000c70:	f43f ada1 	beq.w	80007b6 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c74:	f7ff fb46 	bl	8000304 <HAL_GetTick>
 8000c78:	1bc0      	subs	r0, r0, r7
 8000c7a:	2802      	cmp	r0, #2
 8000c7c:	d9ec      	bls.n	8000c58 <HAL_RCC_OscConfig+0x4d8>
 8000c7e:	e5e2      	b.n	8000846 <HAL_RCC_OscConfig+0xc6>
 8000c80:	40021000 	.word	0x40021000

08000c84 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000c84:	4911      	ldr	r1, [pc, #68]	; (8000ccc <HAL_RCC_GetSysClockFreq+0x48>)
 8000c86:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000c88:	f003 020c 	and.w	r2, r3, #12
 8000c8c:	2a08      	cmp	r2, #8
 8000c8e:	d11a      	bne.n	8000cc6 <HAL_RCC_GetSysClockFreq+0x42>
 8000c90:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000c94:	fa92 f2a2 	rbit	r2, r2
 8000c98:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000c9a:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000c9e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8000ca0:	fa90 f0a0 	rbit	r0, r0
 8000ca4:	fab0 f080 	clz	r0, r0
 8000ca8:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000cac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000cb0:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000cb2:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000cb4:	4a06      	ldr	r2, [pc, #24]	; (8000cd0 <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000cb6:	4807      	ldr	r0, [pc, #28]	; (8000cd4 <HAL_RCC_GetSysClockFreq+0x50>)
 8000cb8:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000cba:	4807      	ldr	r0, [pc, #28]	; (8000cd8 <HAL_RCC_GetSysClockFreq+0x54>)
 8000cbc:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000cc0:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000cc2:	4348      	muls	r0, r1
 8000cc4:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8000cc6:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	08003600 	.word	0x08003600
 8000cd4:	08003610 	.word	0x08003610
 8000cd8:	007a1200 	.word	0x007a1200

08000cdc <HAL_RCC_ClockConfig>:
{
 8000cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ce0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000ce2:	4604      	mov	r4, r0
 8000ce4:	b910      	cbnz	r0, 8000cec <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000cec:	4a4c      	ldr	r2, [pc, #304]	; (8000e20 <HAL_RCC_ClockConfig+0x144>)
 8000cee:	6813      	ldr	r3, [r2, #0]
 8000cf0:	f003 0307 	and.w	r3, r3, #7
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	d32e      	bcc.n	8000d56 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cf8:	6822      	ldr	r2, [r4, #0]
 8000cfa:	0791      	lsls	r1, r2, #30
 8000cfc:	d436      	bmi.n	8000d6c <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cfe:	07d2      	lsls	r2, r2, #31
 8000d00:	d43c      	bmi.n	8000d7c <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d02:	4a47      	ldr	r2, [pc, #284]	; (8000e20 <HAL_RCC_ClockConfig+0x144>)
 8000d04:	6813      	ldr	r3, [r2, #0]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	429d      	cmp	r5, r3
 8000d0c:	d375      	bcc.n	8000dfa <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d0e:	6822      	ldr	r2, [r4, #0]
 8000d10:	4d44      	ldr	r5, [pc, #272]	; (8000e24 <HAL_RCC_ClockConfig+0x148>)
 8000d12:	f012 0f04 	tst.w	r2, #4
 8000d16:	d17c      	bne.n	8000e12 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d18:	0713      	lsls	r3, r2, #28
 8000d1a:	d506      	bpl.n	8000d2a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d1c:	686b      	ldr	r3, [r5, #4]
 8000d1e:	6922      	ldr	r2, [r4, #16]
 8000d20:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000d24:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d28:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000d2a:	f7ff ffab 	bl	8000c84 <HAL_RCC_GetSysClockFreq>
 8000d2e:	686b      	ldr	r3, [r5, #4]
 8000d30:	22f0      	movs	r2, #240	; 0xf0
 8000d32:	fa92 f2a2 	rbit	r2, r2
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d3e:	40d3      	lsrs	r3, r2
 8000d40:	4a39      	ldr	r2, [pc, #228]	; (8000e28 <HAL_RCC_ClockConfig+0x14c>)
 8000d42:	5cd3      	ldrb	r3, [r2, r3]
 8000d44:	40d8      	lsrs	r0, r3
 8000d46:	4b39      	ldr	r3, [pc, #228]	; (8000e2c <HAL_RCC_ClockConfig+0x150>)
 8000d48:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f7ff fa98 	bl	8000280 <HAL_InitTick>
  return HAL_OK;
 8000d50:	2000      	movs	r0, #0
 8000d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d56:	6813      	ldr	r3, [r2, #0]
 8000d58:	f023 0307 	bic.w	r3, r3, #7
 8000d5c:	430b      	orrs	r3, r1
 8000d5e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d60:	6813      	ldr	r3, [r2, #0]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	4299      	cmp	r1, r3
 8000d68:	d1bd      	bne.n	8000ce6 <HAL_RCC_ClockConfig+0xa>
 8000d6a:	e7c5      	b.n	8000cf8 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d6c:	492d      	ldr	r1, [pc, #180]	; (8000e24 <HAL_RCC_ClockConfig+0x148>)
 8000d6e:	68a0      	ldr	r0, [r4, #8]
 8000d70:	684b      	ldr	r3, [r1, #4]
 8000d72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d76:	4303      	orrs	r3, r0
 8000d78:	604b      	str	r3, [r1, #4]
 8000d7a:	e7c0      	b.n	8000cfe <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d7c:	6862      	ldr	r2, [r4, #4]
 8000d7e:	4e29      	ldr	r6, [pc, #164]	; (8000e24 <HAL_RCC_ClockConfig+0x148>)
 8000d80:	2a01      	cmp	r2, #1
 8000d82:	d127      	bne.n	8000dd4 <HAL_RCC_ClockConfig+0xf8>
 8000d84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d88:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d8c:	6831      	ldr	r1, [r6, #0]
 8000d8e:	fa93 f3a3 	rbit	r3, r3
 8000d92:	fab3 f383 	clz	r3, r3
 8000d96:	f003 031f 	and.w	r3, r3, #31
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da0:	d0a1      	beq.n	8000ce6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000da2:	6873      	ldr	r3, [r6, #4]
 8000da4:	f023 0303 	bic.w	r3, r3, #3
 8000da8:	431a      	orrs	r2, r3
 8000daa:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8000dac:	f7ff faaa 	bl	8000304 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000db0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000db4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000db6:	6873      	ldr	r3, [r6, #4]
 8000db8:	6862      	ldr	r2, [r4, #4]
 8000dba:	f003 030c 	and.w	r3, r3, #12
 8000dbe:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000dc2:	d09e      	beq.n	8000d02 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dc4:	f7ff fa9e 	bl	8000304 <HAL_GetTick>
 8000dc8:	1bc0      	subs	r0, r0, r7
 8000dca:	4540      	cmp	r0, r8
 8000dcc:	d9f3      	bls.n	8000db6 <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8000dce:	2003      	movs	r0, #3
}
 8000dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000dd4:	2a02      	cmp	r2, #2
 8000dd6:	bf0c      	ite	eq
 8000dd8:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000ddc:	2302      	movne	r3, #2
 8000dde:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de2:	6830      	ldr	r0, [r6, #0]
 8000de4:	fa93 f3a3 	rbit	r3, r3
 8000de8:	fab3 f383 	clz	r3, r3
 8000dec:	f003 031f 	and.w	r3, r3, #31
 8000df0:	2101      	movs	r1, #1
 8000df2:	fa01 f303 	lsl.w	r3, r1, r3
 8000df6:	4203      	tst	r3, r0
 8000df8:	e7d2      	b.n	8000da0 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dfa:	6813      	ldr	r3, [r2, #0]
 8000dfc:	f023 0307 	bic.w	r3, r3, #7
 8000e00:	432b      	orrs	r3, r5
 8000e02:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e04:	6813      	ldr	r3, [r2, #0]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	429d      	cmp	r5, r3
 8000e0c:	f47f af6b 	bne.w	8000ce6 <HAL_RCC_ClockConfig+0xa>
 8000e10:	e77d      	b.n	8000d0e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e12:	686b      	ldr	r3, [r5, #4]
 8000e14:	68e1      	ldr	r1, [r4, #12]
 8000e16:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e1a:	430b      	orrs	r3, r1
 8000e1c:	606b      	str	r3, [r5, #4]
 8000e1e:	e77b      	b.n	8000d18 <HAL_RCC_ClockConfig+0x3c>
 8000e20:	40022000 	.word	0x40022000
 8000e24:	40021000 	.word	0x40021000
 8000e28:	08003a84 	.word	0x08003a84
 8000e2c:	20000008 	.word	0x20000008

08000e30 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000e32:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	fa92 f2a2 	rbit	r2, r2
 8000e3c:	fab2 f282 	clz	r2, r2
 8000e40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000e44:	40d3      	lsrs	r3, r2
 8000e46:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000e48:	5cd3      	ldrb	r3, [r2, r3]
 8000e4a:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000e4c:	6810      	ldr	r0, [r2, #0]
}    
 8000e4e:	40d8      	lsrs	r0, r3
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000
 8000e58:	08003a94 	.word	0x08003a94
 8000e5c:	20000008 	.word	0x20000008

08000e60 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000e62:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	fa92 f2a2 	rbit	r2, r2
 8000e6c:	fab2 f282 	clz	r2, r2
 8000e70:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000e74:	40d3      	lsrs	r3, r2
 8000e76:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000e78:	5cd3      	ldrb	r3, [r2, r3]
 8000e7a:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000e7c:	6810      	ldr	r0, [r2, #0]
} 
 8000e7e:	40d8      	lsrs	r0, r3
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40021000 	.word	0x40021000
 8000e88:	08003a94 	.word	0x08003a94
 8000e8c:	20000008 	.word	0x20000008

08000e90 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000e90:	6803      	ldr	r3, [r0, #0]
{
 8000e92:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000e96:	03df      	lsls	r7, r3, #15
{
 8000e98:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000e9a:	d523      	bpl.n	8000ee4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e9c:	4d9b      	ldr	r5, [pc, #620]	; (800110c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000e9e:	69eb      	ldr	r3, [r5, #28]
 8000ea0:	00de      	lsls	r6, r3, #3
 8000ea2:	f100 80d7 	bmi.w	8001054 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ea6:	69eb      	ldr	r3, [r5, #28]
 8000ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eac:	61eb      	str	r3, [r5, #28]
 8000eae:	69eb      	ldr	r3, [r5, #28]
 8000eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb4:	9301      	str	r3, [sp, #4]
 8000eb6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000eb8:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eba:	4f95      	ldr	r7, [pc, #596]	; (8001110 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	05d8      	lsls	r0, r3, #23
 8000ec0:	f140 80ca 	bpl.w	8001058 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000ec4:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000ec6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000eca:	f040 80da 	bne.w	8001082 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000ece:	6a2b      	ldr	r3, [r5, #32]
 8000ed0:	6862      	ldr	r2, [r4, #4]
 8000ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000eda:	b11e      	cbz	r6, 8000ee4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000edc:	69eb      	ldr	r3, [r5, #28]
 8000ede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ee2:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000ee4:	6820      	ldr	r0, [r4, #0]
 8000ee6:	07c3      	lsls	r3, r0, #31
 8000ee8:	d506      	bpl.n	8000ef8 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000eea:	4a88      	ldr	r2, [pc, #544]	; (800110c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000eec:	68a1      	ldr	r1, [r4, #8]
 8000eee:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ef0:	f023 0303 	bic.w	r3, r3, #3
 8000ef4:	430b      	orrs	r3, r1
 8000ef6:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000ef8:	0787      	lsls	r7, r0, #30
 8000efa:	d506      	bpl.n	8000f0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000efc:	4a83      	ldr	r2, [pc, #524]	; (800110c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000efe:	68e1      	ldr	r1, [r4, #12]
 8000f00:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f02:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000f06:	430b      	orrs	r3, r1
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8000f0a:	0746      	lsls	r6, r0, #29
 8000f0c:	d506      	bpl.n	8000f1c <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8000f0e:	4a7f      	ldr	r2, [pc, #508]	; (800110c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000f10:	6921      	ldr	r1, [r4, #16]
 8000f12:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f14:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000f18:	430b      	orrs	r3, r1
 8000f1a:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000f1c:	0685      	lsls	r5, r0, #26
 8000f1e:	d506      	bpl.n	8000f2e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000f20:	4a7a      	ldr	r2, [pc, #488]	; (800110c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000f22:	69e1      	ldr	r1, [r4, #28]
 8000f24:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f26:	f023 0310 	bic.w	r3, r3, #16
 8000f2a:	430b      	orrs	r3, r1
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000f2e:	0381      	lsls	r1, r0, #14
 8000f30:	d506      	bpl.n	8000f40 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8000f32:	4a76      	ldr	r2, [pc, #472]	; (800110c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000f34:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8000f36:	6853      	ldr	r3, [r2, #4]
 8000f38:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000f3c:	430b      	orrs	r3, r1
 8000f3e:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8000f40:	0642      	lsls	r2, r0, #25
 8000f42:	d506      	bpl.n	8000f52 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8000f44:	4a71      	ldr	r2, [pc, #452]	; (800110c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000f46:	6a21      	ldr	r1, [r4, #32]
 8000f48:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f4a:	f023 0320 	bic.w	r3, r3, #32
 8000f4e:	430b      	orrs	r3, r1
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8000f52:	0343      	lsls	r3, r0, #13
 8000f54:	d506      	bpl.n	8000f64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8000f56:	4a6d      	ldr	r2, [pc, #436]	; (800110c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000f58:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000f5a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f60:	430b      	orrs	r3, r1
 8000f62:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8000f64:	0707      	lsls	r7, r0, #28
 8000f66:	d506      	bpl.n	8000f76 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8000f68:	4a68      	ldr	r2, [pc, #416]	; (800110c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000f6a:	6961      	ldr	r1, [r4, #20]
 8000f6c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f6e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000f72:	430b      	orrs	r3, r1
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8000f76:	06c6      	lsls	r6, r0, #27
 8000f78:	d506      	bpl.n	8000f88 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8000f7a:	4a64      	ldr	r2, [pc, #400]	; (800110c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000f7c:	69a1      	ldr	r1, [r4, #24]
 8000f7e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f80:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000f84:	430b      	orrs	r3, r1
 8000f86:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8000f88:	0585      	lsls	r5, r0, #22
 8000f8a:	d506      	bpl.n	8000f9a <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8000f8c:	4a5f      	ldr	r2, [pc, #380]	; (800110c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000f8e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000f90:	6853      	ldr	r3, [r2, #4]
 8000f92:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000f96:	430b      	orrs	r3, r1
 8000f98:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8000f9a:	0601      	lsls	r1, r0, #24
 8000f9c:	d506      	bpl.n	8000fac <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8000f9e:	4a5b      	ldr	r2, [pc, #364]	; (800110c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000fa0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000fa2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000fa4:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8000fa8:	430b      	orrs	r3, r1
 8000faa:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8000fac:	05c2      	lsls	r2, r0, #23
 8000fae:	d506      	bpl.n	8000fbe <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8000fb0:	4a56      	ldr	r2, [pc, #344]	; (800110c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000fb2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000fb4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000fb6:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8000fba:	430b      	orrs	r3, r1
 8000fbc:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8000fbe:	04c3      	lsls	r3, r0, #19
 8000fc0:	d506      	bpl.n	8000fd0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8000fc2:	4a52      	ldr	r2, [pc, #328]	; (800110c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000fc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000fc6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000fc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fcc:	430b      	orrs	r3, r1
 8000fce:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8000fd0:	0487      	lsls	r7, r0, #18
 8000fd2:	d506      	bpl.n	8000fe2 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8000fd4:	4a4d      	ldr	r2, [pc, #308]	; (800110c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000fd6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000fd8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000fda:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000fde:	430b      	orrs	r3, r1
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8000fe2:	02c6      	lsls	r6, r0, #11
 8000fe4:	d506      	bpl.n	8000ff4 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8000fe6:	4a49      	ldr	r2, [pc, #292]	; (800110c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000fe8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000fea:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000fec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ff0:	430b      	orrs	r3, r1
 8000ff2:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8000ff4:	0285      	lsls	r5, r0, #10
 8000ff6:	d506      	bpl.n	8001006 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8000ff8:	4a44      	ldr	r2, [pc, #272]	; (800110c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000ffa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000ffc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ffe:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001002:	430b      	orrs	r3, r1
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001006:	0241      	lsls	r1, r0, #9
 8001008:	d506      	bpl.n	8001018 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800100a:	4a40      	ldr	r2, [pc, #256]	; (800110c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800100c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800100e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001010:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001014:	430b      	orrs	r3, r1
 8001016:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8001018:	0202      	lsls	r2, r0, #8
 800101a:	d506      	bpl.n	800102a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800101c:	4a3b      	ldr	r2, [pc, #236]	; (800110c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800101e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001020:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001022:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001026:	430b      	orrs	r3, r1
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800102a:	01c3      	lsls	r3, r0, #7
 800102c:	d506      	bpl.n	800103c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800102e:	4a37      	ldr	r2, [pc, #220]	; (800110c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001030:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001032:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001034:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001038:	430b      	orrs	r3, r1
 800103a:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800103c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8001040:	d01c      	beq.n	800107c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8001042:	4a32      	ldr	r2, [pc, #200]	; (800110c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001044:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001046:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001048:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800104c:	430b      	orrs	r3, r1
 800104e:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001050:	2000      	movs	r0, #0
 8001052:	e013      	b.n	800107c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 8001054:	2600      	movs	r6, #0
 8001056:	e730      	b.n	8000eba <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001060:	f7ff f950 	bl	8000304 <HAL_GetTick>
 8001064:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	05d9      	lsls	r1, r3, #23
 800106a:	f53f af2b 	bmi.w	8000ec4 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800106e:	f7ff f949 	bl	8000304 <HAL_GetTick>
 8001072:	eba0 0008 	sub.w	r0, r0, r8
 8001076:	2864      	cmp	r0, #100	; 0x64
 8001078:	d9f5      	bls.n	8001066 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 800107a:	2003      	movs	r0, #3
}
 800107c:	b002      	add	sp, #8
 800107e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001082:	6862      	ldr	r2, [r4, #4]
 8001084:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001088:	4293      	cmp	r3, r2
 800108a:	f43f af20 	beq.w	8000ece <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800108e:	6a29      	ldr	r1, [r5, #32]
 8001090:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001094:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8001098:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 800109c:	f8df e074 	ldr.w	lr, [pc, #116]	; 8001114 <HAL_RCCEx_PeriphCLKConfig+0x284>
 80010a0:	fab2 f282 	clz	r2, r2
 80010a4:	4472      	add	r2, lr
 80010a6:	0092      	lsls	r2, r2, #2
 80010a8:	2701      	movs	r7, #1
 80010aa:	6017      	str	r7, [r2, #0]
 80010ac:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80010b0:	fab3 f383 	clz	r3, r3
 80010b4:	4473      	add	r3, lr
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80010bc:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 80010be:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80010c0:	f57f af05 	bpl.w	8000ece <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 80010c4:	f7ff f91e 	bl	8000304 <HAL_GetTick>
 80010c8:	f04f 0802 	mov.w	r8, #2
 80010cc:	4682      	mov	sl, r0
 80010ce:	46c1      	mov	r9, r8
 80010d0:	fa98 f3a8 	rbit	r3, r8
 80010d4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010d8:	b1a3      	cbz	r3, 8001104 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80010da:	6a2a      	ldr	r2, [r5, #32]
 80010dc:	fa99 f3a9 	rbit	r3, r9
 80010e0:	fab3 f383 	clz	r3, r3
 80010e4:	f003 031f 	and.w	r3, r3, #31
 80010e8:	fa07 f303 	lsl.w	r3, r7, r3
 80010ec:	4213      	tst	r3, r2
 80010ee:	f47f aeee 	bne.w	8000ece <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010f2:	f7ff f907 	bl	8000304 <HAL_GetTick>
 80010f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80010fa:	eba0 000a 	sub.w	r0, r0, sl
 80010fe:	4298      	cmp	r0, r3
 8001100:	d9e6      	bls.n	80010d0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8001102:	e7ba      	b.n	800107a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8001104:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001108:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800110a:	e7e7      	b.n	80010dc <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800110c:	40021000 	.word	0x40021000
 8001110:	40007000 	.word	0x40007000
 8001114:	10908100 	.word	0x10908100

08001118 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001118:	6803      	ldr	r3, [r0, #0]
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001120:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001122:	6842      	ldr	r2, [r0, #4]
 8001124:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001128:	d10a      	bne.n	8001140 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 800112a:	6882      	ldr	r2, [r0, #8]
 800112c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001130:	d002      	beq.n	8001138 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001132:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001136:	d103      	bne.n	8001140 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800113e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001140:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001142:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001146:	d107      	bne.n	8001158 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001156:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001158:	2301      	movs	r3, #1
 800115a:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800115e:	2300      	movs	r3, #0
 8001160:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8001164:	2003      	movs	r0, #3
 8001166:	4770      	bx	lr

08001168 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
 8001168:	b570      	push	{r4, r5, r6, lr}
 800116a:	4605      	mov	r5, r0
 800116c:	460c      	mov	r4, r1
 800116e:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001170:	682b      	ldr	r3, [r5, #0]
 8001172:	6898      	ldr	r0, [r3, #8]
 8001174:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001178:	d00d      	beq.n	8001196 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x2e>
    if (Timeout != HAL_MAX_DELAY)
 800117a:	1c62      	adds	r2, r4, #1
 800117c:	d0f9      	beq.n	8001172 <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800117e:	b924      	cbnz	r4, 800118a <SPI_WaitFlagStateUntilTimeout.constprop.10+0x22>
 8001180:	4628      	mov	r0, r5
}
 8001182:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001186:	f7ff bfc7 	b.w	8001118 <SPI_WaitFifoStateUntilTimeout.part.1>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800118a:	f7ff f8bb 	bl	8000304 <HAL_GetTick>
 800118e:	1b80      	subs	r0, r0, r6
 8001190:	4284      	cmp	r4, r0
 8001192:	d8ed      	bhi.n	8001170 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 8001194:	e7f4      	b.n	8001180 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x18>
}
 8001196:	bd70      	pop	{r4, r5, r6, pc}

08001198 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800119a:	4606      	mov	r6, r0
 800119c:	460c      	mov	r4, r1
 800119e:	4615      	mov	r5, r2
 80011a0:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 80011a2:	6831      	ldr	r1, [r6, #0]
 80011a4:	6888      	ldr	r0, [r1, #8]
 80011a6:	4020      	ands	r0, r4
 80011a8:	d00e      	beq.n	80011c8 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x30>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80011aa:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 80011ae:	bf01      	itttt	eq
 80011b0:	7b0a      	ldrbeq	r2, [r1, #12]
 80011b2:	b2d2      	uxtbeq	r2, r2
 80011b4:	f88d 2007 	strbeq.w	r2, [sp, #7]
      UNUSED(tmpreg);
 80011b8:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
    if (Timeout != HAL_MAX_DELAY)
 80011bc:	1c6b      	adds	r3, r5, #1
 80011be:	d0f1      	beq.n	80011a4 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80011c0:	b925      	cbnz	r5, 80011cc <SPI_WaitFifoStateUntilTimeout.constprop.11+0x34>
 80011c2:	4630      	mov	r0, r6
 80011c4:	f7ff ffa8 	bl	8001118 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 80011c8:	b003      	add	sp, #12
 80011ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80011cc:	f7ff f89a 	bl	8000304 <HAL_GetTick>
 80011d0:	1bc0      	subs	r0, r0, r7
 80011d2:	4285      	cmp	r5, r0
 80011d4:	d8e5      	bhi.n	80011a2 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 80011d6:	e7f4      	b.n	80011c2 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x2a>

080011d8 <SPI_AbortRx_ISR>:
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
  __IO uint32_t count;

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 80011d8:	6803      	ldr	r3, [r0, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
{
 80011dc:	b513      	push	{r0, r1, r4, lr}
  __HAL_SPI_DISABLE(hspi);
 80011de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011e2:	601a      	str	r2, [r3, #0]

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80011e4:	4a1a      	ldr	r2, [pc, #104]	; (8001250 <SPI_AbortRx_ISR+0x78>)
 80011e6:	f645 51c0 	movw	r1, #24000	; 0x5dc0
 80011ea:	6812      	ldr	r2, [r2, #0]
 80011ec:	fbb2 f1f1 	udiv	r1, r2, r1
 80011f0:	2264      	movs	r2, #100	; 0x64
 80011f2:	434a      	muls	r2, r1
 80011f4:	9201      	str	r2, [sp, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
{
 80011fc:	4604      	mov	r4, r0
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 80011fe:	605a      	str	r2, [r3, #4]

  /* Check RXNEIE is disabled */
  do
  {
    if (count-- == 0U)
 8001200:	9a01      	ldr	r2, [sp, #4]
 8001202:	1e51      	subs	r1, r2, #1
 8001204:	9101      	str	r1, [sp, #4]
 8001206:	b9f2      	cbnz	r2, 8001246 <SPI_AbortRx_ISR+0x6e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001208:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800120a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800120e:	6623      	str	r3, [r4, #96]	; 0x60
    }
  }
  while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8001210:	f7ff f878 	bl	8000304 <HAL_GetTick>
 8001214:	2164      	movs	r1, #100	; 0x64
 8001216:	4602      	mov	r2, r0
 8001218:	4620      	mov	r0, r4
 800121a:	f7ff ffa5 	bl	8001168 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 800121e:	b108      	cbz	r0, 8001224 <SPI_AbortRx_ISR+0x4c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8001220:	2340      	movs	r3, #64	; 0x40
 8001222:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8001224:	f7ff f86e 	bl	8000304 <HAL_GetTick>
 8001228:	2264      	movs	r2, #100	; 0x64
 800122a:	4603      	mov	r3, r0
 800122c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001230:	4620      	mov	r0, r4
 8001232:	f7ff ffb1 	bl	8001198 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8001236:	b108      	cbz	r0, 800123c <SPI_AbortRx_ISR+0x64>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8001238:	2340      	movs	r3, #64	; 0x40
 800123a:	6623      	str	r3, [r4, #96]	; 0x60
  }

  hspi->State = HAL_SPI_STATE_ABORT;
 800123c:	2307      	movs	r3, #7
 800123e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8001242:	b002      	add	sp, #8
 8001244:	bd10      	pop	{r4, pc}
  while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	0652      	lsls	r2, r2, #25
 800124a:	d4d9      	bmi.n	8001200 <SPI_AbortRx_ISR+0x28>
 800124c:	e7e0      	b.n	8001210 <SPI_AbortRx_ISR+0x38>
 800124e:	bf00      	nop
 8001250:	20000008 	.word	0x20000008

08001254 <SPI_EndRxTxTransaction>:
{
 8001254:	b570      	push	{r4, r5, r6, lr}
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001256:	4613      	mov	r3, r2
{
 8001258:	460d      	mov	r5, r1
 800125a:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800125c:	460a      	mov	r2, r1
 800125e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8001262:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001264:	f7ff ff98 	bl	8001198 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8001268:	b128      	cbz	r0, 8001276 <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800126a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800126c:	f043 0320 	orr.w	r3, r3, #32
 8001270:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8001272:	2003      	movs	r0, #3
 8001274:	e00f      	b.n	8001296 <SPI_EndRxTxTransaction+0x42>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001276:	4632      	mov	r2, r6
 8001278:	4629      	mov	r1, r5
 800127a:	4620      	mov	r0, r4
 800127c:	f7ff ff74 	bl	8001168 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8001280:	2800      	cmp	r0, #0
 8001282:	d1f2      	bne.n	800126a <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001284:	4633      	mov	r3, r6
 8001286:	462a      	mov	r2, r5
 8001288:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800128c:	4620      	mov	r0, r4
 800128e:	f7ff ff83 	bl	8001198 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8001292:	2800      	cmp	r0, #0
 8001294:	d1e9      	bne.n	800126a <SPI_EndRxTxTransaction+0x16>
}
 8001296:	bd70      	pop	{r4, r5, r6, pc}

08001298 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8001298:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t count;

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800129a:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <SPI_AbortTx_ISR+0x78>)
 800129c:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80012a6:	2364      	movs	r3, #100	; 0x64
 80012a8:	4353      	muls	r3, r2
 80012aa:	9301      	str	r3, [sp, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 80012ac:	6803      	ldr	r3, [r0, #0]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
{
 80012b4:	4604      	mov	r4, r0
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 80012b6:	605a      	str	r2, [r3, #4]

  /* Check TXEIE is disabled */
  do
  {
    if (count-- == 0U)
 80012b8:	9a01      	ldr	r2, [sp, #4]
 80012ba:	1e51      	subs	r1, r2, #1
 80012bc:	9101      	str	r1, [sp, #4]
 80012be:	bb1a      	cbnz	r2, 8001308 <SPI_AbortTx_ISR+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80012c0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80012c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012c6:	6623      	str	r3, [r4, #96]	; 0x60
      break;
    }
  }
  while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE));

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80012c8:	f7ff f81c 	bl	8000304 <HAL_GetTick>
 80012cc:	2164      	movs	r1, #100	; 0x64
 80012ce:	4602      	mov	r2, r0
 80012d0:	4620      	mov	r0, r4
 80012d2:	f7ff ffbf 	bl	8001254 <SPI_EndRxTxTransaction>
 80012d6:	b108      	cbz	r0, 80012dc <SPI_AbortTx_ISR+0x44>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80012d8:	2340      	movs	r3, #64	; 0x40
 80012da:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 80012dc:	6822      	ldr	r2, [r4, #0]
 80012de:	6813      	ldr	r3, [r2, #0]
 80012e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012e4:	6013      	str	r3, [r2, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80012e6:	f7ff f80d 	bl	8000304 <HAL_GetTick>
 80012ea:	2264      	movs	r2, #100	; 0x64
 80012ec:	4603      	mov	r3, r0
 80012ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80012f2:	4620      	mov	r0, r4
 80012f4:	f7ff ff50 	bl	8001198 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 80012f8:	b108      	cbz	r0, 80012fe <SPI_AbortTx_ISR+0x66>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80012fa:	2340      	movs	r3, #64	; 0x40
 80012fc:	6623      	str	r3, [r4, #96]	; 0x60
  }

  hspi->State = HAL_SPI_STATE_ABORT;
 80012fe:	2307      	movs	r3, #7
 8001300:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8001304:	b002      	add	sp, #8
 8001306:	bd10      	pop	{r4, pc}
  while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE));
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	0612      	lsls	r2, r2, #24
 800130c:	d4d4      	bmi.n	80012b8 <SPI_AbortTx_ISR+0x20>
 800130e:	e7db      	b.n	80012c8 <SPI_AbortTx_ISR+0x30>
 8001310:	20000008 	.word	0x20000008

08001314 <SPI_EndRxTransaction>:
{
 8001314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001316:	6843      	ldr	r3, [r0, #4]
 8001318:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 800131c:	4604      	mov	r4, r0
 800131e:	460e      	mov	r6, r1
 8001320:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001322:	d10b      	bne.n	800133c <SPI_EndRxTransaction+0x28>
 8001324:	6883      	ldr	r3, [r0, #8]
 8001326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800132a:	d002      	beq.n	8001332 <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800132c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001330:	d104      	bne.n	800133c <SPI_EndRxTransaction+0x28>
    __HAL_SPI_DISABLE(hspi);
 8001332:	6823      	ldr	r3, [r4, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800133a:	601a      	str	r2, [r3, #0]
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800133c:	463a      	mov	r2, r7
 800133e:	4631      	mov	r1, r6
 8001340:	4620      	mov	r0, r4
 8001342:	f7ff ff11 	bl	8001168 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8001346:	4605      	mov	r5, r0
 8001348:	b128      	cbz	r0, 8001356 <SPI_EndRxTransaction+0x42>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800134a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800134c:	f043 0320 	orr.w	r3, r3, #32
 8001350:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8001352:	2503      	movs	r5, #3
 8001354:	e013      	b.n	800137e <SPI_EndRxTransaction+0x6a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001356:	6863      	ldr	r3, [r4, #4]
 8001358:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800135c:	d10f      	bne.n	800137e <SPI_EndRxTransaction+0x6a>
 800135e:	68a3      	ldr	r3, [r4, #8]
 8001360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001364:	d002      	beq.n	800136c <SPI_EndRxTransaction+0x58>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800136a:	d108      	bne.n	800137e <SPI_EndRxTransaction+0x6a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800136c:	463b      	mov	r3, r7
 800136e:	4632      	mov	r2, r6
 8001370:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001374:	4620      	mov	r0, r4
 8001376:	f7ff ff0f 	bl	8001198 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 800137a:	2800      	cmp	r0, #0
 800137c:	d1e5      	bne.n	800134a <SPI_EndRxTransaction+0x36>
}
 800137e:	4628      	mov	r0, r5
 8001380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001382 <HAL_SPI_Init>:
{
 8001382:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8001384:	4604      	mov	r4, r0
 8001386:	2800      	cmp	r0, #0
 8001388:	d04e      	beq.n	8001428 <HAL_SPI_Init+0xa6>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800138e:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8001392:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001396:	b91b      	cbnz	r3, 80013a0 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001398:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800139c:	f001 f848 	bl	8002430 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80013a0:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80013a2:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80013a4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80013a8:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80013aa:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 80013ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80013b0:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80013b4:	600b      	str	r3, [r1, #0]
 80013b6:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80013ba:	d932      	bls.n	8001422 <HAL_SPI_Init+0xa0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80013bc:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80013be:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013c2:	bf18      	it	ne
 80013c4:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80013c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013c8:	b92b      	cbnz	r3, 80013d6 <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80013ca:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80013ce:	bf8c      	ite	hi
 80013d0:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80013d2:	2301      	movls	r3, #1
 80013d4:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80013d6:	68a6      	ldr	r6, [r4, #8]
 80013d8:	6863      	ldr	r3, [r4, #4]
 80013da:	69a5      	ldr	r5, [r4, #24]
 80013dc:	4333      	orrs	r3, r6
 80013de:	6926      	ldr	r6, [r4, #16]
 80013e0:	4333      	orrs	r3, r6
 80013e2:	6966      	ldr	r6, [r4, #20]
 80013e4:	4333      	orrs	r3, r6
 80013e6:	69e6      	ldr	r6, [r4, #28]
 80013e8:	4333      	orrs	r3, r6
 80013ea:	6a26      	ldr	r6, [r4, #32]
 80013ec:	4333      	orrs	r3, r6
 80013ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80013f0:	4333      	orrs	r3, r6
 80013f2:	f405 7600 	and.w	r6, r5, #512	; 0x200
 80013f6:	4333      	orrs	r3, r6
 80013f8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80013fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013fc:	431a      	orrs	r2, r3
 80013fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001400:	0c2d      	lsrs	r5, r5, #16
 8001402:	431a      	orrs	r2, r3
 8001404:	f005 0504 	and.w	r5, r5, #4
 8001408:	432a      	orrs	r2, r5
 800140a:	4302      	orrs	r2, r0
 800140c:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800140e:	69cb      	ldr	r3, [r1, #28]
 8001410:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001414:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001416:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001418:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800141a:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800141c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 8001420:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001422:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001426:	e7cc      	b.n	80013c2 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8001428:	2001      	movs	r0, #1
}
 800142a:	bd70      	pop	{r4, r5, r6, pc}

0800142c <HAL_SPI_Transmit_DMA>:
  __HAL_LOCK(hspi);
 800142c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8001430:	2b01      	cmp	r3, #1
{
 8001432:	b510      	push	{r4, lr}
 8001434:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8001436:	d068      	beq.n	800150a <HAL_SPI_Transmit_DMA+0xde>
 8001438:	2301      	movs	r3, #1
 800143a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 800143e:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
 8001442:	b2c0      	uxtb	r0, r0
 8001444:	4298      	cmp	r0, r3
 8001446:	d15e      	bne.n	8001506 <HAL_SPI_Transmit_DMA+0xda>
  if ((pData == NULL) || (Size == 0U))
 8001448:	2900      	cmp	r1, #0
 800144a:	d050      	beq.n	80014ee <HAL_SPI_Transmit_DMA+0xc2>
 800144c:	2a00      	cmp	r2, #0
 800144e:	d04e      	beq.n	80014ee <HAL_SPI_Transmit_DMA+0xc2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001450:	2303      	movs	r3, #3
 8001452:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001456:	2300      	movs	r3, #0
 8001458:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800145a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 800145c:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800145e:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxXferCount = 0U;
 8001460:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 8001464:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8001466:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800146a:	68a3      	ldr	r3, [r4, #8]
  hspi->TxXferSize  = Size;
 800146c:	87a2      	strh	r2, [r4, #60]	; 0x3c
 800146e:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8001470:	6d60      	ldr	r0, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001472:	63a1      	str	r1, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8001478:	bf02      	ittt	eq
 800147a:	6813      	ldreq	r3, [r2, #0]
 800147c:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8001480:	6013      	streq	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8001482:	4b23      	ldr	r3, [pc, #140]	; (8001510 <HAL_SPI_Transmit_DMA+0xe4>)
 8001484:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8001486:	4b23      	ldr	r3, [pc, #140]	; (8001514 <HAL_SPI_Transmit_DMA+0xe8>)
 8001488:	6283      	str	r3, [r0, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800148a:	4b23      	ldr	r3, [pc, #140]	; (8001518 <HAL_SPI_Transmit_DMA+0xec>)
 800148c:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback = NULL;
 800148e:	2300      	movs	r3, #0
 8001490:	6343      	str	r3, [r0, #52]	; 0x34
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8001492:	6853      	ldr	r3, [r2, #4]
 8001494:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001498:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800149a:	68e3      	ldr	r3, [r4, #12]
 800149c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80014a0:	d80f      	bhi.n	80014c2 <HAL_SPI_Transmit_DMA+0x96>
 80014a2:	6943      	ldr	r3, [r0, #20]
 80014a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a8:	d10b      	bne.n	80014c2 <HAL_SPI_Transmit_DMA+0x96>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80014aa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80014ac:	f013 0f01 	tst.w	r3, #1
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80014b0:	6853      	ldr	r3, [r2, #4]
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80014b2:	d120      	bne.n	80014f6 <HAL_SPI_Transmit_DMA+0xca>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80014b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014b8:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80014ba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80014bc:	f3c3 034e 	ubfx	r3, r3, #1, #15
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80014c0:	87e3      	strh	r3, [r4, #62]	; 0x3e
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 80014c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80014c4:	320c      	adds	r2, #12
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	f7fe ffd3 	bl	8000472 <HAL_DMA_Start_IT>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80014cc:	6823      	ldr	r3, [r4, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80014d2:	bf5e      	ittt	pl
 80014d4:	681a      	ldrpl	r2, [r3, #0]
 80014d6:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80014da:	601a      	strpl	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	f042 0220 	orr.w	r2, r2, #32
 80014e2:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	f042 0202 	orr.w	r2, r2, #2
 80014ea:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80014ec:	2000      	movs	r0, #0
  __HAL_UNLOCK(hspi);
 80014ee:	2300      	movs	r3, #0
 80014f0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 80014f4:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80014f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014fa:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80014fc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80014fe:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8001502:	3301      	adds	r3, #1
 8001504:	e7dc      	b.n	80014c0 <HAL_SPI_Transmit_DMA+0x94>
    errorcode = HAL_BUSY;
 8001506:	2002      	movs	r0, #2
 8001508:	e7f1      	b.n	80014ee <HAL_SPI_Transmit_DMA+0xc2>
  __HAL_LOCK(hspi);
 800150a:	2002      	movs	r0, #2
}
 800150c:	bd10      	pop	{r4, pc}
 800150e:	bf00      	nop
 8001510:	08001969 	.word	0x08001969
 8001514:	080019af 	.word	0x080019af
 8001518:	0800198d 	.word	0x0800198d

0800151c <HAL_SPI_TransmitReceive_DMA>:
{
 800151c:	b538      	push	{r3, r4, r5, lr}
 800151e:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8001520:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 8001524:	2801      	cmp	r0, #1
 8001526:	f000 80bc 	beq.w	80016a2 <HAL_SPI_TransmitReceive_DMA+0x186>
 800152a:	2001      	movs	r0, #1
 800152c:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  tmp  = hspi->State;
 8001530:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8001534:	b2c0      	uxtb	r0, r0
  if (!((tmp == HAL_SPI_STATE_READY) ||
 8001536:	2801      	cmp	r0, #1
 8001538:	d00b      	beq.n	8001552 <HAL_SPI_TransmitReceive_DMA+0x36>
 800153a:	6865      	ldr	r5, [r4, #4]
 800153c:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 8001540:	f040 80ab 	bne.w	800169a <HAL_SPI_TransmitReceive_DMA+0x17e>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001544:	68a5      	ldr	r5, [r4, #8]
 8001546:	2d00      	cmp	r5, #0
 8001548:	f040 80a7 	bne.w	800169a <HAL_SPI_TransmitReceive_DMA+0x17e>
 800154c:	2804      	cmp	r0, #4
 800154e:	f040 80a4 	bne.w	800169a <HAL_SPI_TransmitReceive_DMA+0x17e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001552:	2900      	cmp	r1, #0
 8001554:	f000 80a3 	beq.w	800169e <HAL_SPI_TransmitReceive_DMA+0x182>
 8001558:	2a00      	cmp	r2, #0
 800155a:	f000 80a0 	beq.w	800169e <HAL_SPI_TransmitReceive_DMA+0x182>
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 809d 	beq.w	800169e <HAL_SPI_TransmitReceive_DMA+0x182>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001564:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001568:	6422      	str	r2, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800156a:	2804      	cmp	r0, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800156c:	bf1c      	itt	ne
 800156e:	2005      	movne	r0, #5
 8001570:	f884 005d 	strbne.w	r0, [r4, #93]	; 0x5d
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8001574:	6822      	ldr	r2, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001576:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001578:	2000      	movs	r0, #0
 800157a:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 800157c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxXferCount = Size;
 800157e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8001582:	6851      	ldr	r1, [r2, #4]
  hspi->RxISR       = NULL;
 8001584:	64e0      	str	r0, [r4, #76]	; 0x4c
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8001586:	f421 41c0 	bic.w	r1, r1, #24576	; 0x6000
  hspi->TxISR       = NULL;
 800158a:	6520      	str	r0, [r4, #80]	; 0x50
  hspi->TxXferSize  = Size;
 800158c:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferSize  = Size;
 800158e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8001592:	6051      	str	r1, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001594:	68e1      	ldr	r1, [r4, #12]
 8001596:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001598:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800159c:	6821      	ldr	r1, [r4, #0]
 800159e:	d93f      	bls.n	8001620 <HAL_SPI_TransmitReceive_DMA+0x104>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80015a0:	6853      	ldr	r3, [r2, #4]
 80015a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015a6:	6053      	str	r3, [r2, #4]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80015a8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 80015ac:	6c22      	ldr	r2, [r4, #64]	; 0x40
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80015ae:	2b04      	cmp	r3, #4
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80015b0:	bf0b      	itete	eq
 80015b2:	4b3d      	ldreq	r3, [pc, #244]	; (80016a8 <HAL_SPI_TransmitReceive_DMA+0x18c>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80015b4:	4b3d      	ldrne	r3, [pc, #244]	; (80016ac <HAL_SPI_TransmitReceive_DMA+0x190>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80015b6:	62c3      	streq	r3, [r0, #44]	; 0x2c
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80015b8:	62c3      	strne	r3, [r0, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80015ba:	bf0c      	ite	eq
 80015bc:	4b3c      	ldreq	r3, [pc, #240]	; (80016b0 <HAL_SPI_TransmitReceive_DMA+0x194>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80015be:	4b3d      	ldrne	r3, [pc, #244]	; (80016b4 <HAL_SPI_TransmitReceive_DMA+0x198>)
 80015c0:	6283      	str	r3, [r0, #40]	; 0x28
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80015c2:	4b3d      	ldr	r3, [pc, #244]	; (80016b8 <HAL_SPI_TransmitReceive_DMA+0x19c>)
 80015c4:	6303      	str	r3, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 80015c6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  hspi->hdmarx->XferAbortCallback = NULL;
 80015ca:	2500      	movs	r5, #0
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	310c      	adds	r1, #12
  hspi->hdmarx->XferAbortCallback = NULL;
 80015d0:	6345      	str	r5, [r0, #52]	; 0x34
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 80015d2:	f7fe ff4e 	bl	8000472 <HAL_DMA_Start_IT>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80015d6:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80015d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80015da:	6853      	ldr	r3, [r2, #4]
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 80015dc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6053      	str	r3, [r2, #4]
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 80015e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80015e6:	62c5      	str	r5, [r0, #44]	; 0x2c
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	320c      	adds	r2, #12
  hspi->hdmatx->XferCpltCallback     = NULL;
 80015ec:	6285      	str	r5, [r0, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 80015ee:	6305      	str	r5, [r0, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 80015f0:	6345      	str	r5, [r0, #52]	; 0x34
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 80015f2:	f7fe ff3e 	bl	8000472 <HAL_DMA_Start_IT>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80015f6:	6823      	ldr	r3, [r4, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80015fc:	bf5e      	ittt	pl
 80015fe:	681a      	ldrpl	r2, [r3, #0]
 8001600:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8001604:	601a      	strpl	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	f042 0220 	orr.w	r2, r2, #32
 800160c:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	f042 0202 	orr.w	r2, r2, #2
 8001614:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001616:	2000      	movs	r0, #0
  __HAL_UNLOCK(hspi);
 8001618:	2300      	movs	r3, #0
 800161a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 800161e:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001620:	6855      	ldr	r5, [r2, #4]
 8001622:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
 8001626:	6055      	str	r5, [r2, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001628:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800162a:	696d      	ldr	r5, [r5, #20]
 800162c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001630:	d10a      	bne.n	8001648 <HAL_SPI_TransmitReceive_DMA+0x12c>
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8001632:	f013 0f01 	tst.w	r3, #1
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8001636:	6853      	ldr	r3, [r2, #4]
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8001638:	d11e      	bne.n	8001678 <HAL_SPI_TransmitReceive_DMA+0x15c>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800163a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800163e:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8001640:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001642:	f3c3 034e 	ubfx	r3, r3, #1, #15
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8001646:	87e3      	strh	r3, [r4, #62]	; 0x3e
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001648:	6943      	ldr	r3, [r0, #20]
 800164a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800164e:	d1ab      	bne.n	80015a8 <HAL_SPI_TransmitReceive_DMA+0x8c>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001650:	6853      	ldr	r3, [r2, #4]
 8001652:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001656:	6053      	str	r3, [r2, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8001658:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800165c:	f013 0f01 	tst.w	r3, #1
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8001660:	6853      	ldr	r3, [r2, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8001662:	d111      	bne.n	8001688 <HAL_SPI_TransmitReceive_DMA+0x16c>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8001664:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001668:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800166a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800166e:	f3c3 034e 	ubfx	r3, r3, #1, #15
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8001672:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8001676:	e797      	b.n	80015a8 <HAL_SPI_TransmitReceive_DMA+0x8c>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8001678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800167c:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800167e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001680:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8001684:	3301      	adds	r3, #1
 8001686:	e7de      	b.n	8001646 <HAL_SPI_TransmitReceive_DMA+0x12a>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8001688:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800168c:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800168e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001692:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8001696:	3301      	adds	r3, #1
 8001698:	e7eb      	b.n	8001672 <HAL_SPI_TransmitReceive_DMA+0x156>
    errorcode = HAL_BUSY;
 800169a:	2002      	movs	r0, #2
 800169c:	e7bc      	b.n	8001618 <HAL_SPI_TransmitReceive_DMA+0xfc>
    errorcode = HAL_ERROR;
 800169e:	2001      	movs	r0, #1
 80016a0:	e7ba      	b.n	8001618 <HAL_SPI_TransmitReceive_DMA+0xfc>
  __HAL_LOCK(hspi);
 80016a2:	2002      	movs	r0, #2
}
 80016a4:	bd38      	pop	{r3, r4, r5, pc}
 80016a6:	bf00      	nop
 80016a8:	08001975 	.word	0x08001975
 80016ac:	08001981 	.word	0x08001981
 80016b0:	08001a19 	.word	0x08001a19
 80016b4:	08001a6d 	.word	0x08001a6d
 80016b8:	0800198d 	.word	0x0800198d

080016bc <HAL_SPI_Receive_DMA>:
{
 80016bc:	4613      	mov	r3, r2
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80016be:	6882      	ldr	r2, [r0, #8]
{
 80016c0:	b570      	push	{r4, r5, r6, lr}
 80016c2:	4604      	mov	r4, r0
 80016c4:	460d      	mov	r5, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80016c6:	b95a      	cbnz	r2, 80016e0 <HAL_SPI_Receive_DMA+0x24>
 80016c8:	6846      	ldr	r6, [r0, #4]
 80016ca:	f5b6 7f82 	cmp.w	r6, #260	; 0x104
 80016ce:	d107      	bne.n	80016e0 <HAL_SPI_Receive_DMA+0x24>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80016d0:	2204      	movs	r2, #4
 80016d2:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
}
 80016d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80016da:	460a      	mov	r2, r1
 80016dc:	f7ff bf1e 	b.w	800151c <HAL_SPI_TransmitReceive_DMA>
  __HAL_LOCK(hspi);
 80016e0:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
 80016e4:	2901      	cmp	r1, #1
 80016e6:	d079      	beq.n	80017dc <HAL_SPI_Receive_DMA+0x120>
  if (hspi->State != HAL_SPI_STATE_READY)
 80016e8:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  __HAL_LOCK(hspi);
 80016ec:	2101      	movs	r1, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 80016ee:	b2c0      	uxtb	r0, r0
 80016f0:	4288      	cmp	r0, r1
  __HAL_LOCK(hspi);
 80016f2:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 80016f6:	d16f      	bne.n	80017d8 <HAL_SPI_Receive_DMA+0x11c>
  if ((pData == NULL) || (Size == 0U))
 80016f8:	2d00      	cmp	r5, #0
 80016fa:	d045      	beq.n	8001788 <HAL_SPI_Receive_DMA+0xcc>
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d043      	beq.n	8001788 <HAL_SPI_Receive_DMA+0xcc>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001700:	2104      	movs	r1, #4
 8001702:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001706:	2100      	movs	r1, #0
 8001708:	6621      	str	r1, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 800170a:	64e1      	str	r1, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 800170c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001710:	6521      	str	r1, [r4, #80]	; 0x50
  hspi->TxXferCount = 0U;
 8001712:	87e1      	strh	r1, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 8001714:	87a1      	strh	r1, [r4, #60]	; 0x3c
 8001716:	6821      	ldr	r1, [r4, #0]
  hspi->RxXferSize  = Size;
 8001718:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800171c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    SPI_1LINE_RX(hspi);
 8001720:	bf08      	it	eq
 8001722:	680b      	ldreq	r3, [r1, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001724:	6425      	str	r5, [r4, #64]	; 0x40
    SPI_1LINE_RX(hspi);
 8001726:	bf04      	itt	eq
 8001728:	f423 4380 	biceq.w	r3, r3, #16384	; 0x4000
 800172c:	600b      	streq	r3, [r1, #0]
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800172e:	684b      	ldr	r3, [r1, #4]
 8001730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001732:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001736:	604b      	str	r3, [r1, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001738:	68e3      	ldr	r3, [r4, #12]
 800173a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800173e:	684b      	ldr	r3, [r1, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001740:	d926      	bls.n	8001790 <HAL_SPI_Receive_DMA+0xd4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001742:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001746:	604b      	str	r3, [r1, #4]
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8001748:	4b25      	ldr	r3, [pc, #148]	; (80017e0 <HAL_SPI_Receive_DMA+0x124>)
 800174a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800174c:	4b25      	ldr	r3, [pc, #148]	; (80017e4 <HAL_SPI_Receive_DMA+0x128>)
 800174e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8001750:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <HAL_SPI_Receive_DMA+0x12c>)
 8001752:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmarx->XferAbortCallback = NULL;
 8001754:	2300      	movs	r3, #0
 8001756:	6343      	str	r3, [r0, #52]	; 0x34
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 8001758:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800175c:	462a      	mov	r2, r5
 800175e:	b29b      	uxth	r3, r3
 8001760:	310c      	adds	r1, #12
 8001762:	f7fe fe86 	bl	8000472 <HAL_DMA_Start_IT>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001766:	6823      	ldr	r3, [r4, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800176c:	bf5e      	ittt	pl
 800176e:	681a      	ldrpl	r2, [r3, #0]
 8001770:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8001774:	601a      	strpl	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	f042 0220 	orr.w	r2, r2, #32
 800177c:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	f042 0201 	orr.w	r2, r2, #1
 8001784:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001786:	2000      	movs	r0, #0
  __HAL_UNLOCK(hspi);
 8001788:	2300      	movs	r3, #0
 800178a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 800178e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001790:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001794:	604b      	str	r3, [r1, #4]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001796:	6943      	ldr	r3, [r0, #20]
 8001798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800179c:	d1d4      	bne.n	8001748 <HAL_SPI_Receive_DMA+0x8c>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800179e:	684b      	ldr	r3, [r1, #4]
 80017a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017a4:	604b      	str	r3, [r1, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80017a6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80017aa:	f013 0f01 	tst.w	r3, #1
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80017ae:	684b      	ldr	r3, [r1, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80017b0:	d109      	bne.n	80017c6 <HAL_SPI_Receive_DMA+0x10a>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80017b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80017b6:	604b      	str	r3, [r1, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80017b8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80017bc:	f3c3 034e 	ubfx	r3, r3, #1, #15
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80017c0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80017c4:	e7c0      	b.n	8001748 <HAL_SPI_Receive_DMA+0x8c>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80017c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017ca:	604b      	str	r3, [r1, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80017cc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80017d0:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80017d4:	3301      	adds	r3, #1
 80017d6:	e7f3      	b.n	80017c0 <HAL_SPI_Receive_DMA+0x104>
    errorcode = HAL_BUSY;
 80017d8:	2002      	movs	r0, #2
 80017da:	e7d5      	b.n	8001788 <HAL_SPI_Receive_DMA+0xcc>
  __HAL_LOCK(hspi);
 80017dc:	2002      	movs	r0, #2
}
 80017de:	bd70      	pop	{r4, r5, r6, pc}
 80017e0:	08001975 	.word	0x08001975
 80017e4:	08001a19 	.word	0x08001a19
 80017e8:	0800198d 	.word	0x0800198d

080017ec <HAL_SPI_Abort>:
{
 80017ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80017ee:	4b59      	ldr	r3, [pc, #356]	; (8001954 <HAL_SPI_Abort+0x168>)
 80017f0:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80017fa:	2364      	movs	r3, #100	; 0x64
 80017fc:	4353      	muls	r3, r2
 80017fe:	9301      	str	r3, [sp, #4]
  count = resetcount;
 8001800:	9b01      	ldr	r3, [sp, #4]
 8001802:	9300      	str	r3, [sp, #0]
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8001804:	6803      	ldr	r3, [r0, #0]
 8001806:	685a      	ldr	r2, [r3, #4]
{
 8001808:	4604      	mov	r4, r0
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 800180a:	0610      	lsls	r0, r2, #24
 800180c:	d50d      	bpl.n	800182a <HAL_SPI_Abort+0x3e>
    hspi->TxISR = SPI_AbortTx_ISR;
 800180e:	4a52      	ldr	r2, [pc, #328]	; (8001958 <HAL_SPI_Abort+0x16c>)
 8001810:	6522      	str	r2, [r4, #80]	; 0x50
      if (count-- == 0U)
 8001812:	9a00      	ldr	r2, [sp, #0]
 8001814:	1e51      	subs	r1, r2, #1
 8001816:	9100      	str	r1, [sp, #0]
 8001818:	2a00      	cmp	r2, #0
 800181a:	f040 808f 	bne.w	800193c <HAL_SPI_Abort+0x150>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800181e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001824:	6622      	str	r2, [r4, #96]	; 0x60
    count = resetcount;
 8001826:	9a01      	ldr	r2, [sp, #4]
 8001828:	9200      	str	r2, [sp, #0]
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	0651      	lsls	r1, r2, #25
 800182e:	d50d      	bpl.n	800184c <HAL_SPI_Abort+0x60>
    hspi->RxISR = SPI_AbortRx_ISR;
 8001830:	4a4a      	ldr	r2, [pc, #296]	; (800195c <HAL_SPI_Abort+0x170>)
 8001832:	64e2      	str	r2, [r4, #76]	; 0x4c
      if (count-- == 0U)
 8001834:	9a00      	ldr	r2, [sp, #0]
 8001836:	1e51      	subs	r1, r2, #1
 8001838:	9100      	str	r1, [sp, #0]
 800183a:	2a00      	cmp	r2, #0
 800183c:	f040 8084 	bne.w	8001948 <HAL_SPI_Abort+0x15c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001840:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001842:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001846:	6622      	str	r2, [r4, #96]	; 0x60
    count = resetcount;
 8001848:	9a01      	ldr	r2, [sp, #4]
 800184a:	9200      	str	r2, [sp, #0]
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	f022 0220 	bic.w	r2, r2, #32
 8001852:	605a      	str	r2, [r3, #4]
  if ((HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN)))
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	0792      	lsls	r2, r2, #30
 8001858:	d402      	bmi.n	8001860 <HAL_SPI_Abort+0x74>
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	07db      	lsls	r3, r3, #31
 800185e:	d551      	bpl.n	8001904 <HAL_SPI_Abort+0x118>
    if (hspi->hdmatx != NULL)
 8001860:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001862:	b330      	cbz	r0, 80018b2 <HAL_SPI_Abort+0xc6>
      hspi->hdmatx->XferAbortCallback = NULL;
 8001864:	2300      	movs	r3, #0
 8001866:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 8001868:	f7fe fe40 	bl	80004ec <HAL_DMA_Abort>
 800186c:	b108      	cbz	r0, 8001872 <HAL_SPI_Abort+0x86>
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800186e:	2340      	movs	r3, #64	; 0x40
 8001870:	6623      	str	r3, [r4, #96]	; 0x60
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 8001872:	6822      	ldr	r2, [r4, #0]
 8001874:	6853      	ldr	r3, [r2, #4]
 8001876:	f023 0302 	bic.w	r3, r3, #2
 800187a:	6053      	str	r3, [r2, #4]
      if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800187c:	f7fe fd42 	bl	8000304 <HAL_GetTick>
 8001880:	2164      	movs	r1, #100	; 0x64
 8001882:	4602      	mov	r2, r0
 8001884:	4620      	mov	r0, r4
 8001886:	f7ff fce5 	bl	8001254 <SPI_EndRxTxTransaction>
 800188a:	b108      	cbz	r0, 8001890 <HAL_SPI_Abort+0xa4>
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800188c:	2340      	movs	r3, #64	; 0x40
 800188e:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_DISABLE(hspi);
 8001890:	6822      	ldr	r2, [r4, #0]
 8001892:	6813      	ldr	r3, [r2, #0]
 8001894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001898:	6013      	str	r3, [r2, #0]
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800189a:	f7fe fd33 	bl	8000304 <HAL_GetTick>
 800189e:	2264      	movs	r2, #100	; 0x64
 80018a0:	4603      	mov	r3, r0
 80018a2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80018a6:	4620      	mov	r0, r4
 80018a8:	f7ff fc76 	bl	8001198 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 80018ac:	b108      	cbz	r0, 80018b2 <HAL_SPI_Abort+0xc6>
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80018ae:	2340      	movs	r3, #64	; 0x40
 80018b0:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->hdmarx != NULL)
 80018b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80018b4:	b330      	cbz	r0, 8001904 <HAL_SPI_Abort+0x118>
      hspi->hdmarx->XferAbortCallback = NULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 80018ba:	f7fe fe17 	bl	80004ec <HAL_DMA_Abort>
 80018be:	b108      	cbz	r0, 80018c4 <HAL_SPI_Abort+0xd8>
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80018c0:	2340      	movs	r3, #64	; 0x40
 80018c2:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_DISABLE(hspi);
 80018c4:	6822      	ldr	r2, [r4, #0]
 80018c6:	6813      	ldr	r3, [r2, #0]
 80018c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018cc:	6013      	str	r3, [r2, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80018ce:	f7fe fd19 	bl	8000304 <HAL_GetTick>
 80018d2:	2164      	movs	r1, #100	; 0x64
 80018d4:	4602      	mov	r2, r0
 80018d6:	4620      	mov	r0, r4
 80018d8:	f7ff fc46 	bl	8001168 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 80018dc:	b108      	cbz	r0, 80018e2 <HAL_SPI_Abort+0xf6>
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80018de:	2340      	movs	r3, #64	; 0x40
 80018e0:	6623      	str	r3, [r4, #96]	; 0x60
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80018e2:	f7fe fd0f 	bl	8000304 <HAL_GetTick>
 80018e6:	2264      	movs	r2, #100	; 0x64
 80018e8:	4603      	mov	r3, r0
 80018ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80018ee:	4620      	mov	r0, r4
 80018f0:	f7ff fc52 	bl	8001198 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 80018f4:	b108      	cbz	r0, 80018fa <HAL_SPI_Abort+0x10e>
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80018f6:	2340      	movs	r3, #64	; 0x40
 80018f8:	6623      	str	r3, [r4, #96]	; 0x60
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 80018fa:	6822      	ldr	r2, [r4, #0]
 80018fc:	6853      	ldr	r3, [r2, #4]
 80018fe:	f023 0301 	bic.w	r3, r3, #1
 8001902:	6053      	str	r3, [r2, #4]
  hspi->RxXferCount = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800190a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 800190c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800190e:	2a40      	cmp	r2, #64	; 0x40
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001910:	6822      	ldr	r2, [r4, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001912:	bf18      	it	ne
 8001914:	6623      	strne	r3, [r4, #96]	; 0x60
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001916:	9302      	str	r3, [sp, #8]
 8001918:	68d1      	ldr	r1, [r2, #12]
 800191a:	9102      	str	r1, [sp, #8]
 800191c:	6891      	ldr	r1, [r2, #8]
 800191e:	9102      	str	r1, [sp, #8]
 8001920:	9902      	ldr	r1, [sp, #8]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001922:	9303      	str	r3, [sp, #12]
  errorcode = HAL_OK;
 8001924:	bf18      	it	ne
 8001926:	4618      	movne	r0, r3
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001928:	6893      	ldr	r3, [r2, #8]
 800192a:	9303      	str	r3, [sp, #12]
 800192c:	9b03      	ldr	r3, [sp, #12]
    errorcode = HAL_ERROR;
 800192e:	bf08      	it	eq
 8001930:	2001      	moveq	r0, #1
  hspi->State = HAL_SPI_STATE_READY;
 8001932:	2301      	movs	r3, #1
 8001934:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8001938:	b004      	add	sp, #16
 800193a:	bd10      	pop	{r4, pc}
    while (hspi->State != HAL_SPI_STATE_ABORT);
 800193c:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 8001940:	2a07      	cmp	r2, #7
 8001942:	f47f af66 	bne.w	8001812 <HAL_SPI_Abort+0x26>
 8001946:	e76e      	b.n	8001826 <HAL_SPI_Abort+0x3a>
    while (hspi->State != HAL_SPI_STATE_ABORT);
 8001948:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 800194c:	2a07      	cmp	r2, #7
 800194e:	f47f af71 	bne.w	8001834 <HAL_SPI_Abort+0x48>
 8001952:	e779      	b.n	8001848 <HAL_SPI_Abort+0x5c>
 8001954:	20000008 	.word	0x20000008
 8001958:	08001299 	.word	0x08001299
 800195c:	080011d9 	.word	0x080011d9

08001960 <HAL_SPI_TxCpltCallback>:
 8001960:	4770      	bx	lr

08001962 <HAL_SPI_RxCpltCallback>:
 8001962:	4770      	bx	lr

08001964 <HAL_SPI_TxRxCpltCallback>:
 8001964:	4770      	bx	lr

08001966 <HAL_SPI_TxHalfCpltCallback>:
 8001966:	4770      	bx	lr

08001968 <SPI_DMAHalfTransmitCplt>:
{
 8001968:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 800196a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800196c:	f7ff fffb 	bl	8001966 <HAL_SPI_TxHalfCpltCallback>
 8001970:	bd08      	pop	{r3, pc}

08001972 <HAL_SPI_RxHalfCpltCallback>:
 8001972:	4770      	bx	lr

08001974 <SPI_DMAHalfReceiveCplt>:
{
 8001974:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8001976:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001978:	f7ff fffb 	bl	8001972 <HAL_SPI_RxHalfCpltCallback>
 800197c:	bd08      	pop	{r3, pc}

0800197e <HAL_SPI_TxRxHalfCpltCallback>:
 800197e:	4770      	bx	lr

08001980 <SPI_DMAHalfTransmitReceiveCplt>:
{
 8001980:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8001982:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001984:	f7ff fffb 	bl	800197e <HAL_SPI_TxRxHalfCpltCallback>
 8001988:	bd08      	pop	{r3, pc}

0800198a <HAL_SPI_ErrorCallback>:
 800198a:	4770      	bx	lr

0800198c <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800198c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800198e:	6802      	ldr	r2, [r0, #0]
{
 8001990:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001992:	6853      	ldr	r3, [r2, #4]
 8001994:	f023 0303 	bic.w	r3, r3, #3
 8001998:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800199a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800199c:	f043 0310 	orr.w	r3, r3, #16
 80019a0:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80019a2:	2301      	movs	r3, #1
 80019a4:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 80019a8:	f7ff ffef 	bl	800198a <HAL_SPI_ErrorCallback>
 80019ac:	bd08      	pop	{r3, pc}

080019ae <SPI_DMATransmitCplt>:
{
 80019ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80019b0:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019b2:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 80019b4:	f7fe fca6 	bl	8000304 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80019b8:	682b      	ldr	r3, [r5, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	069b      	lsls	r3, r3, #26
  tickstart = HAL_GetTick();
 80019be:	4602      	mov	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80019c0:	d426      	bmi.n	8001a10 <SPI_DMATransmitCplt+0x62>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80019c2:	6823      	ldr	r3, [r4, #0]
 80019c4:	6859      	ldr	r1, [r3, #4]
 80019c6:	f021 0120 	bic.w	r1, r1, #32
 80019ca:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80019cc:	6859      	ldr	r1, [r3, #4]
 80019ce:	f021 0102 	bic.w	r1, r1, #2
 80019d2:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80019d4:	4620      	mov	r0, r4
 80019d6:	2164      	movs	r1, #100	; 0x64
 80019d8:	f7ff fc3c 	bl	8001254 <SPI_EndRxTxTransaction>
 80019dc:	b118      	cbz	r0, 80019e6 <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80019de:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80019e0:	f043 0320 	orr.w	r3, r3, #32
 80019e4:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80019e6:	68a3      	ldr	r3, [r4, #8]
 80019e8:	b933      	cbnz	r3, 80019f8 <SPI_DMATransmitCplt+0x4a>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	6823      	ldr	r3, [r4, #0]
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	9201      	str	r2, [sp, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	9301      	str	r3, [sp, #4]
 80019f6:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80019fc:	2301      	movs	r3, #1
 80019fe:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001a02:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001a04:	b123      	cbz	r3, 8001a10 <SPI_DMATransmitCplt+0x62>
      HAL_SPI_ErrorCallback(hspi);
 8001a06:	4620      	mov	r0, r4
 8001a08:	f7ff ffbf 	bl	800198a <HAL_SPI_ErrorCallback>
}
 8001a0c:	b003      	add	sp, #12
 8001a0e:	bd30      	pop	{r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 8001a10:	4620      	mov	r0, r4
 8001a12:	f7ff ffa5 	bl	8001960 <HAL_SPI_TxCpltCallback>
 8001a16:	e7f9      	b.n	8001a0c <SPI_DMATransmitCplt+0x5e>

08001a18 <SPI_DMAReceiveCplt>:
{
 8001a18:	b538      	push	{r3, r4, r5, lr}
 8001a1a:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a1c:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 8001a1e:	f7fe fc71 	bl	8000304 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8001a22:	682b      	ldr	r3, [r5, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	069b      	lsls	r3, r3, #26
  tickstart = HAL_GetTick();
 8001a28:	4602      	mov	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8001a2a:	d41b      	bmi.n	8001a64 <SPI_DMAReceiveCplt+0x4c>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001a2c:	6823      	ldr	r3, [r4, #0]
 8001a2e:	6859      	ldr	r1, [r3, #4]
 8001a30:	f021 0120 	bic.w	r1, r1, #32
 8001a34:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001a36:	6859      	ldr	r1, [r3, #4]
 8001a38:	f021 0103 	bic.w	r1, r1, #3
 8001a3c:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001a3e:	4620      	mov	r0, r4
 8001a40:	2164      	movs	r1, #100	; 0x64
 8001a42:	f7ff fc67 	bl	8001314 <SPI_EndRxTransaction>
 8001a46:	b108      	cbz	r0, 8001a4c <SPI_DMAReceiveCplt+0x34>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001a48:	2320      	movs	r3, #32
 8001a4a:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->RxXferCount = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8001a52:	2301      	movs	r3, #1
 8001a54:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001a58:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001a5a:	b11b      	cbz	r3, 8001a64 <SPI_DMAReceiveCplt+0x4c>
      HAL_SPI_ErrorCallback(hspi);
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	f7ff ff94 	bl	800198a <HAL_SPI_ErrorCallback>
      return;
 8001a62:	bd38      	pop	{r3, r4, r5, pc}
  HAL_SPI_RxCpltCallback(hspi);
 8001a64:	4620      	mov	r0, r4
 8001a66:	f7ff ff7c 	bl	8001962 <HAL_SPI_RxCpltCallback>
 8001a6a:	bd38      	pop	{r3, r4, r5, pc}

08001a6c <SPI_DMATransmitReceiveCplt>:
{
 8001a6c:	b538      	push	{r3, r4, r5, lr}
 8001a6e:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a70:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 8001a72:	f7fe fc47 	bl	8000304 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8001a76:	682b      	ldr	r3, [r5, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	069b      	lsls	r3, r3, #26
  tickstart = HAL_GetTick();
 8001a7c:	4602      	mov	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8001a7e:	d41f      	bmi.n	8001ac0 <SPI_DMATransmitReceiveCplt+0x54>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001a80:	6821      	ldr	r1, [r4, #0]
 8001a82:	684b      	ldr	r3, [r1, #4]
 8001a84:	f023 0320 	bic.w	r3, r3, #32
 8001a88:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	2164      	movs	r1, #100	; 0x64
 8001a8e:	f7ff fbe1 	bl	8001254 <SPI_EndRxTxTransaction>
 8001a92:	b118      	cbz	r0, 8001a9c <SPI_DMATransmitReceiveCplt+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a94:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001a96:	f043 0320 	orr.w	r3, r3, #32
 8001a9a:	6623      	str	r3, [r4, #96]	; 0x60
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001a9c:	6822      	ldr	r2, [r4, #0]
 8001a9e:	6853      	ldr	r3, [r2, #4]
 8001aa0:	f023 0303 	bic.w	r3, r3, #3
 8001aa4:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8001aaa:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ab4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001ab6:	b11b      	cbz	r3, 8001ac0 <SPI_DMATransmitReceiveCplt+0x54>
      HAL_SPI_ErrorCallback(hspi);
 8001ab8:	4620      	mov	r0, r4
 8001aba:	f7ff ff66 	bl	800198a <HAL_SPI_ErrorCallback>
      return;
 8001abe:	bd38      	pop	{r3, r4, r5, pc}
  HAL_SPI_TxRxCpltCallback(hspi);
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	f7ff ff4f 	bl	8001964 <HAL_SPI_TxRxCpltCallback>
 8001ac6:	bd38      	pop	{r3, r4, r5, pc}

08001ac8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ac8:	b538      	push	{r3, r4, r5, lr}
 8001aca:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001acc:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ace:	6921      	ldr	r1, [r4, #16]
 8001ad0:	68a2      	ldr	r2, [r4, #8]
 8001ad2:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001ad4:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	6961      	ldr	r1, [r4, #20]
 8001ada:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001adc:	4977      	ldr	r1, [pc, #476]	; (8001cbc <UART_SetConfig+0x1f4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ade:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001ae0:	4001      	ands	r1, r0
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ae6:	686a      	ldr	r2, [r5, #4]
 8001ae8:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001aea:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001aec:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001af0:	430a      	orrs	r2, r1
 8001af2:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001af4:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001af6:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001af8:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001afc:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001afe:	430a      	orrs	r2, r1
 8001b00:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b02:	4a6f      	ldr	r2, [pc, #444]	; (8001cc0 <UART_SetConfig+0x1f8>)
 8001b04:	4295      	cmp	r5, r2
 8001b06:	d112      	bne.n	8001b2e <UART_SetConfig+0x66>
 8001b08:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8001b0c:	496d      	ldr	r1, [pc, #436]	; (8001cc4 <UART_SetConfig+0x1fc>)
 8001b0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b10:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b18:	5c8a      	ldrb	r2, [r1, r2]
 8001b1a:	d066      	beq.n	8001bea <UART_SetConfig+0x122>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8001b1c:	2a08      	cmp	r2, #8
 8001b1e:	d819      	bhi.n	8001b54 <UART_SetConfig+0x8c>
 8001b20:	e8df f002 	tbb	[pc, r2]
 8001b24:	189e92c2 	.word	0x189e92c2
 8001b28:	181818a9 	.word	0x181818a9
 8001b2c:	ac          	.byte	0xac
 8001b2d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b2e:	4a66      	ldr	r2, [pc, #408]	; (8001cc8 <UART_SetConfig+0x200>)
 8001b30:	4295      	cmp	r5, r2
 8001b32:	d124      	bne.n	8001b7e <UART_SetConfig+0xb6>
 8001b34:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8001b38:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b3a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8001b3e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001b42:	f000 80a0 	beq.w	8001c86 <UART_SetConfig+0x1be>
 8001b46:	d807      	bhi.n	8001b58 <UART_SetConfig+0x90>
 8001b48:	2a00      	cmp	r2, #0
 8001b4a:	f000 80aa 	beq.w	8001ca2 <UART_SetConfig+0x1da>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b52:	d076      	beq.n	8001c42 <UART_SetConfig+0x17a>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001b54:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8001b56:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b58:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8001b5c:	f000 8099 	beq.w	8001c92 <UART_SetConfig+0x1ca>
 8001b60:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8001b64:	d1f3      	bne.n	8001b4e <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b6a:	d179      	bne.n	8001c60 <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001b6c:	6860      	ldr	r0, [r4, #4]
 8001b6e:	0843      	lsrs	r3, r0, #1
 8001b70:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001b74:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001b78:	fbb3 f3f0 	udiv	r3, r3, r0
 8001b7c:	e054      	b.n	8001c28 <UART_SetConfig+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b7e:	4a53      	ldr	r2, [pc, #332]	; (8001ccc <UART_SetConfig+0x204>)
 8001b80:	4295      	cmp	r5, r2
 8001b82:	d10e      	bne.n	8001ba2 <UART_SetConfig+0xda>
 8001b84:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8001b88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b8a:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8001b8e:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8001b92:	d078      	beq.n	8001c86 <UART_SetConfig+0x1be>
 8001b94:	d9d8      	bls.n	8001b48 <UART_SetConfig+0x80>
 8001b96:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8001b9a:	d07a      	beq.n	8001c92 <UART_SetConfig+0x1ca>
 8001b9c:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8001ba0:	e7e0      	b.n	8001b64 <UART_SetConfig+0x9c>
 8001ba2:	4a4b      	ldr	r2, [pc, #300]	; (8001cd0 <UART_SetConfig+0x208>)
 8001ba4:	4295      	cmp	r5, r2
 8001ba6:	d10e      	bne.n	8001bc6 <UART_SetConfig+0xfe>
 8001ba8:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8001bac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bae:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8001bb2:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001bb6:	d066      	beq.n	8001c86 <UART_SetConfig+0x1be>
 8001bb8:	d9c6      	bls.n	8001b48 <UART_SetConfig+0x80>
 8001bba:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8001bbe:	d068      	beq.n	8001c92 <UART_SetConfig+0x1ca>
 8001bc0:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8001bc4:	e7ce      	b.n	8001b64 <UART_SetConfig+0x9c>
 8001bc6:	4a43      	ldr	r2, [pc, #268]	; (8001cd4 <UART_SetConfig+0x20c>)
 8001bc8:	4295      	cmp	r5, r2
 8001bca:	d1c0      	bne.n	8001b4e <UART_SetConfig+0x86>
 8001bcc:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8001bd0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bd2:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8001bd6:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8001bda:	d054      	beq.n	8001c86 <UART_SetConfig+0x1be>
 8001bdc:	d9b4      	bls.n	8001b48 <UART_SetConfig+0x80>
 8001bde:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8001be2:	d056      	beq.n	8001c92 <UART_SetConfig+0x1ca>
 8001be4:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8001be8:	e7bc      	b.n	8001b64 <UART_SetConfig+0x9c>
    switch (clocksource)
 8001bea:	2a08      	cmp	r2, #8
 8001bec:	d829      	bhi.n	8001c42 <UART_SetConfig+0x17a>
 8001bee:	a301      	add	r3, pc, #4	; (adr r3, 8001bf4 <UART_SetConfig+0x12c>)
 8001bf0:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001bf4:	08001c19 	.word	0x08001c19
 8001bf8:	08001c3d 	.word	0x08001c3d
 8001bfc:	08001b6d 	.word	0x08001b6d
 8001c00:	08001c43 	.word	0x08001c43
 8001c04:	08001c8d 	.word	0x08001c8d
 8001c08:	08001c43 	.word	0x08001c43
 8001c0c:	08001c43 	.word	0x08001c43
 8001c10:	08001c43 	.word	0x08001c43
 8001c14:	08001c99 	.word	0x08001c99
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001c18:	f7ff f90a 	bl	8000e30 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001c1c:	6861      	ldr	r1, [r4, #4]
 8001c1e:	084a      	lsrs	r2, r1, #1
 8001c20:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001c24:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c28:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c2a:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8001c2c:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 8001c30:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001c32:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001c36:	4313      	orrs	r3, r2
 8001c38:	60cb      	str	r3, [r1, #12]
 8001c3a:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001c3c:	f7ff f910 	bl	8000e60 <HAL_RCC_GetPCLK2Freq>
 8001c40:	e7ec      	b.n	8001c1c <UART_SetConfig+0x154>
        ret = HAL_ERROR;
 8001c42:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	e7f1      	b.n	8001c2c <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001c48:	f7ff f90a 	bl	8000e60 <HAL_RCC_GetPCLK2Freq>
 8001c4c:	6863      	ldr	r3, [r4, #4]
 8001c4e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001c52:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c56:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <UART_SetConfig+0x1f8>)
 8001c58:	b280      	uxth	r0, r0
 8001c5a:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c5c:	2000      	movs	r0, #0
        break;
 8001c5e:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001c60:	6862      	ldr	r2, [r4, #4]
 8001c62:	0853      	lsrs	r3, r2, #1
 8001c64:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001c68:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001c6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	60eb      	str	r3, [r5, #12]
 8001c74:	e7f2      	b.n	8001c5c <UART_SetConfig+0x194>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c76:	f7ff f805 	bl	8000c84 <HAL_RCC_GetSysClockFreq>
 8001c7a:	e017      	b.n	8001cac <UART_SetConfig+0x1e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001c7c:	6862      	ldr	r2, [r4, #4]
 8001c7e:	0853      	lsrs	r3, r2, #1
 8001c80:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001c84:	e7f2      	b.n	8001c6c <UART_SetConfig+0x1a4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c8a:	d1f4      	bne.n	8001c76 <UART_SetConfig+0x1ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c8c:	f7fe fffa 	bl	8000c84 <HAL_RCC_GetSysClockFreq>
 8001c90:	e7c4      	b.n	8001c1c <UART_SetConfig+0x154>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c96:	d1f1      	bne.n	8001c7c <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001c98:	6860      	ldr	r0, [r4, #4]
 8001c9a:	0843      	lsrs	r3, r0, #1
 8001c9c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001ca0:	e76a      	b.n	8001b78 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ca6:	d0b7      	beq.n	8001c18 <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001ca8:	f7ff f8c2 	bl	8000e30 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001cac:	6863      	ldr	r3, [r4, #4]
 8001cae:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001cb2:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cb6:	b280      	uxth	r0, r0
 8001cb8:	60e8      	str	r0, [r5, #12]
 8001cba:	e7cf      	b.n	8001c5c <UART_SetConfig+0x194>
 8001cbc:	efff69f3 	.word	0xefff69f3
 8001cc0:	40013800 	.word	0x40013800
 8001cc4:	08003620 	.word	0x08003620
 8001cc8:	40004400 	.word	0x40004400
 8001ccc:	40004800 	.word	0x40004800
 8001cd0:	40004c00 	.word	0x40004c00
 8001cd4:	40005000 	.word	0x40005000

08001cd8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001cd8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001cda:	07da      	lsls	r2, r3, #31
{
 8001cdc:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001cde:	d506      	bpl.n	8001cee <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001ce0:	6801      	ldr	r1, [r0, #0]
 8001ce2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001ce4:	684a      	ldr	r2, [r1, #4]
 8001ce6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001cea:	4322      	orrs	r2, r4
 8001cec:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001cee:	079c      	lsls	r4, r3, #30
 8001cf0:	d506      	bpl.n	8001d00 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001cf2:	6801      	ldr	r1, [r0, #0]
 8001cf4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001cf6:	684a      	ldr	r2, [r1, #4]
 8001cf8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001cfc:	4322      	orrs	r2, r4
 8001cfe:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001d00:	0759      	lsls	r1, r3, #29
 8001d02:	d506      	bpl.n	8001d12 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001d04:	6801      	ldr	r1, [r0, #0]
 8001d06:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001d08:	684a      	ldr	r2, [r1, #4]
 8001d0a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d0e:	4322      	orrs	r2, r4
 8001d10:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001d12:	071a      	lsls	r2, r3, #28
 8001d14:	d506      	bpl.n	8001d24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001d16:	6801      	ldr	r1, [r0, #0]
 8001d18:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001d1a:	684a      	ldr	r2, [r1, #4]
 8001d1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d20:	4322      	orrs	r2, r4
 8001d22:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001d24:	06dc      	lsls	r4, r3, #27
 8001d26:	d506      	bpl.n	8001d36 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001d28:	6801      	ldr	r1, [r0, #0]
 8001d2a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001d2c:	688a      	ldr	r2, [r1, #8]
 8001d2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d32:	4322      	orrs	r2, r4
 8001d34:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001d36:	0699      	lsls	r1, r3, #26
 8001d38:	d506      	bpl.n	8001d48 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001d3a:	6801      	ldr	r1, [r0, #0]
 8001d3c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001d3e:	688a      	ldr	r2, [r1, #8]
 8001d40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d44:	4322      	orrs	r2, r4
 8001d46:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001d48:	065a      	lsls	r2, r3, #25
 8001d4a:	d50f      	bpl.n	8001d6c <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001d4c:	6801      	ldr	r1, [r0, #0]
 8001d4e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001d50:	684a      	ldr	r2, [r1, #4]
 8001d52:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001d56:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001d58:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001d5c:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001d5e:	d105      	bne.n	8001d6c <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001d60:	684a      	ldr	r2, [r1, #4]
 8001d62:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001d64:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001d68:	4322      	orrs	r2, r4
 8001d6a:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001d6c:	061b      	lsls	r3, r3, #24
 8001d6e:	d506      	bpl.n	8001d7e <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001d70:	6802      	ldr	r2, [r0, #0]
 8001d72:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001d74:	6853      	ldr	r3, [r2, #4]
 8001d76:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001d7a:	430b      	orrs	r3, r1
 8001d7c:	6053      	str	r3, [r2, #4]
 8001d7e:	bd10      	pop	{r4, pc}

08001d80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d84:	9d06      	ldr	r5, [sp, #24]
 8001d86:	4604      	mov	r4, r0
 8001d88:	460f      	mov	r7, r1
 8001d8a:	4616      	mov	r6, r2
 8001d8c:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d8e:	6821      	ldr	r1, [r4, #0]
 8001d90:	69ca      	ldr	r2, [r1, #28]
 8001d92:	ea37 0302 	bics.w	r3, r7, r2
 8001d96:	bf0c      	ite	eq
 8001d98:	2201      	moveq	r2, #1
 8001d9a:	2200      	movne	r2, #0
 8001d9c:	42b2      	cmp	r2, r6
 8001d9e:	d002      	beq.n	8001da6 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001da0:	2000      	movs	r0, #0
}
 8001da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001da6:	1c6b      	adds	r3, r5, #1
 8001da8:	d0f2      	beq.n	8001d90 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001daa:	b99d      	cbnz	r5, 8001dd4 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001dac:	6823      	ldr	r3, [r4, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001db4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	f022 0201 	bic.w	r2, r2, #1
 8001dbc:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001dbe:	2320      	movs	r3, #32
 8001dc0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001dc4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8001dce:	2003      	movs	r0, #3
 8001dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001dd4:	f7fe fa96 	bl	8000304 <HAL_GetTick>
 8001dd8:	eba0 0008 	sub.w	r0, r0, r8
 8001ddc:	4285      	cmp	r5, r0
 8001dde:	d2d6      	bcs.n	8001d8e <UART_WaitOnFlagUntilTimeout+0xe>
 8001de0:	e7e4      	b.n	8001dac <UART_WaitOnFlagUntilTimeout+0x2c>

08001de2 <HAL_UART_Transmit>:
{
 8001de2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001de6:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001de8:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001dec:	2b20      	cmp	r3, #32
{
 8001dee:	4604      	mov	r4, r0
 8001df0:	460d      	mov	r5, r1
 8001df2:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001df4:	d14c      	bne.n	8001e90 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8001df6:	2900      	cmp	r1, #0
 8001df8:	d048      	beq.n	8001e8c <HAL_UART_Transmit+0xaa>
 8001dfa:	2a00      	cmp	r2, #0
 8001dfc:	d046      	beq.n	8001e8c <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8001dfe:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d044      	beq.n	8001e90 <HAL_UART_Transmit+0xae>
 8001e06:	2301      	movs	r3, #1
 8001e08:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e10:	2321      	movs	r3, #33	; 0x21
 8001e12:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8001e16:	f7fe fa75 	bl	8000304 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001e1a:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8001e1e:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001e20:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8001e24:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001e28:	b292      	uxth	r2, r2
 8001e2a:	b962      	cbnz	r2, 8001e46 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e2c:	9700      	str	r7, [sp, #0]
 8001e2e:	4633      	mov	r3, r6
 8001e30:	2140      	movs	r1, #64	; 0x40
 8001e32:	4620      	mov	r0, r4
 8001e34:	f7ff ffa4 	bl	8001d80 <UART_WaitOnFlagUntilTimeout>
 8001e38:	b998      	cbnz	r0, 8001e62 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8001e3a:	2320      	movs	r3, #32
 8001e3c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8001e40:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 8001e44:	e00e      	b.n	8001e64 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8001e46:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e4a:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e54:	2200      	movs	r2, #0
 8001e56:	4633      	mov	r3, r6
 8001e58:	2180      	movs	r1, #128	; 0x80
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	f7ff ff90 	bl	8001d80 <UART_WaitOnFlagUntilTimeout>
 8001e60:	b118      	cbz	r0, 8001e6a <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8001e62:	2003      	movs	r0, #3
}
 8001e64:	b002      	add	sp, #8
 8001e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e6a:	68a3      	ldr	r3, [r4, #8]
 8001e6c:	6822      	ldr	r2, [r4, #0]
 8001e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e72:	d107      	bne.n	8001e84 <HAL_UART_Transmit+0xa2>
 8001e74:	6923      	ldr	r3, [r4, #16]
 8001e76:	b92b      	cbnz	r3, 8001e84 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001e78:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001e7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e80:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8001e82:	e7cf      	b.n	8001e24 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001e84:	782b      	ldrb	r3, [r5, #0]
 8001e86:	8513      	strh	r3, [r2, #40]	; 0x28
 8001e88:	3501      	adds	r5, #1
 8001e8a:	e7cb      	b.n	8001e24 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	e7e9      	b.n	8001e64 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8001e90:	2002      	movs	r0, #2
 8001e92:	e7e7      	b.n	8001e64 <HAL_UART_Transmit+0x82>

08001e94 <UART_CheckIdleState>:
{
 8001e94:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e96:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e98:	2600      	movs	r6, #0
 8001e9a:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001e9c:	f7fe fa32 	bl	8000304 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001ea0:	6823      	ldr	r3, [r4, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001ea6:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001ea8:	d417      	bmi.n	8001eda <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001eaa:	6823      	ldr	r3, [r4, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	075b      	lsls	r3, r3, #29
 8001eb0:	d50a      	bpl.n	8001ec8 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001eb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	462b      	mov	r3, r5
 8001ebc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001ec0:	4620      	mov	r0, r4
 8001ec2:	f7ff ff5d 	bl	8001d80 <UART_WaitOnFlagUntilTimeout>
 8001ec6:	b9a0      	cbnz	r0, 8001ef2 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8001ec8:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001eca:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001ecc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001ed0:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8001ed4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8001ed8:	e00c      	b.n	8001ef4 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001eda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	4632      	mov	r2, r6
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001ee8:	4620      	mov	r0, r4
 8001eea:	f7ff ff49 	bl	8001d80 <UART_WaitOnFlagUntilTimeout>
 8001eee:	2800      	cmp	r0, #0
 8001ef0:	d0db      	beq.n	8001eaa <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001ef2:	2003      	movs	r0, #3
}
 8001ef4:	b002      	add	sp, #8
 8001ef6:	bd70      	pop	{r4, r5, r6, pc}

08001ef8 <HAL_UART_Init>:
{
 8001ef8:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001efa:	4604      	mov	r4, r0
 8001efc:	b360      	cbz	r0, 8001f58 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001efe:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001f02:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f06:	b91b      	cbnz	r3, 8001f10 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001f08:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001f0c:	f000 faf2 	bl	80024f4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001f10:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001f12:	2324      	movs	r3, #36	; 0x24
 8001f14:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001f18:	6813      	ldr	r3, [r2, #0]
 8001f1a:	f023 0301 	bic.w	r3, r3, #1
 8001f1e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f20:	4620      	mov	r0, r4
 8001f22:	f7ff fdd1 	bl	8001ac8 <UART_SetConfig>
 8001f26:	2801      	cmp	r0, #1
 8001f28:	d016      	beq.n	8001f58 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f2c:	b113      	cbz	r3, 8001f34 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001f2e:	4620      	mov	r0, r4
 8001f30:	f7ff fed2 	bl	8001cd8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f34:	6823      	ldr	r3, [r4, #0]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f3c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f44:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001f4c:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001f4e:	601a      	str	r2, [r3, #0]
}
 8001f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001f54:	f7ff bf9e 	b.w	8001e94 <UART_CheckIdleState>
}
 8001f58:	2001      	movs	r0, #1
 8001f5a:	bd10      	pop	{r4, pc}

08001f5c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001f5c:	b530      	push	{r4, r5, lr}
 8001f5e:	b0a7      	sub	sp, #156	; 0x9c
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001f60:	2228      	movs	r2, #40	; 0x28
 8001f62:	2100      	movs	r1, #0
 8001f64:	a806      	add	r0, sp, #24
 8001f66:	f000 fbdb 	bl	8002720 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001f6a:	2214      	movs	r2, #20
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	a801      	add	r0, sp, #4
 8001f70:	f000 fbd6 	bl	8002720 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001f74:	2258      	movs	r2, #88	; 0x58
 8001f76:	2100      	movs	r1, #0
 8001f78:	a810      	add	r0, sp, #64	; 0x40
 8001f7a:	f000 fbd1 	bl	8002720 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f7e:	2301      	movs	r3, #1
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f80:	2502      	movs	r5, #2
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f82:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001f84:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f86:	2310      	movs	r3, #16
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f88:	2400      	movs	r4, #0
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f8a:	930a      	str	r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f8c:	9506      	str	r5, [sp, #24]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001f8e:	f7fe fbf7 	bl	8000780 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001f92:	230f      	movs	r3, #15
 8001f94:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001f96:	4621      	mov	r1, r4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f98:	f44f 6380 	mov.w	r3, #1024	; 0x400
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001f9c:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f9e:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001fa0:	9402      	str	r4, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fa2:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fa4:	9405      	str	r4, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001fa6:	f7fe fe99 	bl	8000cdc <HAL_RCC_ClockConfig>
		Error_Handler();
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001faa:	a810      	add	r0, sp, #64	; 0x40
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001fac:	9510      	str	r5, [sp, #64]	; 0x40
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001fae:	9413      	str	r4, [sp, #76]	; 0x4c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001fb0:	f7fe ff6e 	bl	8000e90 <HAL_RCCEx_PeriphCLKConfig>
		Error_Handler();
	}
}
 8001fb4:	b027      	add	sp, #156	; 0x9c
 8001fb6:	bd30      	pop	{r4, r5, pc}

08001fb8 <__io_putchar>:

}

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE {
 8001fb8:	b507      	push	{r0, r1, r2, lr}
 8001fba:	a902      	add	r1, sp, #8
	HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8001fbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
PUTCHAR_PROTOTYPE {
 8001fc0:	f841 0d04 	str.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	4803      	ldr	r0, [pc, #12]	; (8001fd4 <__io_putchar+0x1c>)
 8001fc8:	f7ff ff0b 	bl	8001de2 <HAL_UART_Transmit>
	return ch;
}
 8001fcc:	9801      	ldr	r0, [sp, #4]
 8001fce:	b003      	add	sp, #12
 8001fd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fd4:	20000310 	.word	0x20000310

08001fd8 <readUInt>:
	return readBuffer[index];
}

uint32_t readUInt(uint8_t index) {
	uint32_t result = 0;
	result = readBuffer[index];
 8001fd8:	4a06      	ldr	r2, [pc, #24]	; (8001ff4 <readUInt+0x1c>)
 8001fda:	5c11      	ldrb	r1, [r2, r0]
	result += readBuffer[index + 1] << 8;
 8001fdc:	4410      	add	r0, r2
	result += readBuffer[index + 2] << 16;
 8001fde:	7883      	ldrb	r3, [r0, #2]
	result += readBuffer[index + 1] << 8;
 8001fe0:	7842      	ldrb	r2, [r0, #1]
	result += readBuffer[index + 3] << 24;
 8001fe2:	78c0      	ldrb	r0, [r0, #3]
	result += readBuffer[index + 2] << 16;
 8001fe4:	041b      	lsls	r3, r3, #16
 8001fe6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001fea:	440b      	add	r3, r1

	return result;
}
 8001fec:	eb03 6000 	add.w	r0, r3, r0, lsl #24
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	200001a8 	.word	0x200001a8

08001ff8 <prepareWriteBuffer>:

void prepareWriteBuffer(UkpMessages messageType, uint8_t payloadLength) {
	writeBuffer[0] = 0x22;
 8001ff8:	4b07      	ldr	r3, [pc, #28]	; (8002018 <prepareWriteBuffer+0x20>)
 8001ffa:	2222      	movs	r2, #34	; 0x22
 8001ffc:	701a      	strb	r2, [r3, #0]
	writeBuffer[1] = 0x33;
 8001ffe:	2233      	movs	r2, #51	; 0x33
 8002000:	705a      	strb	r2, [r3, #1]
	writeBuffer[2] = messageType;
	writeBuffer[3] = payloadLength;
 8002002:	70d9      	strb	r1, [r3, #3]
	writeBuffer[2] = messageType;
 8002004:	7098      	strb	r0, [r3, #2]

	for (int i = UKP_HEADER_LENGTH; i < BUFFER_SIZE; i++) {
 8002006:	2204      	movs	r2, #4
		writeBuffer[i] = 0;
 8002008:	2100      	movs	r1, #0
 800200a:	5499      	strb	r1, [r3, r2]
	for (int i = UKP_HEADER_LENGTH; i < BUFFER_SIZE; i++) {
 800200c:	3201      	adds	r2, #1
 800200e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002012:	d1fa      	bne.n	800200a <prepareWriteBuffer+0x12>
	}
}
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	200000a8 	.word	0x200000a8

0800201c <clearCurrentReadBuffer>:

void clearCurrentReadBuffer() {
	for (int i = 0; i < BUFFER_SIZE; i++) {
 800201c:	2300      	movs	r3, #0
		readBuffer[i] = 0;
 800201e:	4a04      	ldr	r2, [pc, #16]	; (8002030 <clearCurrentReadBuffer+0x14>)
 8002020:	4619      	mov	r1, r3
 8002022:	5499      	strb	r1, [r3, r2]
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8002024:	3301      	adds	r3, #1
 8002026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800202a:	d1fa      	bne.n	8002022 <clearCurrentReadBuffer+0x6>
	}
}
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	200001a8 	.word	0x200001a8

08002034 <restartDma>:

HAL_StatusTypeDef restartDma(uint16_t size, bool transmit) {
 8002034:	b573      	push	{r0, r1, r4, r5, r6, lr}
	//HAL_SPI_DMAStop(&hspi1);
	HAL_SPI_Abort(&hspi1);
 8002036:	4c0e      	ldr	r4, [pc, #56]	; (8002070 <restartDma+0x3c>)
HAL_StatusTypeDef restartDma(uint16_t size, bool transmit) {
 8002038:	4605      	mov	r5, r0
	HAL_SPI_Abort(&hspi1);
 800203a:	4620      	mov	r0, r4
HAL_StatusTypeDef restartDma(uint16_t size, bool transmit) {
 800203c:	460e      	mov	r6, r1
	HAL_SPI_Abort(&hspi1);
 800203e:	f7ff fbd5 	bl	80017ec <HAL_SPI_Abort>
    __HAL_SPI_CLEAR_OVRFLAG(&hspi1);
 8002042:	2300      	movs	r3, #0
 8002044:	9301      	str	r3, [sp, #4]
 8002046:	6823      	ldr	r3, [r4, #0]
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	9201      	str	r2, [sp, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	9301      	str	r3, [sp, #4]
 8002050:	9b01      	ldr	r3, [sp, #4]

	if(transmit){
 8002052:	b136      	cbz	r6, 8002062 <restartDma+0x2e>
		return HAL_SPI_Transmit_DMA(&hspi1, writeBuffer, size);
 8002054:	462a      	mov	r2, r5
 8002056:	4907      	ldr	r1, [pc, #28]	; (8002074 <restartDma+0x40>)
 8002058:	4620      	mov	r0, r4
 800205a:	f7ff f9e7 	bl	800142c <HAL_SPI_Transmit_DMA>

	}
	else{
		return HAL_SPI_Receive_DMA(&hspi1, readBuffer, BUFFER_SIZE);
	}
}
 800205e:	b002      	add	sp, #8
 8002060:	bd70      	pop	{r4, r5, r6, pc}
		return HAL_SPI_Receive_DMA(&hspi1, readBuffer, BUFFER_SIZE);
 8002062:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002066:	4904      	ldr	r1, [pc, #16]	; (8002078 <restartDma+0x44>)
 8002068:	4620      	mov	r0, r4
 800206a:	f7ff fb27 	bl	80016bc <HAL_SPI_Receive_DMA>
 800206e:	e7f6      	b.n	800205e <restartDma+0x2a>
 8002070:	200002ac 	.word	0x200002ac
 8002074:	200000a8 	.word	0x200000a8
 8002078:	200001a8 	.word	0x200001a8

0800207c <HAL_GPIO_EXTI_Callback>:
		clearCurrentReadBuffer();
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	if (GPIO_Pin == SPI_CS_Pin) {
 800207c:	2810      	cmp	r0, #16
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800207e:	b508      	push	{r3, lr}
 8002080:	4601      	mov	r1, r0
	if (GPIO_Pin == SPI_CS_Pin) {
 8002082:	d122      	bne.n	80020ca <HAL_GPIO_EXTI_Callback+0x4e>
		GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOA, SPI_CS_Pin);
 8002084:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002088:	f7fe fb5e 	bl	8000748 <HAL_GPIO_ReadPin>
		if (pinState == GPIO_PIN_SET) {
 800208c:	2801      	cmp	r0, #1
 800208e:	d10f      	bne.n	80020b0 <HAL_GPIO_EXTI_Callback+0x34>
		    SET_BIT(SPI1->CR1, SPI_CR1_SSI);
 8002090:	4a10      	ldr	r2, [pc, #64]	; (80020d4 <HAL_GPIO_EXTI_Callback+0x58>)
 8002092:	6813      	ldr	r3, [r2, #0]
 8002094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002098:	6013      	str	r3, [r2, #0]
			if (state == RECIEVE_DMA_RUNNING) {
 800209a:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <HAL_GPIO_EXTI_Callback+0x5c>)
 800209c:	781a      	ldrb	r2, [r3, #0]
 800209e:	2a05      	cmp	r2, #5
 80020a0:	d102      	bne.n	80020a8 <HAL_GPIO_EXTI_Callback+0x2c>
				state = RECIEVE_DMA_COMPLETE;
 80020a2:	2202      	movs	r2, #2
			} else if (state == TRANSMIT_RUNNING) {
				state = IDLE;
 80020a4:	701a      	strb	r2, [r3, #0]
 80020a6:	bd08      	pop	{r3, pc}
			} else if (state == TRANSMIT_RUNNING) {
 80020a8:	2a03      	cmp	r2, #3
 80020aa:	d10e      	bne.n	80020ca <HAL_GPIO_EXTI_Callback+0x4e>
				state = IDLE;
 80020ac:	2200      	movs	r2, #0
 80020ae:	e7f9      	b.n	80020a4 <HAL_GPIO_EXTI_Callback+0x28>
			}

		} else if (pinState == GPIO_PIN_RESET) {
 80020b0:	b958      	cbnz	r0, 80020ca <HAL_GPIO_EXTI_Callback+0x4e>

			if (state == READY_TO_TRANSMIT) {
 80020b2:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80020b4:	781a      	ldrb	r2, [r3, #0]
 80020b6:	2a05      	cmp	r2, #5
 80020b8:	d108      	bne.n	80020cc <HAL_GPIO_EXTI_Callback+0x50>
				state = TRANSMIT_RUNNING;
 80020ba:	2203      	movs	r2, #3
			} else if (state == RECIEVE_DMA_WAITING) {
				state = RECIEVE_DMA_RUNNING;
 80020bc:	701a      	strb	r2, [r3, #0]
			}
		    uint16_t sr = READ_REG(SPI1->SR);
 80020be:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <HAL_GPIO_EXTI_Callback+0x58>)
 80020c0:	689a      	ldr	r2, [r3, #8]
		    CLEAR_BIT(SPI1->CR1, SPI_CR1_SSI);
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	bd08      	pop	{r3, pc}
			} else if (state == RECIEVE_DMA_WAITING) {
 80020cc:	2a01      	cmp	r2, #1
 80020ce:	d1f6      	bne.n	80020be <HAL_GPIO_EXTI_Callback+0x42>
				state = RECIEVE_DMA_RUNNING;
 80020d0:	2205      	movs	r2, #5
 80020d2:	e7f3      	b.n	80020bc <HAL_GPIO_EXTI_Callback+0x40>
 80020d4:	40013000 	.word	0x40013000
 80020d8:	200002a8 	.word	0x200002a8

080020dc <hcp_crc24q>:
		}
	}
}
uint32_t hcp_crc24q(unsigned char *buff, int len) {
 80020dc:	b570      	push	{r4, r5, r6, lr}
	uint32_t crc = 0;
	for (int i = 0; i < len; i++) {
		crc = ((crc << 8) & 0xFFFFFF) ^ tbl_CRC24Q[(crc >> 16) ^ buff[i]];
 80020de:	4e09      	ldr	r6, [pc, #36]	; (8002104 <hcp_crc24q+0x28>)
	for (int i = 0; i < len; i++) {
 80020e0:	4602      	mov	r2, r0
	uint32_t crc = 0;
 80020e2:	2300      	movs	r3, #0
	for (int i = 0; i < len; i++) {
 80020e4:	1a14      	subs	r4, r2, r0
 80020e6:	42a1      	cmp	r1, r4
 80020e8:	dc01      	bgt.n	80020ee <hcp_crc24q+0x12>
	}
	return crc;
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	bd70      	pop	{r4, r5, r6, pc}
		crc = ((crc << 8) & 0xFFFFFF) ^ tbl_CRC24Q[(crc >> 16) ^ buff[i]];
 80020ee:	f812 5b01 	ldrb.w	r5, [r2], #1
 80020f2:	021c      	lsls	r4, r3, #8
 80020f4:	ea85 4313 	eor.w	r3, r5, r3, lsr #16
 80020f8:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 80020fc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8002100:	4063      	eors	r3, r4
 8002102:	e7ef      	b.n	80020e4 <hcp_crc24q+0x8>
 8002104:	08003684 	.word	0x08003684

08002108 <sendReply>:
void sendReply(uint8_t payloadLength) {
 8002108:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint32_t crc = hcp_crc24q(writeBuffer, UKP_HEADER_LENGTH + payloadLength);
 800210a:	4c12      	ldr	r4, [pc, #72]	; (8002154 <sendReply+0x4c>)
 800210c:	1d06      	adds	r6, r0, #4
void sendReply(uint8_t payloadLength) {
 800210e:	4605      	mov	r5, r0
	uint32_t crc = hcp_crc24q(writeBuffer, UKP_HEADER_LENGTH + payloadLength);
 8002110:	4631      	mov	r1, r6
 8002112:	4620      	mov	r0, r4
 8002114:	f7ff ffe2 	bl	80020dc <hcp_crc24q>
		writeBuffer[UKP_HEADER_LENGTH + payloadLength + i] = p[3 - i];
 8002118:	0e03      	lsrs	r3, r0, #24
 800211a:	55a3      	strb	r3, [r4, r6]
 800211c:	442c      	add	r4, r5
 800211e:	f3c0 4307 	ubfx	r3, r0, #16, #8
	uint32_t crc = hcp_crc24q(writeBuffer, UKP_HEADER_LENGTH + payloadLength);
 8002122:	9001      	str	r0, [sp, #4]
		writeBuffer[UKP_HEADER_LENGTH + payloadLength + i] = p[3 - i];
 8002124:	7163      	strb	r3, [r4, #5]
 8002126:	71e0      	strb	r0, [r4, #7]
 8002128:	f3c0 2307 	ubfx	r3, r0, #8, #8
	HAL_StatusTypeDef status = restartDma(
 800212c:	2101      	movs	r1, #1
 800212e:	f105 0008 	add.w	r0, r5, #8
		writeBuffer[UKP_HEADER_LENGTH + payloadLength + i] = p[3 - i];
 8002132:	71a3      	strb	r3, [r4, #6]
	HAL_StatusTypeDef status = restartDma(
 8002134:	f7ff ff7e 	bl	8002034 <restartDma>
 8002138:	4b07      	ldr	r3, [pc, #28]	; (8002158 <sendReply+0x50>)
	if (status == 0) {
 800213a:	b938      	cbnz	r0, 800214c <sendReply+0x44>
		state = READY_TO_TRANSMIT;
 800213c:	2205      	movs	r2, #5
 800213e:	701a      	strb	r2, [r3, #0]
		replyCount++;
 8002140:	4a06      	ldr	r2, [pc, #24]	; (800215c <sendReply+0x54>)
 8002142:	6813      	ldr	r3, [r2, #0]
 8002144:	3301      	adds	r3, #1
 8002146:	6013      	str	r3, [r2, #0]
}
 8002148:	b002      	add	sp, #8
 800214a:	bd70      	pop	{r4, r5, r6, pc}
		state = ERROR_R;
 800214c:	2204      	movs	r2, #4
 800214e:	701a      	strb	r2, [r3, #0]
}
 8002150:	e7fa      	b.n	8002148 <sendReply+0x40>
 8002152:	bf00      	nop
 8002154:	200000a8 	.word	0x200000a8
 8002158:	200002a8 	.word	0x200002a8
 800215c:	20000094 	.word	0x20000094

08002160 <sendAckReply>:
void sendAckReply() {
 8002160:	b508      	push	{r3, lr}
	prepareWriteBuffer(ACK_NAK, 1);
 8002162:	2012      	movs	r0, #18
 8002164:	2101      	movs	r1, #1
 8002166:	f7ff ff47 	bl	8001ff8 <prepareWriteBuffer>
	writeBuffer[4] = 1;
 800216a:	4b03      	ldr	r3, [pc, #12]	; (8002178 <sendAckReply+0x18>)
 800216c:	2001      	movs	r0, #1
 800216e:	7118      	strb	r0, [r3, #4]
}
 8002170:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sendReply(1);
 8002174:	f7ff bfc8 	b.w	8002108 <sendReply>
 8002178:	200000a8 	.word	0x200000a8

0800217c <sendNakReply>:
void sendNakReply() {
 800217c:	b508      	push	{r3, lr}
	prepareWriteBuffer(ACK_NAK, 1);
 800217e:	2012      	movs	r0, #18
 8002180:	2101      	movs	r1, #1
 8002182:	f7ff ff39 	bl	8001ff8 <prepareWriteBuffer>
	writeBuffer[4] = 0;
 8002186:	4b04      	ldr	r3, [pc, #16]	; (8002198 <sendNakReply+0x1c>)
 8002188:	2200      	movs	r2, #0
 800218a:	711a      	strb	r2, [r3, #4]
	sendReply(1);
 800218c:	2001      	movs	r0, #1
}
 800218e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sendReply(1);
 8002192:	f7ff bfb9 	b.w	8002108 <sendReply>
 8002196:	bf00      	nop
 8002198:	200000a8 	.word	0x200000a8

0800219c <loop>:
void loop() {
 800219c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (state == IDLE) {
 800219e:	4d29      	ldr	r5, [pc, #164]	; (8002244 <loop+0xa8>)
 80021a0:	7829      	ldrb	r1, [r5, #0]
 80021a2:	462c      	mov	r4, r5
 80021a4:	b941      	cbnz	r1, 80021b8 <loop+0x1c>
		HAL_StatusTypeDef status = restartDma(BUFFER_SIZE, false);
 80021a6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80021aa:	f7ff ff43 	bl	8002034 <restartDma>
		if (status == 0) {
 80021ae:	2800      	cmp	r0, #0
 80021b0:	d147      	bne.n	8002242 <loop+0xa6>
			state = RECIEVE_DMA_WAITING;
 80021b2:	2301      	movs	r3, #1
			state = IDLE;
 80021b4:	702b      	strb	r3, [r5, #0]
 80021b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (state == RECIEVE_DMA_COMPLETE) {
 80021b8:	2902      	cmp	r1, #2
 80021ba:	d142      	bne.n	8002242 <loop+0xa6>
		if (readBuffer[index] != 0x22 || readBuffer[index + 1] != 0x33) {
 80021bc:	4e22      	ldr	r6, [pc, #136]	; (8002248 <loop+0xac>)
        HAL_SPI_Abort(&hspi1);
 80021be:	4823      	ldr	r0, [pc, #140]	; (800224c <loop+0xb0>)
 80021c0:	f7ff fb14 	bl	80017ec <HAL_SPI_Abort>
		if (readBuffer[index] != 0x22 || readBuffer[index + 1] != 0x33) {
 80021c4:	7833      	ldrb	r3, [r6, #0]
 80021c6:	2b22      	cmp	r3, #34	; 0x22
 80021c8:	d102      	bne.n	80021d0 <loop+0x34>
 80021ca:	7873      	ldrb	r3, [r6, #1]
 80021cc:	2b33      	cmp	r3, #51	; 0x33
 80021ce:	d008      	beq.n	80021e2 <loop+0x46>
			errorCount++;
 80021d0:	4a1f      	ldr	r2, [pc, #124]	; (8002250 <loop+0xb4>)
 80021d2:	6813      	ldr	r3, [r2, #0]
 80021d4:	3301      	adds	r3, #1
 80021d6:	6013      	str	r3, [r2, #0]
			clearCurrentReadBuffer();
 80021d8:	f7ff ff20 	bl	800201c <clearCurrentReadBuffer>
			state = IDLE;
 80021dc:	2300      	movs	r3, #0
 80021de:	7023      	strb	r3, [r4, #0]
			return;
 80021e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint8_t crcOffset = UKP_HEADER_LENGTH + length;
 80021e2:	78f4      	ldrb	r4, [r6, #3]
 80021e4:	3404      	adds	r4, #4
 80021e6:	b2e4      	uxtb	r4, r4
		uint32_t calculatedCrc = hcp_crc24q(readBuffer, crcOffset);
 80021e8:	4621      	mov	r1, r4
 80021ea:	4630      	mov	r0, r6
 80021ec:	f7ff ff76 	bl	80020dc <hcp_crc24q>
 80021f0:	4607      	mov	r7, r0
		uint32_t recievedCrc = readUInt(crcOffset);
 80021f2:	4620      	mov	r0, r4
 80021f4:	f7ff fef0 	bl	8001fd8 <readUInt>
		if (calculatedCrc != recievedCrc) {
 80021f8:	4287      	cmp	r7, r0
		uint32_t recievedCrc = readUInt(crcOffset);
 80021fa:	4604      	mov	r4, r0
		if (calculatedCrc != recievedCrc) {
 80021fc:	d011      	beq.n	8002222 <loop+0x86>
			printf("CRC ERROR: ");
 80021fe:	4815      	ldr	r0, [pc, #84]	; (8002254 <loop+0xb8>)
 8002200:	f000 fa96 	bl	8002730 <iprintf>
			printf("Recieved 0x%x but calculated 0x%x\r\n", recievedCrc,
 8002204:	463a      	mov	r2, r7
 8002206:	4621      	mov	r1, r4
 8002208:	4813      	ldr	r0, [pc, #76]	; (8002258 <loop+0xbc>)
 800220a:	f000 fa91 	bl	8002730 <iprintf>
			sendNakReply();
 800220e:	f7ff ffb5 	bl	800217c <sendNakReply>
			errorCount++;
 8002212:	4a0f      	ldr	r2, [pc, #60]	; (8002250 <loop+0xb4>)
 8002214:	6813      	ldr	r3, [r2, #0]
 8002216:	3301      	adds	r3, #1
 8002218:	6013      	str	r3, [r2, #0]
			clearCurrentReadBuffer();
 800221a:	f7ff feff 	bl	800201c <clearCurrentReadBuffer>
			state = IDLE;
 800221e:	2300      	movs	r3, #0
 8002220:	e7c8      	b.n	80021b4 <loop+0x18>
		switch (currentPacketType) {
 8002222:	78b3      	ldrb	r3, [r6, #2]
 8002224:	2b16      	cmp	r3, #22
 8002226:	d109      	bne.n	800223c <loop+0xa0>
			sendAckReply();
 8002228:	f7ff ff9a 	bl	8002160 <sendAckReply>
		packetCount++;
 800222c:	4a0b      	ldr	r2, [pc, #44]	; (800225c <loop+0xc0>)
 800222e:	6813      	ldr	r3, [r2, #0]
 8002230:	3301      	adds	r3, #1
 8002232:	6013      	str	r3, [r2, #0]
}
 8002234:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		clearCurrentReadBuffer();
 8002238:	f7ff bef0 	b.w	800201c <clearCurrentReadBuffer>
			state = IDLE;
 800223c:	2300      	movs	r3, #0
 800223e:	702b      	strb	r3, [r5, #0]
 8002240:	e7f4      	b.n	800222c <loop+0x90>
 8002242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002244:	200002a8 	.word	0x200002a8
 8002248:	200001a8 	.word	0x200001a8
 800224c:	200002ac 	.word	0x200002ac
 8002250:	2000008c 	.word	0x2000008c
 8002254:	08003624 	.word	0x08003624
 8002258:	08003630 	.word	0x08003630
 800225c:	20000090 	.word	0x20000090

08002260 <main>:
int main(void) {
 8002260:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_RCC_GPIOF_CLK_ENABLE()
 8002262:	4d57      	ldr	r5, [pc, #348]	; (80023c0 <main+0x160>)
int main(void) {
 8002264:	b089      	sub	sp, #36	; 0x24
	HAL_Init();
 8002266:	f7fe f82f 	bl	80002c8 <HAL_Init>
	SystemClock_Config();
 800226a:	f7ff fe77 	bl	8001f5c <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800226e:	2214      	movs	r2, #20
 8002270:	2100      	movs	r1, #0
 8002272:	a803      	add	r0, sp, #12
 8002274:	f000 fa54 	bl	8002720 <memset>
	__HAL_RCC_GPIOF_CLK_ENABLE()
 8002278:	696b      	ldr	r3, [r5, #20]
	HAL_GPIO_WritePin(DBG_PIN_GPIO_Port, DBG_PIN_Pin, GPIO_PIN_RESET);
 800227a:	4852      	ldr	r0, [pc, #328]	; (80023c4 <main+0x164>)
	__HAL_RCC_GPIOF_CLK_ENABLE()
 800227c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002280:	616b      	str	r3, [r5, #20]
 8002282:	696b      	ldr	r3, [r5, #20]
 8002284:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	9b00      	ldr	r3, [sp, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800228c:	696b      	ldr	r3, [r5, #20]
 800228e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002292:	616b      	str	r3, [r5, #20]
 8002294:	696b      	ldr	r3, [r5, #20]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	9301      	str	r3, [sp, #4]
 800229c:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 800229e:	696b      	ldr	r3, [r5, #20]
 80022a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a4:	616b      	str	r3, [r5, #20]
 80022a6:	696b      	ldr	r3, [r5, #20]
 80022a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
	HAL_GPIO_WritePin(DBG_PIN_GPIO_Port, DBG_PIN_Pin, GPIO_PIN_RESET);
 80022ac:	2200      	movs	r2, #0
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80022ae:	9302      	str	r3, [sp, #8]
	HAL_GPIO_WritePin(DBG_PIN_GPIO_Port, DBG_PIN_Pin, GPIO_PIN_RESET);
 80022b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80022b4:	9b02      	ldr	r3, [sp, #8]
	HAL_GPIO_WritePin(DBG_PIN_GPIO_Port, DBG_PIN_Pin, GPIO_PIN_RESET);
 80022b6:	f7fe fa4d 	bl	8000754 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = SPI_CS_Pin;
 80022ba:	2310      	movs	r3, #16
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2400      	movs	r4, #0
	GPIO_InitStruct.Pin = SPI_CS_Pin;
 80022be:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80022c0:	a903      	add	r1, sp, #12
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80022c2:	4b41      	ldr	r3, [pc, #260]	; (80023c8 <main+0x168>)
 80022c4:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80022c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	9405      	str	r4, [sp, #20]
	HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80022cc:	f7fe f96c 	bl	80005a8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = DBG_PIN_Pin;
 80022d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022d4:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(DBG_PIN_GPIO_Port, &GPIO_InitStruct);
 80022d6:	a903      	add	r1, sp, #12
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d8:	2301      	movs	r3, #1
	HAL_GPIO_Init(DBG_PIN_GPIO_Port, &GPIO_InitStruct);
 80022da:	483a      	ldr	r0, [pc, #232]	; (80023c4 <main+0x164>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022dc:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e0:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(DBG_PIN_GPIO_Port, &GPIO_InitStruct);
 80022e2:	f7fe f961 	bl	80005a8 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80022e6:	4622      	mov	r2, r4
 80022e8:	4621      	mov	r1, r4
 80022ea:	200a      	movs	r0, #10
 80022ec:	f7fe f822 	bl	8000334 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80022f0:	200a      	movs	r0, #10
 80022f2:	f7fe f853 	bl	800039c <HAL_NVIC_EnableIRQ>
	__HAL_RCC_DMA1_CLK_ENABLE()
 80022f6:	696b      	ldr	r3, [r5, #20]
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	616b      	str	r3, [r5, #20]
 80022fe:	696b      	ldr	r3, [r5, #20]
 8002300:	f003 0301 	and.w	r3, r3, #1
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002304:	4622      	mov	r2, r4
 8002306:	4621      	mov	r1, r4
	__HAL_RCC_DMA1_CLK_ENABLE()
 8002308:	9303      	str	r3, [sp, #12]
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800230a:	200c      	movs	r0, #12
	__HAL_RCC_DMA1_CLK_ENABLE()
 800230c:	9b03      	ldr	r3, [sp, #12]
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800230e:	f7fe f811 	bl	8000334 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002312:	200c      	movs	r0, #12
 8002314:	f7fe f842 	bl	800039c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002318:	4621      	mov	r1, r4
 800231a:	4622      	mov	r2, r4
 800231c:	200d      	movs	r0, #13
 800231e:	f7fe f809 	bl	8000334 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002322:	200d      	movs	r0, #13
 8002324:	f7fe f83a 	bl	800039c <HAL_NVIC_EnableIRQ>
	hspi1.Instance = SPI1;
 8002328:	4828      	ldr	r0, [pc, #160]	; (80023cc <main+0x16c>)
 800232a:	4b29      	ldr	r3, [pc, #164]	; (80023d0 <main+0x170>)
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800232c:	6084      	str	r4, [r0, #8]
	hspi1.Init.Mode = SPI_MODE_SLAVE;
 800232e:	e880 0018 	stmia.w	r0, {r3, r4}
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002332:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002336:	60c3      	str	r3, [r0, #12]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002338:	f44f 7300 	mov.w	r3, #512	; 0x200
 800233c:	6183      	str	r3, [r0, #24]
	hspi1.Init.CRCPolynomial = 7;
 800233e:	2307      	movs	r3, #7
 8002340:	62c3      	str	r3, [r0, #44]	; 0x2c
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002342:	6104      	str	r4, [r0, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002344:	6144      	str	r4, [r0, #20]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002346:	6204      	str	r4, [r0, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002348:	6244      	str	r4, [r0, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800234a:	6284      	str	r4, [r0, #40]	; 0x28
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800234c:	6304      	str	r4, [r0, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800234e:	6344      	str	r4, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002350:	f7ff f817 	bl	8001382 <HAL_SPI_Init>
	huart2.Instance = USART2;
 8002354:	481f      	ldr	r0, [pc, #124]	; (80023d4 <main+0x174>)
	huart2.Init.BaudRate = 115200;
 8002356:	4a20      	ldr	r2, [pc, #128]	; (80023d8 <main+0x178>)
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002358:	6084      	str	r4, [r0, #8]
	huart2.Init.BaudRate = 115200;
 800235a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800235e:	e880 000c 	stmia.w	r0, {r2, r3}
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002362:	230c      	movs	r3, #12
 8002364:	6143      	str	r3, [r0, #20]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002366:	60c4      	str	r4, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002368:	6104      	str	r4, [r0, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800236a:	6184      	str	r4, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800236c:	61c4      	str	r4, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800236e:	6204      	str	r4, [r0, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002370:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002372:	f7ff fdc1 	bl	8001ef8 <HAL_UART_Init>
	state = IDLE;
 8002376:	4b19      	ldr	r3, [pc, #100]	; (80023dc <main+0x17c>)
		readBuffer[i] = 0;
 8002378:	4919      	ldr	r1, [pc, #100]	; (80023e0 <main+0x180>)
		writeBuffer[i] = 0;
 800237a:	4a1a      	ldr	r2, [pc, #104]	; (80023e4 <main+0x184>)
	state = IDLE;
 800237c:	701c      	strb	r4, [r3, #0]
		readBuffer[i] = 0;
 800237e:	4623      	mov	r3, r4
 8002380:	5463      	strb	r3, [r4, r1]
		writeBuffer[i] = 0;
 8002382:	54a3      	strb	r3, [r4, r2]
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8002384:	3401      	adds	r4, #1
 8002386:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 800238a:	d1f9      	bne.n	8002380 <main+0x120>
	printf("Init finished\r\n");
 800238c:	4816      	ldr	r0, [pc, #88]	; (80023e8 <main+0x188>)
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800238e:	4f0d      	ldr	r7, [pc, #52]	; (80023c4 <main+0x164>)
	        printf("Message Stats P %d\tE %d\tR %d\r\n", packetCount, errorCount, replyCount);
 8002390:	4e16      	ldr	r6, [pc, #88]	; (80023ec <main+0x18c>)
 8002392:	4d17      	ldr	r5, [pc, #92]	; (80023f0 <main+0x190>)
	printf("Init finished\r\n");
 8002394:	f000 fa40 	bl	8002818 <puts>
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8002398:	f24c 3450 	movw	r4, #50000	; 0xc350
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800239c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023a0:	4638      	mov	r0, r7
 80023a2:	f7fe f9dc 	bl	800075e <HAL_GPIO_TogglePin>
		loop();
 80023a6:	f7ff fef9 	bl	800219c <loop>
	    if (ctr == 50000)
 80023aa:	3c01      	subs	r4, #1
 80023ac:	d1f6      	bne.n	800239c <main+0x13c>
	        printf("Message Stats P %d\tE %d\tR %d\r\n", packetCount, errorCount, replyCount);
 80023ae:	4911      	ldr	r1, [pc, #68]	; (80023f4 <main+0x194>)
 80023b0:	6833      	ldr	r3, [r6, #0]
 80023b2:	682a      	ldr	r2, [r5, #0]
 80023b4:	6809      	ldr	r1, [r1, #0]
 80023b6:	4810      	ldr	r0, [pc, #64]	; (80023f8 <main+0x198>)
 80023b8:	f000 f9ba 	bl	8002730 <iprintf>
 80023bc:	e7ec      	b.n	8002398 <main+0x138>
 80023be:	bf00      	nop
 80023c0:	40021000 	.word	0x40021000
 80023c4:	48000400 	.word	0x48000400
 80023c8:	10310000 	.word	0x10310000
 80023cc:	200002ac 	.word	0x200002ac
 80023d0:	40013000 	.word	0x40013000
 80023d4:	20000310 	.word	0x20000310
 80023d8:	40004400 	.word	0x40004400
 80023dc:	200002a8 	.word	0x200002a8
 80023e0:	200001a8 	.word	0x200001a8
 80023e4:	200000a8 	.word	0x200000a8
 80023e8:	08003654 	.word	0x08003654
 80023ec:	20000094 	.word	0x20000094
 80023f0:	2000008c 	.word	0x2000008c
 80023f4:	20000090 	.word	0x20000090
 80023f8:	08003663 	.word	0x08003663

080023fc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80023fc:	4770      	bx	lr
	...

08002400 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002400:	4b0a      	ldr	r3, [pc, #40]	; (800242c <HAL_MspInit+0x2c>)
 8002402:	699a      	ldr	r2, [r3, #24]
 8002404:	f042 0201 	orr.w	r2, r2, #1
 8002408:	619a      	str	r2, [r3, #24]
 800240a:	699a      	ldr	r2, [r3, #24]
{
 800240c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240e:	f002 0201 	and.w	r2, r2, #1
 8002412:	9200      	str	r2, [sp, #0]
 8002414:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002416:	69da      	ldr	r2, [r3, #28]
 8002418:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800241c:	61da      	str	r2, [r3, #28]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002428:	b002      	add	sp, #8
 800242a:	4770      	bx	lr
 800242c:	40021000 	.word	0x40021000

08002430 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002430:	b530      	push	{r4, r5, lr}
 8002432:	4605      	mov	r5, r0
 8002434:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002436:	2214      	movs	r2, #20
 8002438:	2100      	movs	r1, #0
 800243a:	a803      	add	r0, sp, #12
 800243c:	f000 f970 	bl	8002720 <memset>
  if(hspi->Instance==SPI1)
 8002440:	682a      	ldr	r2, [r5, #0]
 8002442:	4b27      	ldr	r3, [pc, #156]	; (80024e0 <HAL_SPI_MspInit+0xb0>)
 8002444:	429a      	cmp	r2, r3
 8002446:	d149      	bne.n	80024dc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002448:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 800244c:	4c25      	ldr	r4, [pc, #148]	; (80024e4 <HAL_SPI_MspInit+0xb4>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800244e:	699a      	ldr	r2, [r3, #24]
 8002450:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002454:	619a      	str	r2, [r3, #24]
 8002456:	699a      	ldr	r2, [r3, #24]
 8002458:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800245c:	9201      	str	r2, [sp, #4]
 800245e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002460:	695a      	ldr	r2, [r3, #20]
 8002462:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002466:	615a      	str	r2, [r3, #20]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246e:	9302      	str	r3, [sp, #8]
 8002470:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002472:	23e0      	movs	r3, #224	; 0xe0
 8002474:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002476:	2302      	movs	r3, #2
 8002478:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800247a:	2303      	movs	r3, #3
 800247c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800247e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002482:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002484:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002486:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002488:	f7fe f88e 	bl	80005a8 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Channel2;
 800248c:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <HAL_SPI_MspInit+0xb8>)
 800248e:	6023      	str	r3, [r4, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002490:	2280      	movs	r2, #128	; 0x80
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002492:	2300      	movs	r3, #0
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002494:	4620      	mov	r0, r4
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002496:	6063      	str	r3, [r4, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002498:	60a3      	str	r3, [r4, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800249a:	60e2      	str	r2, [r4, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800249c:	6123      	str	r3, [r4, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800249e:	6163      	str	r3, [r4, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80024a0:	61a3      	str	r3, [r4, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024a2:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80024a4:	f7fd ffbe 	bl	8000424 <HAL_DMA_Init>
 80024a8:	b108      	cbz	r0, 80024ae <HAL_SPI_MspInit+0x7e>
    {
      Error_Handler();
 80024aa:	f7ff ffa7 	bl	80023fc <Error_Handler>

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024ae:	4a0f      	ldr	r2, [pc, #60]	; (80024ec <HAL_SPI_MspInit+0xbc>)
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80024b0:	65ac      	str	r4, [r5, #88]	; 0x58
 80024b2:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80024b4:	4c0e      	ldr	r4, [pc, #56]	; (80024f0 <HAL_SPI_MspInit+0xc0>)
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024b6:	2310      	movs	r3, #16
 80024b8:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80024bc:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024be:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024c0:	2280      	movs	r2, #128	; 0x80
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024c2:	60a3      	str	r3, [r4, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024c4:	60e2      	str	r2, [r4, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024c6:	6123      	str	r3, [r4, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024c8:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80024ca:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024cc:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80024ce:	f7fd ffa9 	bl	8000424 <HAL_DMA_Init>
 80024d2:	b108      	cbz	r0, 80024d8 <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 80024d4:	f7ff ff92 	bl	80023fc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80024d8:	656c      	str	r4, [r5, #84]	; 0x54
 80024da:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80024dc:	b009      	add	sp, #36	; 0x24
 80024de:	bd30      	pop	{r4, r5, pc}
 80024e0:	40013000 	.word	0x40013000
 80024e4:	20000380 	.word	0x20000380
 80024e8:	4002001c 	.word	0x4002001c
 80024ec:	40020030 	.word	0x40020030
 80024f0:	200003c4 	.word	0x200003c4

080024f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024f4:	b510      	push	{r4, lr}
 80024f6:	4604      	mov	r4, r0
 80024f8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fa:	2214      	movs	r2, #20
 80024fc:	2100      	movs	r1, #0
 80024fe:	a803      	add	r0, sp, #12
 8002500:	f000 f90e 	bl	8002720 <memset>
  if(huart->Instance==USART2)
 8002504:	6822      	ldr	r2, [r4, #0]
 8002506:	4b13      	ldr	r3, [pc, #76]	; (8002554 <HAL_UART_MspInit+0x60>)
 8002508:	429a      	cmp	r2, r3
 800250a:	d120      	bne.n	800254e <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800250c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002510:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8002512:	69da      	ldr	r2, [r3, #28]
 8002514:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002518:	61da      	str	r2, [r3, #28]
 800251a:	69da      	ldr	r2, [r3, #28]
 800251c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002520:	9201      	str	r2, [sp, #4]
 8002522:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002524:	695a      	ldr	r2, [r3, #20]
 8002526:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800252a:	615a      	str	r2, [r3, #20]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002532:	9302      	str	r3, [sp, #8]
 8002534:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002536:	230c      	movs	r3, #12
 8002538:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253a:	2302      	movs	r3, #2
 800253c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800253e:	2303      	movs	r3, #3
 8002540:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002546:	2307      	movs	r3, #7
 8002548:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254a:	f7fe f82d 	bl	80005a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800254e:	b008      	add	sp, #32
 8002550:	bd10      	pop	{r4, pc}
 8002552:	bf00      	nop
 8002554:	40004400 	.word	0x40004400

08002558 <NMI_Handler>:
 8002558:	4770      	bx	lr

0800255a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800255a:	e7fe      	b.n	800255a <HardFault_Handler>

0800255c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800255c:	e7fe      	b.n	800255c <MemManage_Handler>

0800255e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800255e:	e7fe      	b.n	800255e <BusFault_Handler>

08002560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002560:	e7fe      	b.n	8002560 <UsageFault_Handler>

08002562 <SVC_Handler>:
 8002562:	4770      	bx	lr

08002564 <DebugMon_Handler>:
 8002564:	4770      	bx	lr

08002566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002566:	4770      	bx	lr

08002568 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002568:	f7fd bec0 	b.w	80002ec <HAL_IncTick>

0800256c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800256c:	2010      	movs	r0, #16
 800256e:	f7fe b8fb 	b.w	8000768 <HAL_GPIO_EXTI_IRQHandler>
	...

08002574 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002574:	4801      	ldr	r0, [pc, #4]	; (800257c <DMA1_Channel2_IRQHandler+0x8>)
 8002576:	f7fd bfcf 	b.w	8000518 <HAL_DMA_IRQHandler>
 800257a:	bf00      	nop
 800257c:	20000380 	.word	0x20000380

08002580 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002580:	4801      	ldr	r0, [pc, #4]	; (8002588 <DMA1_Channel3_IRQHandler+0x8>)
 8002582:	f7fd bfc9 	b.w	8000518 <HAL_DMA_IRQHandler>
 8002586:	bf00      	nop
 8002588:	200003c4 	.word	0x200003c4

0800258c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800258c:	b570      	push	{r4, r5, r6, lr}
 800258e:	460e      	mov	r6, r1
 8002590:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002592:	460c      	mov	r4, r1
 8002594:	1ba3      	subs	r3, r4, r6
 8002596:	429d      	cmp	r5, r3
 8002598:	dc01      	bgt.n	800259e <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800259a:	4628      	mov	r0, r5
 800259c:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800259e:	f3af 8000 	nop.w
 80025a2:	f804 0b01 	strb.w	r0, [r4], #1
 80025a6:	e7f5      	b.n	8002594 <_read+0x8>

080025a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025a8:	b570      	push	{r4, r5, r6, lr}
 80025aa:	460e      	mov	r6, r1
 80025ac:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ae:	460c      	mov	r4, r1
 80025b0:	1ba3      	subs	r3, r4, r6
 80025b2:	429d      	cmp	r5, r3
 80025b4:	dc01      	bgt.n	80025ba <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80025b6:	4628      	mov	r0, r5
 80025b8:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80025ba:	f814 0b01 	ldrb.w	r0, [r4], #1
 80025be:	f7ff fcfb 	bl	8001fb8 <__io_putchar>
 80025c2:	e7f5      	b.n	80025b0 <_write+0x8>

080025c4 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80025c4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80025c6:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <_sbrk+0x2c>)
 80025c8:	6819      	ldr	r1, [r3, #0]
{
 80025ca:	4602      	mov	r2, r0
	if (heap_end == 0)
 80025cc:	b909      	cbnz	r1, 80025d2 <_sbrk+0xe>
		heap_end = &end;
 80025ce:	4909      	ldr	r1, [pc, #36]	; (80025f4 <_sbrk+0x30>)
 80025d0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80025d2:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80025d4:	4669      	mov	r1, sp
 80025d6:	4402      	add	r2, r0
 80025d8:	428a      	cmp	r2, r1
 80025da:	d906      	bls.n	80025ea <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80025dc:	f000 f876 	bl	80026cc <__errno>
 80025e0:	230c      	movs	r3, #12
 80025e2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80025e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025e8:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80025ea:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80025ec:	bd08      	pop	{r3, pc}
 80025ee:	bf00      	nop
 80025f0:	20000098 	.word	0x20000098
 80025f4:	2000040c 	.word	0x2000040c

080025f8 <_close>:

int _close(int file)
{
	return -1;
}
 80025f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025fc:	4770      	bx	lr

080025fe <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80025fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002602:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002604:	2000      	movs	r0, #0
 8002606:	4770      	bx	lr

08002608 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002608:	2001      	movs	r0, #1
 800260a:	4770      	bx	lr

0800260c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800260c:	2000      	movs	r0, #0
 800260e:	4770      	bx	lr

08002610 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002610:	4915      	ldr	r1, [pc, #84]	; (8002668 <SystemInit+0x58>)
 8002612:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002616:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800261a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800261e:	4b13      	ldr	r3, [pc, #76]	; (800266c <SystemInit+0x5c>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	f042 0201 	orr.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002628:	6858      	ldr	r0, [r3, #4]
 800262a:	4a11      	ldr	r2, [pc, #68]	; (8002670 <SystemInit+0x60>)
 800262c:	4002      	ands	r2, r0
 800262e:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002636:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800263a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002642:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800264a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800264c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800264e:	f022 020f 	bic.w	r2, r2, #15
 8002652:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002654:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002656:	4a07      	ldr	r2, [pc, #28]	; (8002674 <SystemInit+0x64>)
 8002658:	4002      	ands	r2, r0
 800265a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800265c:	2200      	movs	r2, #0
 800265e:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002660:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002664:	608b      	str	r3, [r1, #8]
 8002666:	4770      	bx	lr
 8002668:	e000ed00 	.word	0xe000ed00
 800266c:	40021000 	.word	0x40021000
 8002670:	f87fc00c 	.word	0xf87fc00c
 8002674:	ff00fccc 	.word	0xff00fccc

08002678 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002678:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026b0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800267c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800267e:	e003      	b.n	8002688 <LoopCopyDataInit>

08002680 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002680:	4b0c      	ldr	r3, [pc, #48]	; (80026b4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002682:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002684:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002686:	3104      	adds	r1, #4

08002688 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002688:	480b      	ldr	r0, [pc, #44]	; (80026b8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800268a:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <LoopForever+0xe>)
	adds	r2, r0, r1
 800268c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800268e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002690:	d3f6      	bcc.n	8002680 <CopyDataInit>
	ldr	r2, =_sbss
 8002692:	4a0b      	ldr	r2, [pc, #44]	; (80026c0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002694:	e002      	b.n	800269c <LoopFillZerobss>

08002696 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002696:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002698:	f842 3b04 	str.w	r3, [r2], #4

0800269c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800269c:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <LoopForever+0x16>)
	cmp	r2, r3
 800269e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80026a0:	d3f9      	bcc.n	8002696 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026a2:	f7ff ffb5 	bl	8002610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026a6:	f000 f817 	bl	80026d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026aa:	f7ff fdd9 	bl	8002260 <main>

080026ae <LoopForever>:

LoopForever:
    b LoopForever
 80026ae:	e7fe      	b.n	80026ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026b0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80026b4:	08003b3c 	.word	0x08003b3c
	ldr	r0, =_sdata
 80026b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80026bc:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80026c0:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80026c4:	2000040c 	.word	0x2000040c

080026c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026c8:	e7fe      	b.n	80026c8 <ADC1_2_IRQHandler>
	...

080026cc <__errno>:
 80026cc:	4b01      	ldr	r3, [pc, #4]	; (80026d4 <__errno+0x8>)
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	2000000c 	.word	0x2000000c

080026d8 <__libc_init_array>:
 80026d8:	b570      	push	{r4, r5, r6, lr}
 80026da:	4e0d      	ldr	r6, [pc, #52]	; (8002710 <__libc_init_array+0x38>)
 80026dc:	4c0d      	ldr	r4, [pc, #52]	; (8002714 <__libc_init_array+0x3c>)
 80026de:	1ba4      	subs	r4, r4, r6
 80026e0:	10a4      	asrs	r4, r4, #2
 80026e2:	2500      	movs	r5, #0
 80026e4:	42a5      	cmp	r5, r4
 80026e6:	d109      	bne.n	80026fc <__libc_init_array+0x24>
 80026e8:	4e0b      	ldr	r6, [pc, #44]	; (8002718 <__libc_init_array+0x40>)
 80026ea:	4c0c      	ldr	r4, [pc, #48]	; (800271c <__libc_init_array+0x44>)
 80026ec:	f000 ff7c 	bl	80035e8 <_init>
 80026f0:	1ba4      	subs	r4, r4, r6
 80026f2:	10a4      	asrs	r4, r4, #2
 80026f4:	2500      	movs	r5, #0
 80026f6:	42a5      	cmp	r5, r4
 80026f8:	d105      	bne.n	8002706 <__libc_init_array+0x2e>
 80026fa:	bd70      	pop	{r4, r5, r6, pc}
 80026fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002700:	4798      	blx	r3
 8002702:	3501      	adds	r5, #1
 8002704:	e7ee      	b.n	80026e4 <__libc_init_array+0xc>
 8002706:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800270a:	4798      	blx	r3
 800270c:	3501      	adds	r5, #1
 800270e:	e7f2      	b.n	80026f6 <__libc_init_array+0x1e>
 8002710:	08003b34 	.word	0x08003b34
 8002714:	08003b34 	.word	0x08003b34
 8002718:	08003b34 	.word	0x08003b34
 800271c:	08003b38 	.word	0x08003b38

08002720 <memset>:
 8002720:	4402      	add	r2, r0
 8002722:	4603      	mov	r3, r0
 8002724:	4293      	cmp	r3, r2
 8002726:	d100      	bne.n	800272a <memset+0xa>
 8002728:	4770      	bx	lr
 800272a:	f803 1b01 	strb.w	r1, [r3], #1
 800272e:	e7f9      	b.n	8002724 <memset+0x4>

08002730 <iprintf>:
 8002730:	b40f      	push	{r0, r1, r2, r3}
 8002732:	4b0a      	ldr	r3, [pc, #40]	; (800275c <iprintf+0x2c>)
 8002734:	b513      	push	{r0, r1, r4, lr}
 8002736:	681c      	ldr	r4, [r3, #0]
 8002738:	b124      	cbz	r4, 8002744 <iprintf+0x14>
 800273a:	69a3      	ldr	r3, [r4, #24]
 800273c:	b913      	cbnz	r3, 8002744 <iprintf+0x14>
 800273e:	4620      	mov	r0, r4
 8002740:	f000 fa24 	bl	8002b8c <__sinit>
 8002744:	ab05      	add	r3, sp, #20
 8002746:	9a04      	ldr	r2, [sp, #16]
 8002748:	68a1      	ldr	r1, [r4, #8]
 800274a:	9301      	str	r3, [sp, #4]
 800274c:	4620      	mov	r0, r4
 800274e:	f000 fbe1 	bl	8002f14 <_vfiprintf_r>
 8002752:	b002      	add	sp, #8
 8002754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002758:	b004      	add	sp, #16
 800275a:	4770      	bx	lr
 800275c:	2000000c 	.word	0x2000000c

08002760 <_puts_r>:
 8002760:	b570      	push	{r4, r5, r6, lr}
 8002762:	460e      	mov	r6, r1
 8002764:	4605      	mov	r5, r0
 8002766:	b118      	cbz	r0, 8002770 <_puts_r+0x10>
 8002768:	6983      	ldr	r3, [r0, #24]
 800276a:	b90b      	cbnz	r3, 8002770 <_puts_r+0x10>
 800276c:	f000 fa0e 	bl	8002b8c <__sinit>
 8002770:	69ab      	ldr	r3, [r5, #24]
 8002772:	68ac      	ldr	r4, [r5, #8]
 8002774:	b913      	cbnz	r3, 800277c <_puts_r+0x1c>
 8002776:	4628      	mov	r0, r5
 8002778:	f000 fa08 	bl	8002b8c <__sinit>
 800277c:	4b23      	ldr	r3, [pc, #140]	; (800280c <_puts_r+0xac>)
 800277e:	429c      	cmp	r4, r3
 8002780:	d117      	bne.n	80027b2 <_puts_r+0x52>
 8002782:	686c      	ldr	r4, [r5, #4]
 8002784:	89a3      	ldrh	r3, [r4, #12]
 8002786:	071b      	lsls	r3, r3, #28
 8002788:	d51d      	bpl.n	80027c6 <_puts_r+0x66>
 800278a:	6923      	ldr	r3, [r4, #16]
 800278c:	b1db      	cbz	r3, 80027c6 <_puts_r+0x66>
 800278e:	3e01      	subs	r6, #1
 8002790:	68a3      	ldr	r3, [r4, #8]
 8002792:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002796:	3b01      	subs	r3, #1
 8002798:	60a3      	str	r3, [r4, #8]
 800279a:	b9e9      	cbnz	r1, 80027d8 <_puts_r+0x78>
 800279c:	2b00      	cmp	r3, #0
 800279e:	da2e      	bge.n	80027fe <_puts_r+0x9e>
 80027a0:	4622      	mov	r2, r4
 80027a2:	210a      	movs	r1, #10
 80027a4:	4628      	mov	r0, r5
 80027a6:	f000 f83f 	bl	8002828 <__swbuf_r>
 80027aa:	3001      	adds	r0, #1
 80027ac:	d011      	beq.n	80027d2 <_puts_r+0x72>
 80027ae:	200a      	movs	r0, #10
 80027b0:	bd70      	pop	{r4, r5, r6, pc}
 80027b2:	4b17      	ldr	r3, [pc, #92]	; (8002810 <_puts_r+0xb0>)
 80027b4:	429c      	cmp	r4, r3
 80027b6:	d101      	bne.n	80027bc <_puts_r+0x5c>
 80027b8:	68ac      	ldr	r4, [r5, #8]
 80027ba:	e7e3      	b.n	8002784 <_puts_r+0x24>
 80027bc:	4b15      	ldr	r3, [pc, #84]	; (8002814 <_puts_r+0xb4>)
 80027be:	429c      	cmp	r4, r3
 80027c0:	bf08      	it	eq
 80027c2:	68ec      	ldreq	r4, [r5, #12]
 80027c4:	e7de      	b.n	8002784 <_puts_r+0x24>
 80027c6:	4621      	mov	r1, r4
 80027c8:	4628      	mov	r0, r5
 80027ca:	f000 f87f 	bl	80028cc <__swsetup_r>
 80027ce:	2800      	cmp	r0, #0
 80027d0:	d0dd      	beq.n	800278e <_puts_r+0x2e>
 80027d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027d6:	bd70      	pop	{r4, r5, r6, pc}
 80027d8:	2b00      	cmp	r3, #0
 80027da:	da04      	bge.n	80027e6 <_puts_r+0x86>
 80027dc:	69a2      	ldr	r2, [r4, #24]
 80027de:	4293      	cmp	r3, r2
 80027e0:	db06      	blt.n	80027f0 <_puts_r+0x90>
 80027e2:	290a      	cmp	r1, #10
 80027e4:	d004      	beq.n	80027f0 <_puts_r+0x90>
 80027e6:	6823      	ldr	r3, [r4, #0]
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	6022      	str	r2, [r4, #0]
 80027ec:	7019      	strb	r1, [r3, #0]
 80027ee:	e7cf      	b.n	8002790 <_puts_r+0x30>
 80027f0:	4622      	mov	r2, r4
 80027f2:	4628      	mov	r0, r5
 80027f4:	f000 f818 	bl	8002828 <__swbuf_r>
 80027f8:	3001      	adds	r0, #1
 80027fa:	d1c9      	bne.n	8002790 <_puts_r+0x30>
 80027fc:	e7e9      	b.n	80027d2 <_puts_r+0x72>
 80027fe:	6823      	ldr	r3, [r4, #0]
 8002800:	200a      	movs	r0, #10
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	6022      	str	r2, [r4, #0]
 8002806:	7018      	strb	r0, [r3, #0]
 8002808:	bd70      	pop	{r4, r5, r6, pc}
 800280a:	bf00      	nop
 800280c:	08003ac0 	.word	0x08003ac0
 8002810:	08003ae0 	.word	0x08003ae0
 8002814:	08003aa0 	.word	0x08003aa0

08002818 <puts>:
 8002818:	4b02      	ldr	r3, [pc, #8]	; (8002824 <puts+0xc>)
 800281a:	4601      	mov	r1, r0
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	f7ff bf9f 	b.w	8002760 <_puts_r>
 8002822:	bf00      	nop
 8002824:	2000000c 	.word	0x2000000c

08002828 <__swbuf_r>:
 8002828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800282a:	460e      	mov	r6, r1
 800282c:	4614      	mov	r4, r2
 800282e:	4605      	mov	r5, r0
 8002830:	b118      	cbz	r0, 800283a <__swbuf_r+0x12>
 8002832:	6983      	ldr	r3, [r0, #24]
 8002834:	b90b      	cbnz	r3, 800283a <__swbuf_r+0x12>
 8002836:	f000 f9a9 	bl	8002b8c <__sinit>
 800283a:	4b21      	ldr	r3, [pc, #132]	; (80028c0 <__swbuf_r+0x98>)
 800283c:	429c      	cmp	r4, r3
 800283e:	d12a      	bne.n	8002896 <__swbuf_r+0x6e>
 8002840:	686c      	ldr	r4, [r5, #4]
 8002842:	69a3      	ldr	r3, [r4, #24]
 8002844:	60a3      	str	r3, [r4, #8]
 8002846:	89a3      	ldrh	r3, [r4, #12]
 8002848:	071a      	lsls	r2, r3, #28
 800284a:	d52e      	bpl.n	80028aa <__swbuf_r+0x82>
 800284c:	6923      	ldr	r3, [r4, #16]
 800284e:	b363      	cbz	r3, 80028aa <__swbuf_r+0x82>
 8002850:	6923      	ldr	r3, [r4, #16]
 8002852:	6820      	ldr	r0, [r4, #0]
 8002854:	1ac0      	subs	r0, r0, r3
 8002856:	6963      	ldr	r3, [r4, #20]
 8002858:	b2f6      	uxtb	r6, r6
 800285a:	4298      	cmp	r0, r3
 800285c:	4637      	mov	r7, r6
 800285e:	db04      	blt.n	800286a <__swbuf_r+0x42>
 8002860:	4621      	mov	r1, r4
 8002862:	4628      	mov	r0, r5
 8002864:	f000 f928 	bl	8002ab8 <_fflush_r>
 8002868:	bb28      	cbnz	r0, 80028b6 <__swbuf_r+0x8e>
 800286a:	68a3      	ldr	r3, [r4, #8]
 800286c:	3b01      	subs	r3, #1
 800286e:	60a3      	str	r3, [r4, #8]
 8002870:	6823      	ldr	r3, [r4, #0]
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	6022      	str	r2, [r4, #0]
 8002876:	701e      	strb	r6, [r3, #0]
 8002878:	6963      	ldr	r3, [r4, #20]
 800287a:	3001      	adds	r0, #1
 800287c:	4298      	cmp	r0, r3
 800287e:	d004      	beq.n	800288a <__swbuf_r+0x62>
 8002880:	89a3      	ldrh	r3, [r4, #12]
 8002882:	07db      	lsls	r3, r3, #31
 8002884:	d519      	bpl.n	80028ba <__swbuf_r+0x92>
 8002886:	2e0a      	cmp	r6, #10
 8002888:	d117      	bne.n	80028ba <__swbuf_r+0x92>
 800288a:	4621      	mov	r1, r4
 800288c:	4628      	mov	r0, r5
 800288e:	f000 f913 	bl	8002ab8 <_fflush_r>
 8002892:	b190      	cbz	r0, 80028ba <__swbuf_r+0x92>
 8002894:	e00f      	b.n	80028b6 <__swbuf_r+0x8e>
 8002896:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <__swbuf_r+0x9c>)
 8002898:	429c      	cmp	r4, r3
 800289a:	d101      	bne.n	80028a0 <__swbuf_r+0x78>
 800289c:	68ac      	ldr	r4, [r5, #8]
 800289e:	e7d0      	b.n	8002842 <__swbuf_r+0x1a>
 80028a0:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <__swbuf_r+0xa0>)
 80028a2:	429c      	cmp	r4, r3
 80028a4:	bf08      	it	eq
 80028a6:	68ec      	ldreq	r4, [r5, #12]
 80028a8:	e7cb      	b.n	8002842 <__swbuf_r+0x1a>
 80028aa:	4621      	mov	r1, r4
 80028ac:	4628      	mov	r0, r5
 80028ae:	f000 f80d 	bl	80028cc <__swsetup_r>
 80028b2:	2800      	cmp	r0, #0
 80028b4:	d0cc      	beq.n	8002850 <__swbuf_r+0x28>
 80028b6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80028ba:	4638      	mov	r0, r7
 80028bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028be:	bf00      	nop
 80028c0:	08003ac0 	.word	0x08003ac0
 80028c4:	08003ae0 	.word	0x08003ae0
 80028c8:	08003aa0 	.word	0x08003aa0

080028cc <__swsetup_r>:
 80028cc:	4b32      	ldr	r3, [pc, #200]	; (8002998 <__swsetup_r+0xcc>)
 80028ce:	b570      	push	{r4, r5, r6, lr}
 80028d0:	681d      	ldr	r5, [r3, #0]
 80028d2:	4606      	mov	r6, r0
 80028d4:	460c      	mov	r4, r1
 80028d6:	b125      	cbz	r5, 80028e2 <__swsetup_r+0x16>
 80028d8:	69ab      	ldr	r3, [r5, #24]
 80028da:	b913      	cbnz	r3, 80028e2 <__swsetup_r+0x16>
 80028dc:	4628      	mov	r0, r5
 80028de:	f000 f955 	bl	8002b8c <__sinit>
 80028e2:	4b2e      	ldr	r3, [pc, #184]	; (800299c <__swsetup_r+0xd0>)
 80028e4:	429c      	cmp	r4, r3
 80028e6:	d10f      	bne.n	8002908 <__swsetup_r+0x3c>
 80028e8:	686c      	ldr	r4, [r5, #4]
 80028ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	0715      	lsls	r5, r2, #28
 80028f2:	d42c      	bmi.n	800294e <__swsetup_r+0x82>
 80028f4:	06d0      	lsls	r0, r2, #27
 80028f6:	d411      	bmi.n	800291c <__swsetup_r+0x50>
 80028f8:	2209      	movs	r2, #9
 80028fa:	6032      	str	r2, [r6, #0]
 80028fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002900:	81a3      	strh	r3, [r4, #12]
 8002902:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002906:	bd70      	pop	{r4, r5, r6, pc}
 8002908:	4b25      	ldr	r3, [pc, #148]	; (80029a0 <__swsetup_r+0xd4>)
 800290a:	429c      	cmp	r4, r3
 800290c:	d101      	bne.n	8002912 <__swsetup_r+0x46>
 800290e:	68ac      	ldr	r4, [r5, #8]
 8002910:	e7eb      	b.n	80028ea <__swsetup_r+0x1e>
 8002912:	4b24      	ldr	r3, [pc, #144]	; (80029a4 <__swsetup_r+0xd8>)
 8002914:	429c      	cmp	r4, r3
 8002916:	bf08      	it	eq
 8002918:	68ec      	ldreq	r4, [r5, #12]
 800291a:	e7e6      	b.n	80028ea <__swsetup_r+0x1e>
 800291c:	0751      	lsls	r1, r2, #29
 800291e:	d512      	bpl.n	8002946 <__swsetup_r+0x7a>
 8002920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002922:	b141      	cbz	r1, 8002936 <__swsetup_r+0x6a>
 8002924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002928:	4299      	cmp	r1, r3
 800292a:	d002      	beq.n	8002932 <__swsetup_r+0x66>
 800292c:	4630      	mov	r0, r6
 800292e:	f000 fa1b 	bl	8002d68 <_free_r>
 8002932:	2300      	movs	r3, #0
 8002934:	6363      	str	r3, [r4, #52]	; 0x34
 8002936:	89a3      	ldrh	r3, [r4, #12]
 8002938:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800293c:	81a3      	strh	r3, [r4, #12]
 800293e:	2300      	movs	r3, #0
 8002940:	6063      	str	r3, [r4, #4]
 8002942:	6923      	ldr	r3, [r4, #16]
 8002944:	6023      	str	r3, [r4, #0]
 8002946:	89a3      	ldrh	r3, [r4, #12]
 8002948:	f043 0308 	orr.w	r3, r3, #8
 800294c:	81a3      	strh	r3, [r4, #12]
 800294e:	6923      	ldr	r3, [r4, #16]
 8002950:	b94b      	cbnz	r3, 8002966 <__swsetup_r+0x9a>
 8002952:	89a3      	ldrh	r3, [r4, #12]
 8002954:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800295c:	d003      	beq.n	8002966 <__swsetup_r+0x9a>
 800295e:	4621      	mov	r1, r4
 8002960:	4630      	mov	r0, r6
 8002962:	f000 f9c1 	bl	8002ce8 <__smakebuf_r>
 8002966:	89a2      	ldrh	r2, [r4, #12]
 8002968:	f012 0301 	ands.w	r3, r2, #1
 800296c:	d00c      	beq.n	8002988 <__swsetup_r+0xbc>
 800296e:	2300      	movs	r3, #0
 8002970:	60a3      	str	r3, [r4, #8]
 8002972:	6963      	ldr	r3, [r4, #20]
 8002974:	425b      	negs	r3, r3
 8002976:	61a3      	str	r3, [r4, #24]
 8002978:	6923      	ldr	r3, [r4, #16]
 800297a:	b953      	cbnz	r3, 8002992 <__swsetup_r+0xc6>
 800297c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002980:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002984:	d1ba      	bne.n	80028fc <__swsetup_r+0x30>
 8002986:	bd70      	pop	{r4, r5, r6, pc}
 8002988:	0792      	lsls	r2, r2, #30
 800298a:	bf58      	it	pl
 800298c:	6963      	ldrpl	r3, [r4, #20]
 800298e:	60a3      	str	r3, [r4, #8]
 8002990:	e7f2      	b.n	8002978 <__swsetup_r+0xac>
 8002992:	2000      	movs	r0, #0
 8002994:	e7f7      	b.n	8002986 <__swsetup_r+0xba>
 8002996:	bf00      	nop
 8002998:	2000000c 	.word	0x2000000c
 800299c:	08003ac0 	.word	0x08003ac0
 80029a0:	08003ae0 	.word	0x08003ae0
 80029a4:	08003aa0 	.word	0x08003aa0

080029a8 <__sflush_r>:
 80029a8:	898a      	ldrh	r2, [r1, #12]
 80029aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029ae:	4605      	mov	r5, r0
 80029b0:	0710      	lsls	r0, r2, #28
 80029b2:	460c      	mov	r4, r1
 80029b4:	d45a      	bmi.n	8002a6c <__sflush_r+0xc4>
 80029b6:	684b      	ldr	r3, [r1, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	dc05      	bgt.n	80029c8 <__sflush_r+0x20>
 80029bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80029be:	2b00      	cmp	r3, #0
 80029c0:	dc02      	bgt.n	80029c8 <__sflush_r+0x20>
 80029c2:	2000      	movs	r0, #0
 80029c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80029ca:	2e00      	cmp	r6, #0
 80029cc:	d0f9      	beq.n	80029c2 <__sflush_r+0x1a>
 80029ce:	2300      	movs	r3, #0
 80029d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80029d4:	682f      	ldr	r7, [r5, #0]
 80029d6:	602b      	str	r3, [r5, #0]
 80029d8:	d033      	beq.n	8002a42 <__sflush_r+0x9a>
 80029da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80029dc:	89a3      	ldrh	r3, [r4, #12]
 80029de:	075a      	lsls	r2, r3, #29
 80029e0:	d505      	bpl.n	80029ee <__sflush_r+0x46>
 80029e2:	6863      	ldr	r3, [r4, #4]
 80029e4:	1ac0      	subs	r0, r0, r3
 80029e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80029e8:	b10b      	cbz	r3, 80029ee <__sflush_r+0x46>
 80029ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029ec:	1ac0      	subs	r0, r0, r3
 80029ee:	2300      	movs	r3, #0
 80029f0:	4602      	mov	r2, r0
 80029f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80029f4:	6a21      	ldr	r1, [r4, #32]
 80029f6:	4628      	mov	r0, r5
 80029f8:	47b0      	blx	r6
 80029fa:	1c43      	adds	r3, r0, #1
 80029fc:	89a3      	ldrh	r3, [r4, #12]
 80029fe:	d106      	bne.n	8002a0e <__sflush_r+0x66>
 8002a00:	6829      	ldr	r1, [r5, #0]
 8002a02:	291d      	cmp	r1, #29
 8002a04:	d84b      	bhi.n	8002a9e <__sflush_r+0xf6>
 8002a06:	4a2b      	ldr	r2, [pc, #172]	; (8002ab4 <__sflush_r+0x10c>)
 8002a08:	40ca      	lsrs	r2, r1
 8002a0a:	07d6      	lsls	r6, r2, #31
 8002a0c:	d547      	bpl.n	8002a9e <__sflush_r+0xf6>
 8002a0e:	2200      	movs	r2, #0
 8002a10:	6062      	str	r2, [r4, #4]
 8002a12:	04d9      	lsls	r1, r3, #19
 8002a14:	6922      	ldr	r2, [r4, #16]
 8002a16:	6022      	str	r2, [r4, #0]
 8002a18:	d504      	bpl.n	8002a24 <__sflush_r+0x7c>
 8002a1a:	1c42      	adds	r2, r0, #1
 8002a1c:	d101      	bne.n	8002a22 <__sflush_r+0x7a>
 8002a1e:	682b      	ldr	r3, [r5, #0]
 8002a20:	b903      	cbnz	r3, 8002a24 <__sflush_r+0x7c>
 8002a22:	6560      	str	r0, [r4, #84]	; 0x54
 8002a24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a26:	602f      	str	r7, [r5, #0]
 8002a28:	2900      	cmp	r1, #0
 8002a2a:	d0ca      	beq.n	80029c2 <__sflush_r+0x1a>
 8002a2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a30:	4299      	cmp	r1, r3
 8002a32:	d002      	beq.n	8002a3a <__sflush_r+0x92>
 8002a34:	4628      	mov	r0, r5
 8002a36:	f000 f997 	bl	8002d68 <_free_r>
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	6360      	str	r0, [r4, #52]	; 0x34
 8002a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a42:	6a21      	ldr	r1, [r4, #32]
 8002a44:	2301      	movs	r3, #1
 8002a46:	4628      	mov	r0, r5
 8002a48:	47b0      	blx	r6
 8002a4a:	1c41      	adds	r1, r0, #1
 8002a4c:	d1c6      	bne.n	80029dc <__sflush_r+0x34>
 8002a4e:	682b      	ldr	r3, [r5, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0c3      	beq.n	80029dc <__sflush_r+0x34>
 8002a54:	2b1d      	cmp	r3, #29
 8002a56:	d001      	beq.n	8002a5c <__sflush_r+0xb4>
 8002a58:	2b16      	cmp	r3, #22
 8002a5a:	d101      	bne.n	8002a60 <__sflush_r+0xb8>
 8002a5c:	602f      	str	r7, [r5, #0]
 8002a5e:	e7b0      	b.n	80029c2 <__sflush_r+0x1a>
 8002a60:	89a3      	ldrh	r3, [r4, #12]
 8002a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a66:	81a3      	strh	r3, [r4, #12]
 8002a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a6c:	690f      	ldr	r7, [r1, #16]
 8002a6e:	2f00      	cmp	r7, #0
 8002a70:	d0a7      	beq.n	80029c2 <__sflush_r+0x1a>
 8002a72:	0793      	lsls	r3, r2, #30
 8002a74:	680e      	ldr	r6, [r1, #0]
 8002a76:	bf08      	it	eq
 8002a78:	694b      	ldreq	r3, [r1, #20]
 8002a7a:	600f      	str	r7, [r1, #0]
 8002a7c:	bf18      	it	ne
 8002a7e:	2300      	movne	r3, #0
 8002a80:	eba6 0807 	sub.w	r8, r6, r7
 8002a84:	608b      	str	r3, [r1, #8]
 8002a86:	f1b8 0f00 	cmp.w	r8, #0
 8002a8a:	dd9a      	ble.n	80029c2 <__sflush_r+0x1a>
 8002a8c:	4643      	mov	r3, r8
 8002a8e:	463a      	mov	r2, r7
 8002a90:	6a21      	ldr	r1, [r4, #32]
 8002a92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002a94:	4628      	mov	r0, r5
 8002a96:	47b0      	blx	r6
 8002a98:	2800      	cmp	r0, #0
 8002a9a:	dc07      	bgt.n	8002aac <__sflush_r+0x104>
 8002a9c:	89a3      	ldrh	r3, [r4, #12]
 8002a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aa2:	81a3      	strh	r3, [r4, #12]
 8002aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002aac:	4407      	add	r7, r0
 8002aae:	eba8 0800 	sub.w	r8, r8, r0
 8002ab2:	e7e8      	b.n	8002a86 <__sflush_r+0xde>
 8002ab4:	20400001 	.word	0x20400001

08002ab8 <_fflush_r>:
 8002ab8:	b538      	push	{r3, r4, r5, lr}
 8002aba:	690b      	ldr	r3, [r1, #16]
 8002abc:	4605      	mov	r5, r0
 8002abe:	460c      	mov	r4, r1
 8002ac0:	b1db      	cbz	r3, 8002afa <_fflush_r+0x42>
 8002ac2:	b118      	cbz	r0, 8002acc <_fflush_r+0x14>
 8002ac4:	6983      	ldr	r3, [r0, #24]
 8002ac6:	b90b      	cbnz	r3, 8002acc <_fflush_r+0x14>
 8002ac8:	f000 f860 	bl	8002b8c <__sinit>
 8002acc:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <_fflush_r+0x48>)
 8002ace:	429c      	cmp	r4, r3
 8002ad0:	d109      	bne.n	8002ae6 <_fflush_r+0x2e>
 8002ad2:	686c      	ldr	r4, [r5, #4]
 8002ad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ad8:	b17b      	cbz	r3, 8002afa <_fflush_r+0x42>
 8002ada:	4621      	mov	r1, r4
 8002adc:	4628      	mov	r0, r5
 8002ade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ae2:	f7ff bf61 	b.w	80029a8 <__sflush_r>
 8002ae6:	4b07      	ldr	r3, [pc, #28]	; (8002b04 <_fflush_r+0x4c>)
 8002ae8:	429c      	cmp	r4, r3
 8002aea:	d101      	bne.n	8002af0 <_fflush_r+0x38>
 8002aec:	68ac      	ldr	r4, [r5, #8]
 8002aee:	e7f1      	b.n	8002ad4 <_fflush_r+0x1c>
 8002af0:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <_fflush_r+0x50>)
 8002af2:	429c      	cmp	r4, r3
 8002af4:	bf08      	it	eq
 8002af6:	68ec      	ldreq	r4, [r5, #12]
 8002af8:	e7ec      	b.n	8002ad4 <_fflush_r+0x1c>
 8002afa:	2000      	movs	r0, #0
 8002afc:	bd38      	pop	{r3, r4, r5, pc}
 8002afe:	bf00      	nop
 8002b00:	08003ac0 	.word	0x08003ac0
 8002b04:	08003ae0 	.word	0x08003ae0
 8002b08:	08003aa0 	.word	0x08003aa0

08002b0c <_cleanup_r>:
 8002b0c:	4901      	ldr	r1, [pc, #4]	; (8002b14 <_cleanup_r+0x8>)
 8002b0e:	f000 b8a9 	b.w	8002c64 <_fwalk_reent>
 8002b12:	bf00      	nop
 8002b14:	08002ab9 	.word	0x08002ab9

08002b18 <std.isra.0>:
 8002b18:	2300      	movs	r3, #0
 8002b1a:	b510      	push	{r4, lr}
 8002b1c:	4604      	mov	r4, r0
 8002b1e:	6003      	str	r3, [r0, #0]
 8002b20:	6043      	str	r3, [r0, #4]
 8002b22:	6083      	str	r3, [r0, #8]
 8002b24:	8181      	strh	r1, [r0, #12]
 8002b26:	6643      	str	r3, [r0, #100]	; 0x64
 8002b28:	81c2      	strh	r2, [r0, #14]
 8002b2a:	6103      	str	r3, [r0, #16]
 8002b2c:	6143      	str	r3, [r0, #20]
 8002b2e:	6183      	str	r3, [r0, #24]
 8002b30:	4619      	mov	r1, r3
 8002b32:	2208      	movs	r2, #8
 8002b34:	305c      	adds	r0, #92	; 0x5c
 8002b36:	f7ff fdf3 	bl	8002720 <memset>
 8002b3a:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <std.isra.0+0x38>)
 8002b3c:	6263      	str	r3, [r4, #36]	; 0x24
 8002b3e:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <std.isra.0+0x3c>)
 8002b40:	62a3      	str	r3, [r4, #40]	; 0x28
 8002b42:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <std.isra.0+0x40>)
 8002b44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b46:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <std.isra.0+0x44>)
 8002b48:	6224      	str	r4, [r4, #32]
 8002b4a:	6323      	str	r3, [r4, #48]	; 0x30
 8002b4c:	bd10      	pop	{r4, pc}
 8002b4e:	bf00      	nop
 8002b50:	0800348d 	.word	0x0800348d
 8002b54:	080034af 	.word	0x080034af
 8002b58:	080034e7 	.word	0x080034e7
 8002b5c:	0800350b 	.word	0x0800350b

08002b60 <__sfmoreglue>:
 8002b60:	b570      	push	{r4, r5, r6, lr}
 8002b62:	1e4a      	subs	r2, r1, #1
 8002b64:	2568      	movs	r5, #104	; 0x68
 8002b66:	4355      	muls	r5, r2
 8002b68:	460e      	mov	r6, r1
 8002b6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002b6e:	f000 f949 	bl	8002e04 <_malloc_r>
 8002b72:	4604      	mov	r4, r0
 8002b74:	b140      	cbz	r0, 8002b88 <__sfmoreglue+0x28>
 8002b76:	2100      	movs	r1, #0
 8002b78:	e880 0042 	stmia.w	r0, {r1, r6}
 8002b7c:	300c      	adds	r0, #12
 8002b7e:	60a0      	str	r0, [r4, #8]
 8002b80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002b84:	f7ff fdcc 	bl	8002720 <memset>
 8002b88:	4620      	mov	r0, r4
 8002b8a:	bd70      	pop	{r4, r5, r6, pc}

08002b8c <__sinit>:
 8002b8c:	6983      	ldr	r3, [r0, #24]
 8002b8e:	b510      	push	{r4, lr}
 8002b90:	4604      	mov	r4, r0
 8002b92:	bb33      	cbnz	r3, 8002be2 <__sinit+0x56>
 8002b94:	6483      	str	r3, [r0, #72]	; 0x48
 8002b96:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002b98:	6503      	str	r3, [r0, #80]	; 0x50
 8002b9a:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <__sinit+0x58>)
 8002b9c:	4a12      	ldr	r2, [pc, #72]	; (8002be8 <__sinit+0x5c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6282      	str	r2, [r0, #40]	; 0x28
 8002ba2:	4298      	cmp	r0, r3
 8002ba4:	bf04      	itt	eq
 8002ba6:	2301      	moveq	r3, #1
 8002ba8:	6183      	streq	r3, [r0, #24]
 8002baa:	f000 f81f 	bl	8002bec <__sfp>
 8002bae:	6060      	str	r0, [r4, #4]
 8002bb0:	4620      	mov	r0, r4
 8002bb2:	f000 f81b 	bl	8002bec <__sfp>
 8002bb6:	60a0      	str	r0, [r4, #8]
 8002bb8:	4620      	mov	r0, r4
 8002bba:	f000 f817 	bl	8002bec <__sfp>
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	60e0      	str	r0, [r4, #12]
 8002bc2:	2104      	movs	r1, #4
 8002bc4:	6860      	ldr	r0, [r4, #4]
 8002bc6:	f7ff ffa7 	bl	8002b18 <std.isra.0>
 8002bca:	2201      	movs	r2, #1
 8002bcc:	2109      	movs	r1, #9
 8002bce:	68a0      	ldr	r0, [r4, #8]
 8002bd0:	f7ff ffa2 	bl	8002b18 <std.isra.0>
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	2112      	movs	r1, #18
 8002bd8:	68e0      	ldr	r0, [r4, #12]
 8002bda:	f7ff ff9d 	bl	8002b18 <std.isra.0>
 8002bde:	2301      	movs	r3, #1
 8002be0:	61a3      	str	r3, [r4, #24]
 8002be2:	bd10      	pop	{r4, pc}
 8002be4:	08003a9c 	.word	0x08003a9c
 8002be8:	08002b0d 	.word	0x08002b0d

08002bec <__sfp>:
 8002bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bee:	4b1c      	ldr	r3, [pc, #112]	; (8002c60 <__sfp+0x74>)
 8002bf0:	681e      	ldr	r6, [r3, #0]
 8002bf2:	69b3      	ldr	r3, [r6, #24]
 8002bf4:	4607      	mov	r7, r0
 8002bf6:	b913      	cbnz	r3, 8002bfe <__sfp+0x12>
 8002bf8:	4630      	mov	r0, r6
 8002bfa:	f7ff ffc7 	bl	8002b8c <__sinit>
 8002bfe:	3648      	adds	r6, #72	; 0x48
 8002c00:	68b4      	ldr	r4, [r6, #8]
 8002c02:	6873      	ldr	r3, [r6, #4]
 8002c04:	3b01      	subs	r3, #1
 8002c06:	d503      	bpl.n	8002c10 <__sfp+0x24>
 8002c08:	6833      	ldr	r3, [r6, #0]
 8002c0a:	b133      	cbz	r3, 8002c1a <__sfp+0x2e>
 8002c0c:	6836      	ldr	r6, [r6, #0]
 8002c0e:	e7f7      	b.n	8002c00 <__sfp+0x14>
 8002c10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002c14:	b16d      	cbz	r5, 8002c32 <__sfp+0x46>
 8002c16:	3468      	adds	r4, #104	; 0x68
 8002c18:	e7f4      	b.n	8002c04 <__sfp+0x18>
 8002c1a:	2104      	movs	r1, #4
 8002c1c:	4638      	mov	r0, r7
 8002c1e:	f7ff ff9f 	bl	8002b60 <__sfmoreglue>
 8002c22:	6030      	str	r0, [r6, #0]
 8002c24:	2800      	cmp	r0, #0
 8002c26:	d1f1      	bne.n	8002c0c <__sfp+0x20>
 8002c28:	230c      	movs	r3, #12
 8002c2a:	603b      	str	r3, [r7, #0]
 8002c2c:	4604      	mov	r4, r0
 8002c2e:	4620      	mov	r0, r4
 8002c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c36:	81e3      	strh	r3, [r4, #14]
 8002c38:	2301      	movs	r3, #1
 8002c3a:	81a3      	strh	r3, [r4, #12]
 8002c3c:	6665      	str	r5, [r4, #100]	; 0x64
 8002c3e:	6025      	str	r5, [r4, #0]
 8002c40:	60a5      	str	r5, [r4, #8]
 8002c42:	6065      	str	r5, [r4, #4]
 8002c44:	6125      	str	r5, [r4, #16]
 8002c46:	6165      	str	r5, [r4, #20]
 8002c48:	61a5      	str	r5, [r4, #24]
 8002c4a:	2208      	movs	r2, #8
 8002c4c:	4629      	mov	r1, r5
 8002c4e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002c52:	f7ff fd65 	bl	8002720 <memset>
 8002c56:	6365      	str	r5, [r4, #52]	; 0x34
 8002c58:	63a5      	str	r5, [r4, #56]	; 0x38
 8002c5a:	64a5      	str	r5, [r4, #72]	; 0x48
 8002c5c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002c5e:	e7e6      	b.n	8002c2e <__sfp+0x42>
 8002c60:	08003a9c 	.word	0x08003a9c

08002c64 <_fwalk_reent>:
 8002c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c68:	4680      	mov	r8, r0
 8002c6a:	4689      	mov	r9, r1
 8002c6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002c70:	2600      	movs	r6, #0
 8002c72:	b914      	cbnz	r4, 8002c7a <_fwalk_reent+0x16>
 8002c74:	4630      	mov	r0, r6
 8002c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c7a:	68a5      	ldr	r5, [r4, #8]
 8002c7c:	6867      	ldr	r7, [r4, #4]
 8002c7e:	3f01      	subs	r7, #1
 8002c80:	d501      	bpl.n	8002c86 <_fwalk_reent+0x22>
 8002c82:	6824      	ldr	r4, [r4, #0]
 8002c84:	e7f5      	b.n	8002c72 <_fwalk_reent+0xe>
 8002c86:	89ab      	ldrh	r3, [r5, #12]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d907      	bls.n	8002c9c <_fwalk_reent+0x38>
 8002c8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c90:	3301      	adds	r3, #1
 8002c92:	d003      	beq.n	8002c9c <_fwalk_reent+0x38>
 8002c94:	4629      	mov	r1, r5
 8002c96:	4640      	mov	r0, r8
 8002c98:	47c8      	blx	r9
 8002c9a:	4306      	orrs	r6, r0
 8002c9c:	3568      	adds	r5, #104	; 0x68
 8002c9e:	e7ee      	b.n	8002c7e <_fwalk_reent+0x1a>

08002ca0 <__swhatbuf_r>:
 8002ca0:	b570      	push	{r4, r5, r6, lr}
 8002ca2:	460e      	mov	r6, r1
 8002ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ca8:	2900      	cmp	r1, #0
 8002caa:	b090      	sub	sp, #64	; 0x40
 8002cac:	4614      	mov	r4, r2
 8002cae:	461d      	mov	r5, r3
 8002cb0:	da07      	bge.n	8002cc2 <__swhatbuf_r+0x22>
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	602b      	str	r3, [r5, #0]
 8002cb6:	89b3      	ldrh	r3, [r6, #12]
 8002cb8:	061a      	lsls	r2, r3, #24
 8002cba:	d410      	bmi.n	8002cde <__swhatbuf_r+0x3e>
 8002cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cc0:	e00e      	b.n	8002ce0 <__swhatbuf_r+0x40>
 8002cc2:	aa01      	add	r2, sp, #4
 8002cc4:	f000 fc48 	bl	8003558 <_fstat_r>
 8002cc8:	2800      	cmp	r0, #0
 8002cca:	dbf2      	blt.n	8002cb2 <__swhatbuf_r+0x12>
 8002ccc:	9a02      	ldr	r2, [sp, #8]
 8002cce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002cd2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002cd6:	425a      	negs	r2, r3
 8002cd8:	415a      	adcs	r2, r3
 8002cda:	602a      	str	r2, [r5, #0]
 8002cdc:	e7ee      	b.n	8002cbc <__swhatbuf_r+0x1c>
 8002cde:	2340      	movs	r3, #64	; 0x40
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	6023      	str	r3, [r4, #0]
 8002ce4:	b010      	add	sp, #64	; 0x40
 8002ce6:	bd70      	pop	{r4, r5, r6, pc}

08002ce8 <__smakebuf_r>:
 8002ce8:	898b      	ldrh	r3, [r1, #12]
 8002cea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002cec:	079d      	lsls	r5, r3, #30
 8002cee:	4606      	mov	r6, r0
 8002cf0:	460c      	mov	r4, r1
 8002cf2:	d507      	bpl.n	8002d04 <__smakebuf_r+0x1c>
 8002cf4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002cf8:	6023      	str	r3, [r4, #0]
 8002cfa:	6123      	str	r3, [r4, #16]
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	6163      	str	r3, [r4, #20]
 8002d00:	b002      	add	sp, #8
 8002d02:	bd70      	pop	{r4, r5, r6, pc}
 8002d04:	ab01      	add	r3, sp, #4
 8002d06:	466a      	mov	r2, sp
 8002d08:	f7ff ffca 	bl	8002ca0 <__swhatbuf_r>
 8002d0c:	9900      	ldr	r1, [sp, #0]
 8002d0e:	4605      	mov	r5, r0
 8002d10:	4630      	mov	r0, r6
 8002d12:	f000 f877 	bl	8002e04 <_malloc_r>
 8002d16:	b948      	cbnz	r0, 8002d2c <__smakebuf_r+0x44>
 8002d18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d1c:	059a      	lsls	r2, r3, #22
 8002d1e:	d4ef      	bmi.n	8002d00 <__smakebuf_r+0x18>
 8002d20:	f023 0303 	bic.w	r3, r3, #3
 8002d24:	f043 0302 	orr.w	r3, r3, #2
 8002d28:	81a3      	strh	r3, [r4, #12]
 8002d2a:	e7e3      	b.n	8002cf4 <__smakebuf_r+0xc>
 8002d2c:	4b0d      	ldr	r3, [pc, #52]	; (8002d64 <__smakebuf_r+0x7c>)
 8002d2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002d30:	89a3      	ldrh	r3, [r4, #12]
 8002d32:	6020      	str	r0, [r4, #0]
 8002d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d38:	81a3      	strh	r3, [r4, #12]
 8002d3a:	9b00      	ldr	r3, [sp, #0]
 8002d3c:	6163      	str	r3, [r4, #20]
 8002d3e:	9b01      	ldr	r3, [sp, #4]
 8002d40:	6120      	str	r0, [r4, #16]
 8002d42:	b15b      	cbz	r3, 8002d5c <__smakebuf_r+0x74>
 8002d44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d48:	4630      	mov	r0, r6
 8002d4a:	f000 fc17 	bl	800357c <_isatty_r>
 8002d4e:	b128      	cbz	r0, 8002d5c <__smakebuf_r+0x74>
 8002d50:	89a3      	ldrh	r3, [r4, #12]
 8002d52:	f023 0303 	bic.w	r3, r3, #3
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	81a3      	strh	r3, [r4, #12]
 8002d5c:	89a3      	ldrh	r3, [r4, #12]
 8002d5e:	431d      	orrs	r5, r3
 8002d60:	81a5      	strh	r5, [r4, #12]
 8002d62:	e7cd      	b.n	8002d00 <__smakebuf_r+0x18>
 8002d64:	08002b0d 	.word	0x08002b0d

08002d68 <_free_r>:
 8002d68:	b538      	push	{r3, r4, r5, lr}
 8002d6a:	4605      	mov	r5, r0
 8002d6c:	2900      	cmp	r1, #0
 8002d6e:	d045      	beq.n	8002dfc <_free_r+0x94>
 8002d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d74:	1f0c      	subs	r4, r1, #4
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	bfb8      	it	lt
 8002d7a:	18e4      	addlt	r4, r4, r3
 8002d7c:	f000 fc20 	bl	80035c0 <__malloc_lock>
 8002d80:	4a1f      	ldr	r2, [pc, #124]	; (8002e00 <_free_r+0x98>)
 8002d82:	6813      	ldr	r3, [r2, #0]
 8002d84:	4610      	mov	r0, r2
 8002d86:	b933      	cbnz	r3, 8002d96 <_free_r+0x2e>
 8002d88:	6063      	str	r3, [r4, #4]
 8002d8a:	6014      	str	r4, [r2, #0]
 8002d8c:	4628      	mov	r0, r5
 8002d8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d92:	f000 bc16 	b.w	80035c2 <__malloc_unlock>
 8002d96:	42a3      	cmp	r3, r4
 8002d98:	d90c      	bls.n	8002db4 <_free_r+0x4c>
 8002d9a:	6821      	ldr	r1, [r4, #0]
 8002d9c:	1862      	adds	r2, r4, r1
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	bf04      	itt	eq
 8002da2:	681a      	ldreq	r2, [r3, #0]
 8002da4:	685b      	ldreq	r3, [r3, #4]
 8002da6:	6063      	str	r3, [r4, #4]
 8002da8:	bf04      	itt	eq
 8002daa:	1852      	addeq	r2, r2, r1
 8002dac:	6022      	streq	r2, [r4, #0]
 8002dae:	6004      	str	r4, [r0, #0]
 8002db0:	e7ec      	b.n	8002d8c <_free_r+0x24>
 8002db2:	4613      	mov	r3, r2
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	b10a      	cbz	r2, 8002dbc <_free_r+0x54>
 8002db8:	42a2      	cmp	r2, r4
 8002dba:	d9fa      	bls.n	8002db2 <_free_r+0x4a>
 8002dbc:	6819      	ldr	r1, [r3, #0]
 8002dbe:	1858      	adds	r0, r3, r1
 8002dc0:	42a0      	cmp	r0, r4
 8002dc2:	d10b      	bne.n	8002ddc <_free_r+0x74>
 8002dc4:	6820      	ldr	r0, [r4, #0]
 8002dc6:	4401      	add	r1, r0
 8002dc8:	1858      	adds	r0, r3, r1
 8002dca:	4282      	cmp	r2, r0
 8002dcc:	6019      	str	r1, [r3, #0]
 8002dce:	d1dd      	bne.n	8002d8c <_free_r+0x24>
 8002dd0:	6810      	ldr	r0, [r2, #0]
 8002dd2:	6852      	ldr	r2, [r2, #4]
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	4401      	add	r1, r0
 8002dd8:	6019      	str	r1, [r3, #0]
 8002dda:	e7d7      	b.n	8002d8c <_free_r+0x24>
 8002ddc:	d902      	bls.n	8002de4 <_free_r+0x7c>
 8002dde:	230c      	movs	r3, #12
 8002de0:	602b      	str	r3, [r5, #0]
 8002de2:	e7d3      	b.n	8002d8c <_free_r+0x24>
 8002de4:	6820      	ldr	r0, [r4, #0]
 8002de6:	1821      	adds	r1, r4, r0
 8002de8:	428a      	cmp	r2, r1
 8002dea:	bf04      	itt	eq
 8002dec:	6811      	ldreq	r1, [r2, #0]
 8002dee:	6852      	ldreq	r2, [r2, #4]
 8002df0:	6062      	str	r2, [r4, #4]
 8002df2:	bf04      	itt	eq
 8002df4:	1809      	addeq	r1, r1, r0
 8002df6:	6021      	streq	r1, [r4, #0]
 8002df8:	605c      	str	r4, [r3, #4]
 8002dfa:	e7c7      	b.n	8002d8c <_free_r+0x24>
 8002dfc:	bd38      	pop	{r3, r4, r5, pc}
 8002dfe:	bf00      	nop
 8002e00:	2000009c 	.word	0x2000009c

08002e04 <_malloc_r>:
 8002e04:	b570      	push	{r4, r5, r6, lr}
 8002e06:	1ccd      	adds	r5, r1, #3
 8002e08:	f025 0503 	bic.w	r5, r5, #3
 8002e0c:	3508      	adds	r5, #8
 8002e0e:	2d0c      	cmp	r5, #12
 8002e10:	bf38      	it	cc
 8002e12:	250c      	movcc	r5, #12
 8002e14:	2d00      	cmp	r5, #0
 8002e16:	4606      	mov	r6, r0
 8002e18:	db01      	blt.n	8002e1e <_malloc_r+0x1a>
 8002e1a:	42a9      	cmp	r1, r5
 8002e1c:	d903      	bls.n	8002e26 <_malloc_r+0x22>
 8002e1e:	230c      	movs	r3, #12
 8002e20:	6033      	str	r3, [r6, #0]
 8002e22:	2000      	movs	r0, #0
 8002e24:	bd70      	pop	{r4, r5, r6, pc}
 8002e26:	f000 fbcb 	bl	80035c0 <__malloc_lock>
 8002e2a:	4a23      	ldr	r2, [pc, #140]	; (8002eb8 <_malloc_r+0xb4>)
 8002e2c:	6814      	ldr	r4, [r2, #0]
 8002e2e:	4621      	mov	r1, r4
 8002e30:	b991      	cbnz	r1, 8002e58 <_malloc_r+0x54>
 8002e32:	4c22      	ldr	r4, [pc, #136]	; (8002ebc <_malloc_r+0xb8>)
 8002e34:	6823      	ldr	r3, [r4, #0]
 8002e36:	b91b      	cbnz	r3, 8002e40 <_malloc_r+0x3c>
 8002e38:	4630      	mov	r0, r6
 8002e3a:	f000 fb17 	bl	800346c <_sbrk_r>
 8002e3e:	6020      	str	r0, [r4, #0]
 8002e40:	4629      	mov	r1, r5
 8002e42:	4630      	mov	r0, r6
 8002e44:	f000 fb12 	bl	800346c <_sbrk_r>
 8002e48:	1c43      	adds	r3, r0, #1
 8002e4a:	d126      	bne.n	8002e9a <_malloc_r+0x96>
 8002e4c:	230c      	movs	r3, #12
 8002e4e:	6033      	str	r3, [r6, #0]
 8002e50:	4630      	mov	r0, r6
 8002e52:	f000 fbb6 	bl	80035c2 <__malloc_unlock>
 8002e56:	e7e4      	b.n	8002e22 <_malloc_r+0x1e>
 8002e58:	680b      	ldr	r3, [r1, #0]
 8002e5a:	1b5b      	subs	r3, r3, r5
 8002e5c:	d41a      	bmi.n	8002e94 <_malloc_r+0x90>
 8002e5e:	2b0b      	cmp	r3, #11
 8002e60:	d90f      	bls.n	8002e82 <_malloc_r+0x7e>
 8002e62:	600b      	str	r3, [r1, #0]
 8002e64:	50cd      	str	r5, [r1, r3]
 8002e66:	18cc      	adds	r4, r1, r3
 8002e68:	4630      	mov	r0, r6
 8002e6a:	f000 fbaa 	bl	80035c2 <__malloc_unlock>
 8002e6e:	f104 000b 	add.w	r0, r4, #11
 8002e72:	1d23      	adds	r3, r4, #4
 8002e74:	f020 0007 	bic.w	r0, r0, #7
 8002e78:	1ac3      	subs	r3, r0, r3
 8002e7a:	d01b      	beq.n	8002eb4 <_malloc_r+0xb0>
 8002e7c:	425a      	negs	r2, r3
 8002e7e:	50e2      	str	r2, [r4, r3]
 8002e80:	bd70      	pop	{r4, r5, r6, pc}
 8002e82:	428c      	cmp	r4, r1
 8002e84:	bf0d      	iteet	eq
 8002e86:	6863      	ldreq	r3, [r4, #4]
 8002e88:	684b      	ldrne	r3, [r1, #4]
 8002e8a:	6063      	strne	r3, [r4, #4]
 8002e8c:	6013      	streq	r3, [r2, #0]
 8002e8e:	bf18      	it	ne
 8002e90:	460c      	movne	r4, r1
 8002e92:	e7e9      	b.n	8002e68 <_malloc_r+0x64>
 8002e94:	460c      	mov	r4, r1
 8002e96:	6849      	ldr	r1, [r1, #4]
 8002e98:	e7ca      	b.n	8002e30 <_malloc_r+0x2c>
 8002e9a:	1cc4      	adds	r4, r0, #3
 8002e9c:	f024 0403 	bic.w	r4, r4, #3
 8002ea0:	42a0      	cmp	r0, r4
 8002ea2:	d005      	beq.n	8002eb0 <_malloc_r+0xac>
 8002ea4:	1a21      	subs	r1, r4, r0
 8002ea6:	4630      	mov	r0, r6
 8002ea8:	f000 fae0 	bl	800346c <_sbrk_r>
 8002eac:	3001      	adds	r0, #1
 8002eae:	d0cd      	beq.n	8002e4c <_malloc_r+0x48>
 8002eb0:	6025      	str	r5, [r4, #0]
 8002eb2:	e7d9      	b.n	8002e68 <_malloc_r+0x64>
 8002eb4:	bd70      	pop	{r4, r5, r6, pc}
 8002eb6:	bf00      	nop
 8002eb8:	2000009c 	.word	0x2000009c
 8002ebc:	200000a0 	.word	0x200000a0

08002ec0 <__sfputc_r>:
 8002ec0:	6893      	ldr	r3, [r2, #8]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	b410      	push	{r4}
 8002ec8:	6093      	str	r3, [r2, #8]
 8002eca:	da09      	bge.n	8002ee0 <__sfputc_r+0x20>
 8002ecc:	6994      	ldr	r4, [r2, #24]
 8002ece:	42a3      	cmp	r3, r4
 8002ed0:	db02      	blt.n	8002ed8 <__sfputc_r+0x18>
 8002ed2:	b2cb      	uxtb	r3, r1
 8002ed4:	2b0a      	cmp	r3, #10
 8002ed6:	d103      	bne.n	8002ee0 <__sfputc_r+0x20>
 8002ed8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002edc:	f7ff bca4 	b.w	8002828 <__swbuf_r>
 8002ee0:	6813      	ldr	r3, [r2, #0]
 8002ee2:	1c58      	adds	r0, r3, #1
 8002ee4:	6010      	str	r0, [r2, #0]
 8002ee6:	7019      	strb	r1, [r3, #0]
 8002ee8:	b2c8      	uxtb	r0, r1
 8002eea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <__sfputs_r>:
 8002ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ef2:	4606      	mov	r6, r0
 8002ef4:	460f      	mov	r7, r1
 8002ef6:	4614      	mov	r4, r2
 8002ef8:	18d5      	adds	r5, r2, r3
 8002efa:	42ac      	cmp	r4, r5
 8002efc:	d101      	bne.n	8002f02 <__sfputs_r+0x12>
 8002efe:	2000      	movs	r0, #0
 8002f00:	e007      	b.n	8002f12 <__sfputs_r+0x22>
 8002f02:	463a      	mov	r2, r7
 8002f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f08:	4630      	mov	r0, r6
 8002f0a:	f7ff ffd9 	bl	8002ec0 <__sfputc_r>
 8002f0e:	1c43      	adds	r3, r0, #1
 8002f10:	d1f3      	bne.n	8002efa <__sfputs_r+0xa>
 8002f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002f14 <_vfiprintf_r>:
 8002f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f18:	b09d      	sub	sp, #116	; 0x74
 8002f1a:	460c      	mov	r4, r1
 8002f1c:	4617      	mov	r7, r2
 8002f1e:	9303      	str	r3, [sp, #12]
 8002f20:	4606      	mov	r6, r0
 8002f22:	b118      	cbz	r0, 8002f2c <_vfiprintf_r+0x18>
 8002f24:	6983      	ldr	r3, [r0, #24]
 8002f26:	b90b      	cbnz	r3, 8002f2c <_vfiprintf_r+0x18>
 8002f28:	f7ff fe30 	bl	8002b8c <__sinit>
 8002f2c:	4b7c      	ldr	r3, [pc, #496]	; (8003120 <_vfiprintf_r+0x20c>)
 8002f2e:	429c      	cmp	r4, r3
 8002f30:	d157      	bne.n	8002fe2 <_vfiprintf_r+0xce>
 8002f32:	6874      	ldr	r4, [r6, #4]
 8002f34:	89a3      	ldrh	r3, [r4, #12]
 8002f36:	0718      	lsls	r0, r3, #28
 8002f38:	d55d      	bpl.n	8002ff6 <_vfiprintf_r+0xe2>
 8002f3a:	6923      	ldr	r3, [r4, #16]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d05a      	beq.n	8002ff6 <_vfiprintf_r+0xe2>
 8002f40:	2300      	movs	r3, #0
 8002f42:	9309      	str	r3, [sp, #36]	; 0x24
 8002f44:	2320      	movs	r3, #32
 8002f46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f4a:	2330      	movs	r3, #48	; 0x30
 8002f4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f50:	f04f 0b01 	mov.w	fp, #1
 8002f54:	46b8      	mov	r8, r7
 8002f56:	4645      	mov	r5, r8
 8002f58:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d155      	bne.n	800300c <_vfiprintf_r+0xf8>
 8002f60:	ebb8 0a07 	subs.w	sl, r8, r7
 8002f64:	d00b      	beq.n	8002f7e <_vfiprintf_r+0x6a>
 8002f66:	4653      	mov	r3, sl
 8002f68:	463a      	mov	r2, r7
 8002f6a:	4621      	mov	r1, r4
 8002f6c:	4630      	mov	r0, r6
 8002f6e:	f7ff ffbf 	bl	8002ef0 <__sfputs_r>
 8002f72:	3001      	adds	r0, #1
 8002f74:	f000 80c4 	beq.w	8003100 <_vfiprintf_r+0x1ec>
 8002f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f7a:	4453      	add	r3, sl
 8002f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8002f7e:	f898 3000 	ldrb.w	r3, [r8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 80bc 	beq.w	8003100 <_vfiprintf_r+0x1ec>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f8e:	9304      	str	r3, [sp, #16]
 8002f90:	9307      	str	r3, [sp, #28]
 8002f92:	9205      	str	r2, [sp, #20]
 8002f94:	9306      	str	r3, [sp, #24]
 8002f96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f9a:	931a      	str	r3, [sp, #104]	; 0x68
 8002f9c:	2205      	movs	r2, #5
 8002f9e:	7829      	ldrb	r1, [r5, #0]
 8002fa0:	4860      	ldr	r0, [pc, #384]	; (8003124 <_vfiprintf_r+0x210>)
 8002fa2:	f7fd f91d 	bl	80001e0 <memchr>
 8002fa6:	f105 0801 	add.w	r8, r5, #1
 8002faa:	9b04      	ldr	r3, [sp, #16]
 8002fac:	2800      	cmp	r0, #0
 8002fae:	d131      	bne.n	8003014 <_vfiprintf_r+0x100>
 8002fb0:	06d9      	lsls	r1, r3, #27
 8002fb2:	bf44      	itt	mi
 8002fb4:	2220      	movmi	r2, #32
 8002fb6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002fba:	071a      	lsls	r2, r3, #28
 8002fbc:	bf44      	itt	mi
 8002fbe:	222b      	movmi	r2, #43	; 0x2b
 8002fc0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002fc4:	782a      	ldrb	r2, [r5, #0]
 8002fc6:	2a2a      	cmp	r2, #42	; 0x2a
 8002fc8:	d02c      	beq.n	8003024 <_vfiprintf_r+0x110>
 8002fca:	9a07      	ldr	r2, [sp, #28]
 8002fcc:	2100      	movs	r1, #0
 8002fce:	200a      	movs	r0, #10
 8002fd0:	46a8      	mov	r8, r5
 8002fd2:	3501      	adds	r5, #1
 8002fd4:	f898 3000 	ldrb.w	r3, [r8]
 8002fd8:	3b30      	subs	r3, #48	; 0x30
 8002fda:	2b09      	cmp	r3, #9
 8002fdc:	d96d      	bls.n	80030ba <_vfiprintf_r+0x1a6>
 8002fde:	b371      	cbz	r1, 800303e <_vfiprintf_r+0x12a>
 8002fe0:	e026      	b.n	8003030 <_vfiprintf_r+0x11c>
 8002fe2:	4b51      	ldr	r3, [pc, #324]	; (8003128 <_vfiprintf_r+0x214>)
 8002fe4:	429c      	cmp	r4, r3
 8002fe6:	d101      	bne.n	8002fec <_vfiprintf_r+0xd8>
 8002fe8:	68b4      	ldr	r4, [r6, #8]
 8002fea:	e7a3      	b.n	8002f34 <_vfiprintf_r+0x20>
 8002fec:	4b4f      	ldr	r3, [pc, #316]	; (800312c <_vfiprintf_r+0x218>)
 8002fee:	429c      	cmp	r4, r3
 8002ff0:	bf08      	it	eq
 8002ff2:	68f4      	ldreq	r4, [r6, #12]
 8002ff4:	e79e      	b.n	8002f34 <_vfiprintf_r+0x20>
 8002ff6:	4621      	mov	r1, r4
 8002ff8:	4630      	mov	r0, r6
 8002ffa:	f7ff fc67 	bl	80028cc <__swsetup_r>
 8002ffe:	2800      	cmp	r0, #0
 8003000:	d09e      	beq.n	8002f40 <_vfiprintf_r+0x2c>
 8003002:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003006:	b01d      	add	sp, #116	; 0x74
 8003008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800300c:	2b25      	cmp	r3, #37	; 0x25
 800300e:	d0a7      	beq.n	8002f60 <_vfiprintf_r+0x4c>
 8003010:	46a8      	mov	r8, r5
 8003012:	e7a0      	b.n	8002f56 <_vfiprintf_r+0x42>
 8003014:	4a43      	ldr	r2, [pc, #268]	; (8003124 <_vfiprintf_r+0x210>)
 8003016:	1a80      	subs	r0, r0, r2
 8003018:	fa0b f000 	lsl.w	r0, fp, r0
 800301c:	4318      	orrs	r0, r3
 800301e:	9004      	str	r0, [sp, #16]
 8003020:	4645      	mov	r5, r8
 8003022:	e7bb      	b.n	8002f9c <_vfiprintf_r+0x88>
 8003024:	9a03      	ldr	r2, [sp, #12]
 8003026:	1d11      	adds	r1, r2, #4
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	9103      	str	r1, [sp, #12]
 800302c:	2a00      	cmp	r2, #0
 800302e:	db01      	blt.n	8003034 <_vfiprintf_r+0x120>
 8003030:	9207      	str	r2, [sp, #28]
 8003032:	e004      	b.n	800303e <_vfiprintf_r+0x12a>
 8003034:	4252      	negs	r2, r2
 8003036:	f043 0302 	orr.w	r3, r3, #2
 800303a:	9207      	str	r2, [sp, #28]
 800303c:	9304      	str	r3, [sp, #16]
 800303e:	f898 3000 	ldrb.w	r3, [r8]
 8003042:	2b2e      	cmp	r3, #46	; 0x2e
 8003044:	d110      	bne.n	8003068 <_vfiprintf_r+0x154>
 8003046:	f898 3001 	ldrb.w	r3, [r8, #1]
 800304a:	2b2a      	cmp	r3, #42	; 0x2a
 800304c:	f108 0101 	add.w	r1, r8, #1
 8003050:	d137      	bne.n	80030c2 <_vfiprintf_r+0x1ae>
 8003052:	9b03      	ldr	r3, [sp, #12]
 8003054:	1d1a      	adds	r2, r3, #4
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	9203      	str	r2, [sp, #12]
 800305a:	2b00      	cmp	r3, #0
 800305c:	bfb8      	it	lt
 800305e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003062:	f108 0802 	add.w	r8, r8, #2
 8003066:	9305      	str	r3, [sp, #20]
 8003068:	4d31      	ldr	r5, [pc, #196]	; (8003130 <_vfiprintf_r+0x21c>)
 800306a:	f898 1000 	ldrb.w	r1, [r8]
 800306e:	2203      	movs	r2, #3
 8003070:	4628      	mov	r0, r5
 8003072:	f7fd f8b5 	bl	80001e0 <memchr>
 8003076:	b140      	cbz	r0, 800308a <_vfiprintf_r+0x176>
 8003078:	2340      	movs	r3, #64	; 0x40
 800307a:	1b40      	subs	r0, r0, r5
 800307c:	fa03 f000 	lsl.w	r0, r3, r0
 8003080:	9b04      	ldr	r3, [sp, #16]
 8003082:	4303      	orrs	r3, r0
 8003084:	9304      	str	r3, [sp, #16]
 8003086:	f108 0801 	add.w	r8, r8, #1
 800308a:	f898 1000 	ldrb.w	r1, [r8]
 800308e:	4829      	ldr	r0, [pc, #164]	; (8003134 <_vfiprintf_r+0x220>)
 8003090:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003094:	2206      	movs	r2, #6
 8003096:	f108 0701 	add.w	r7, r8, #1
 800309a:	f7fd f8a1 	bl	80001e0 <memchr>
 800309e:	2800      	cmp	r0, #0
 80030a0:	d034      	beq.n	800310c <_vfiprintf_r+0x1f8>
 80030a2:	4b25      	ldr	r3, [pc, #148]	; (8003138 <_vfiprintf_r+0x224>)
 80030a4:	bb03      	cbnz	r3, 80030e8 <_vfiprintf_r+0x1d4>
 80030a6:	9b03      	ldr	r3, [sp, #12]
 80030a8:	3307      	adds	r3, #7
 80030aa:	f023 0307 	bic.w	r3, r3, #7
 80030ae:	3308      	adds	r3, #8
 80030b0:	9303      	str	r3, [sp, #12]
 80030b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030b4:	444b      	add	r3, r9
 80030b6:	9309      	str	r3, [sp, #36]	; 0x24
 80030b8:	e74c      	b.n	8002f54 <_vfiprintf_r+0x40>
 80030ba:	fb00 3202 	mla	r2, r0, r2, r3
 80030be:	2101      	movs	r1, #1
 80030c0:	e786      	b.n	8002fd0 <_vfiprintf_r+0xbc>
 80030c2:	2300      	movs	r3, #0
 80030c4:	9305      	str	r3, [sp, #20]
 80030c6:	4618      	mov	r0, r3
 80030c8:	250a      	movs	r5, #10
 80030ca:	4688      	mov	r8, r1
 80030cc:	3101      	adds	r1, #1
 80030ce:	f898 2000 	ldrb.w	r2, [r8]
 80030d2:	3a30      	subs	r2, #48	; 0x30
 80030d4:	2a09      	cmp	r2, #9
 80030d6:	d903      	bls.n	80030e0 <_vfiprintf_r+0x1cc>
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0c5      	beq.n	8003068 <_vfiprintf_r+0x154>
 80030dc:	9005      	str	r0, [sp, #20]
 80030de:	e7c3      	b.n	8003068 <_vfiprintf_r+0x154>
 80030e0:	fb05 2000 	mla	r0, r5, r0, r2
 80030e4:	2301      	movs	r3, #1
 80030e6:	e7f0      	b.n	80030ca <_vfiprintf_r+0x1b6>
 80030e8:	ab03      	add	r3, sp, #12
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	4622      	mov	r2, r4
 80030ee:	4b13      	ldr	r3, [pc, #76]	; (800313c <_vfiprintf_r+0x228>)
 80030f0:	a904      	add	r1, sp, #16
 80030f2:	4630      	mov	r0, r6
 80030f4:	f3af 8000 	nop.w
 80030f8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80030fc:	4681      	mov	r9, r0
 80030fe:	d1d8      	bne.n	80030b2 <_vfiprintf_r+0x19e>
 8003100:	89a3      	ldrh	r3, [r4, #12]
 8003102:	065b      	lsls	r3, r3, #25
 8003104:	f53f af7d 	bmi.w	8003002 <_vfiprintf_r+0xee>
 8003108:	9809      	ldr	r0, [sp, #36]	; 0x24
 800310a:	e77c      	b.n	8003006 <_vfiprintf_r+0xf2>
 800310c:	ab03      	add	r3, sp, #12
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	4622      	mov	r2, r4
 8003112:	4b0a      	ldr	r3, [pc, #40]	; (800313c <_vfiprintf_r+0x228>)
 8003114:	a904      	add	r1, sp, #16
 8003116:	4630      	mov	r0, r6
 8003118:	f000 f888 	bl	800322c <_printf_i>
 800311c:	e7ec      	b.n	80030f8 <_vfiprintf_r+0x1e4>
 800311e:	bf00      	nop
 8003120:	08003ac0 	.word	0x08003ac0
 8003124:	08003b00 	.word	0x08003b00
 8003128:	08003ae0 	.word	0x08003ae0
 800312c:	08003aa0 	.word	0x08003aa0
 8003130:	08003b06 	.word	0x08003b06
 8003134:	08003b0a 	.word	0x08003b0a
 8003138:	00000000 	.word	0x00000000
 800313c:	08002ef1 	.word	0x08002ef1

08003140 <_printf_common>:
 8003140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003144:	4691      	mov	r9, r2
 8003146:	461f      	mov	r7, r3
 8003148:	688a      	ldr	r2, [r1, #8]
 800314a:	690b      	ldr	r3, [r1, #16]
 800314c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003150:	4293      	cmp	r3, r2
 8003152:	bfb8      	it	lt
 8003154:	4613      	movlt	r3, r2
 8003156:	f8c9 3000 	str.w	r3, [r9]
 800315a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800315e:	4606      	mov	r6, r0
 8003160:	460c      	mov	r4, r1
 8003162:	b112      	cbz	r2, 800316a <_printf_common+0x2a>
 8003164:	3301      	adds	r3, #1
 8003166:	f8c9 3000 	str.w	r3, [r9]
 800316a:	6823      	ldr	r3, [r4, #0]
 800316c:	0699      	lsls	r1, r3, #26
 800316e:	bf42      	ittt	mi
 8003170:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003174:	3302      	addmi	r3, #2
 8003176:	f8c9 3000 	strmi.w	r3, [r9]
 800317a:	6825      	ldr	r5, [r4, #0]
 800317c:	f015 0506 	ands.w	r5, r5, #6
 8003180:	d107      	bne.n	8003192 <_printf_common+0x52>
 8003182:	f104 0a19 	add.w	sl, r4, #25
 8003186:	68e3      	ldr	r3, [r4, #12]
 8003188:	f8d9 2000 	ldr.w	r2, [r9]
 800318c:	1a9b      	subs	r3, r3, r2
 800318e:	429d      	cmp	r5, r3
 8003190:	db29      	blt.n	80031e6 <_printf_common+0xa6>
 8003192:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003196:	6822      	ldr	r2, [r4, #0]
 8003198:	3300      	adds	r3, #0
 800319a:	bf18      	it	ne
 800319c:	2301      	movne	r3, #1
 800319e:	0692      	lsls	r2, r2, #26
 80031a0:	d42e      	bmi.n	8003200 <_printf_common+0xc0>
 80031a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031a6:	4639      	mov	r1, r7
 80031a8:	4630      	mov	r0, r6
 80031aa:	47c0      	blx	r8
 80031ac:	3001      	adds	r0, #1
 80031ae:	d021      	beq.n	80031f4 <_printf_common+0xb4>
 80031b0:	6823      	ldr	r3, [r4, #0]
 80031b2:	68e5      	ldr	r5, [r4, #12]
 80031b4:	f8d9 2000 	ldr.w	r2, [r9]
 80031b8:	f003 0306 	and.w	r3, r3, #6
 80031bc:	2b04      	cmp	r3, #4
 80031be:	bf08      	it	eq
 80031c0:	1aad      	subeq	r5, r5, r2
 80031c2:	68a3      	ldr	r3, [r4, #8]
 80031c4:	6922      	ldr	r2, [r4, #16]
 80031c6:	bf0c      	ite	eq
 80031c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031cc:	2500      	movne	r5, #0
 80031ce:	4293      	cmp	r3, r2
 80031d0:	bfc4      	itt	gt
 80031d2:	1a9b      	subgt	r3, r3, r2
 80031d4:	18ed      	addgt	r5, r5, r3
 80031d6:	f04f 0900 	mov.w	r9, #0
 80031da:	341a      	adds	r4, #26
 80031dc:	454d      	cmp	r5, r9
 80031de:	d11b      	bne.n	8003218 <_printf_common+0xd8>
 80031e0:	2000      	movs	r0, #0
 80031e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031e6:	2301      	movs	r3, #1
 80031e8:	4652      	mov	r2, sl
 80031ea:	4639      	mov	r1, r7
 80031ec:	4630      	mov	r0, r6
 80031ee:	47c0      	blx	r8
 80031f0:	3001      	adds	r0, #1
 80031f2:	d103      	bne.n	80031fc <_printf_common+0xbc>
 80031f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031fc:	3501      	adds	r5, #1
 80031fe:	e7c2      	b.n	8003186 <_printf_common+0x46>
 8003200:	18e1      	adds	r1, r4, r3
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	2030      	movs	r0, #48	; 0x30
 8003206:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800320a:	4422      	add	r2, r4
 800320c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003210:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003214:	3302      	adds	r3, #2
 8003216:	e7c4      	b.n	80031a2 <_printf_common+0x62>
 8003218:	2301      	movs	r3, #1
 800321a:	4622      	mov	r2, r4
 800321c:	4639      	mov	r1, r7
 800321e:	4630      	mov	r0, r6
 8003220:	47c0      	blx	r8
 8003222:	3001      	adds	r0, #1
 8003224:	d0e6      	beq.n	80031f4 <_printf_common+0xb4>
 8003226:	f109 0901 	add.w	r9, r9, #1
 800322a:	e7d7      	b.n	80031dc <_printf_common+0x9c>

0800322c <_printf_i>:
 800322c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003230:	4617      	mov	r7, r2
 8003232:	7e0a      	ldrb	r2, [r1, #24]
 8003234:	b085      	sub	sp, #20
 8003236:	2a6e      	cmp	r2, #110	; 0x6e
 8003238:	4698      	mov	r8, r3
 800323a:	4606      	mov	r6, r0
 800323c:	460c      	mov	r4, r1
 800323e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003240:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003244:	f000 80bc 	beq.w	80033c0 <_printf_i+0x194>
 8003248:	d81a      	bhi.n	8003280 <_printf_i+0x54>
 800324a:	2a63      	cmp	r2, #99	; 0x63
 800324c:	d02e      	beq.n	80032ac <_printf_i+0x80>
 800324e:	d80a      	bhi.n	8003266 <_printf_i+0x3a>
 8003250:	2a00      	cmp	r2, #0
 8003252:	f000 80c8 	beq.w	80033e6 <_printf_i+0x1ba>
 8003256:	2a58      	cmp	r2, #88	; 0x58
 8003258:	f000 808a 	beq.w	8003370 <_printf_i+0x144>
 800325c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003260:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003264:	e02a      	b.n	80032bc <_printf_i+0x90>
 8003266:	2a64      	cmp	r2, #100	; 0x64
 8003268:	d001      	beq.n	800326e <_printf_i+0x42>
 800326a:	2a69      	cmp	r2, #105	; 0x69
 800326c:	d1f6      	bne.n	800325c <_printf_i+0x30>
 800326e:	6821      	ldr	r1, [r4, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003276:	d023      	beq.n	80032c0 <_printf_i+0x94>
 8003278:	1d11      	adds	r1, r2, #4
 800327a:	6019      	str	r1, [r3, #0]
 800327c:	6813      	ldr	r3, [r2, #0]
 800327e:	e027      	b.n	80032d0 <_printf_i+0xa4>
 8003280:	2a73      	cmp	r2, #115	; 0x73
 8003282:	f000 80b4 	beq.w	80033ee <_printf_i+0x1c2>
 8003286:	d808      	bhi.n	800329a <_printf_i+0x6e>
 8003288:	2a6f      	cmp	r2, #111	; 0x6f
 800328a:	d02a      	beq.n	80032e2 <_printf_i+0xb6>
 800328c:	2a70      	cmp	r2, #112	; 0x70
 800328e:	d1e5      	bne.n	800325c <_printf_i+0x30>
 8003290:	680a      	ldr	r2, [r1, #0]
 8003292:	f042 0220 	orr.w	r2, r2, #32
 8003296:	600a      	str	r2, [r1, #0]
 8003298:	e003      	b.n	80032a2 <_printf_i+0x76>
 800329a:	2a75      	cmp	r2, #117	; 0x75
 800329c:	d021      	beq.n	80032e2 <_printf_i+0xb6>
 800329e:	2a78      	cmp	r2, #120	; 0x78
 80032a0:	d1dc      	bne.n	800325c <_printf_i+0x30>
 80032a2:	2278      	movs	r2, #120	; 0x78
 80032a4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80032a8:	496e      	ldr	r1, [pc, #440]	; (8003464 <_printf_i+0x238>)
 80032aa:	e064      	b.n	8003376 <_printf_i+0x14a>
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80032b2:	1d11      	adds	r1, r2, #4
 80032b4:	6019      	str	r1, [r3, #0]
 80032b6:	6813      	ldr	r3, [r2, #0]
 80032b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032bc:	2301      	movs	r3, #1
 80032be:	e0a3      	b.n	8003408 <_printf_i+0x1dc>
 80032c0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80032c4:	f102 0104 	add.w	r1, r2, #4
 80032c8:	6019      	str	r1, [r3, #0]
 80032ca:	d0d7      	beq.n	800327c <_printf_i+0x50>
 80032cc:	f9b2 3000 	ldrsh.w	r3, [r2]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	da03      	bge.n	80032dc <_printf_i+0xb0>
 80032d4:	222d      	movs	r2, #45	; 0x2d
 80032d6:	425b      	negs	r3, r3
 80032d8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80032dc:	4962      	ldr	r1, [pc, #392]	; (8003468 <_printf_i+0x23c>)
 80032de:	220a      	movs	r2, #10
 80032e0:	e017      	b.n	8003312 <_printf_i+0xe6>
 80032e2:	6820      	ldr	r0, [r4, #0]
 80032e4:	6819      	ldr	r1, [r3, #0]
 80032e6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80032ea:	d003      	beq.n	80032f4 <_printf_i+0xc8>
 80032ec:	1d08      	adds	r0, r1, #4
 80032ee:	6018      	str	r0, [r3, #0]
 80032f0:	680b      	ldr	r3, [r1, #0]
 80032f2:	e006      	b.n	8003302 <_printf_i+0xd6>
 80032f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80032f8:	f101 0004 	add.w	r0, r1, #4
 80032fc:	6018      	str	r0, [r3, #0]
 80032fe:	d0f7      	beq.n	80032f0 <_printf_i+0xc4>
 8003300:	880b      	ldrh	r3, [r1, #0]
 8003302:	4959      	ldr	r1, [pc, #356]	; (8003468 <_printf_i+0x23c>)
 8003304:	2a6f      	cmp	r2, #111	; 0x6f
 8003306:	bf14      	ite	ne
 8003308:	220a      	movne	r2, #10
 800330a:	2208      	moveq	r2, #8
 800330c:	2000      	movs	r0, #0
 800330e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003312:	6865      	ldr	r5, [r4, #4]
 8003314:	60a5      	str	r5, [r4, #8]
 8003316:	2d00      	cmp	r5, #0
 8003318:	f2c0 809c 	blt.w	8003454 <_printf_i+0x228>
 800331c:	6820      	ldr	r0, [r4, #0]
 800331e:	f020 0004 	bic.w	r0, r0, #4
 8003322:	6020      	str	r0, [r4, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d13f      	bne.n	80033a8 <_printf_i+0x17c>
 8003328:	2d00      	cmp	r5, #0
 800332a:	f040 8095 	bne.w	8003458 <_printf_i+0x22c>
 800332e:	4675      	mov	r5, lr
 8003330:	2a08      	cmp	r2, #8
 8003332:	d10b      	bne.n	800334c <_printf_i+0x120>
 8003334:	6823      	ldr	r3, [r4, #0]
 8003336:	07da      	lsls	r2, r3, #31
 8003338:	d508      	bpl.n	800334c <_printf_i+0x120>
 800333a:	6923      	ldr	r3, [r4, #16]
 800333c:	6862      	ldr	r2, [r4, #4]
 800333e:	429a      	cmp	r2, r3
 8003340:	bfde      	ittt	le
 8003342:	2330      	movle	r3, #48	; 0x30
 8003344:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003348:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800334c:	ebae 0305 	sub.w	r3, lr, r5
 8003350:	6123      	str	r3, [r4, #16]
 8003352:	f8cd 8000 	str.w	r8, [sp]
 8003356:	463b      	mov	r3, r7
 8003358:	aa03      	add	r2, sp, #12
 800335a:	4621      	mov	r1, r4
 800335c:	4630      	mov	r0, r6
 800335e:	f7ff feef 	bl	8003140 <_printf_common>
 8003362:	3001      	adds	r0, #1
 8003364:	d155      	bne.n	8003412 <_printf_i+0x1e6>
 8003366:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800336a:	b005      	add	sp, #20
 800336c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003370:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003374:	493c      	ldr	r1, [pc, #240]	; (8003468 <_printf_i+0x23c>)
 8003376:	6822      	ldr	r2, [r4, #0]
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800337e:	f100 0504 	add.w	r5, r0, #4
 8003382:	601d      	str	r5, [r3, #0]
 8003384:	d001      	beq.n	800338a <_printf_i+0x15e>
 8003386:	6803      	ldr	r3, [r0, #0]
 8003388:	e002      	b.n	8003390 <_printf_i+0x164>
 800338a:	0655      	lsls	r5, r2, #25
 800338c:	d5fb      	bpl.n	8003386 <_printf_i+0x15a>
 800338e:	8803      	ldrh	r3, [r0, #0]
 8003390:	07d0      	lsls	r0, r2, #31
 8003392:	bf44      	itt	mi
 8003394:	f042 0220 	orrmi.w	r2, r2, #32
 8003398:	6022      	strmi	r2, [r4, #0]
 800339a:	b91b      	cbnz	r3, 80033a4 <_printf_i+0x178>
 800339c:	6822      	ldr	r2, [r4, #0]
 800339e:	f022 0220 	bic.w	r2, r2, #32
 80033a2:	6022      	str	r2, [r4, #0]
 80033a4:	2210      	movs	r2, #16
 80033a6:	e7b1      	b.n	800330c <_printf_i+0xe0>
 80033a8:	4675      	mov	r5, lr
 80033aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80033ae:	fb02 3310 	mls	r3, r2, r0, r3
 80033b2:	5ccb      	ldrb	r3, [r1, r3]
 80033b4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80033b8:	4603      	mov	r3, r0
 80033ba:	2800      	cmp	r0, #0
 80033bc:	d1f5      	bne.n	80033aa <_printf_i+0x17e>
 80033be:	e7b7      	b.n	8003330 <_printf_i+0x104>
 80033c0:	6808      	ldr	r0, [r1, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	6949      	ldr	r1, [r1, #20]
 80033c6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80033ca:	d004      	beq.n	80033d6 <_printf_i+0x1aa>
 80033cc:	1d10      	adds	r0, r2, #4
 80033ce:	6018      	str	r0, [r3, #0]
 80033d0:	6813      	ldr	r3, [r2, #0]
 80033d2:	6019      	str	r1, [r3, #0]
 80033d4:	e007      	b.n	80033e6 <_printf_i+0x1ba>
 80033d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80033da:	f102 0004 	add.w	r0, r2, #4
 80033de:	6018      	str	r0, [r3, #0]
 80033e0:	6813      	ldr	r3, [r2, #0]
 80033e2:	d0f6      	beq.n	80033d2 <_printf_i+0x1a6>
 80033e4:	8019      	strh	r1, [r3, #0]
 80033e6:	2300      	movs	r3, #0
 80033e8:	6123      	str	r3, [r4, #16]
 80033ea:	4675      	mov	r5, lr
 80033ec:	e7b1      	b.n	8003352 <_printf_i+0x126>
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	1d11      	adds	r1, r2, #4
 80033f2:	6019      	str	r1, [r3, #0]
 80033f4:	6815      	ldr	r5, [r2, #0]
 80033f6:	6862      	ldr	r2, [r4, #4]
 80033f8:	2100      	movs	r1, #0
 80033fa:	4628      	mov	r0, r5
 80033fc:	f7fc fef0 	bl	80001e0 <memchr>
 8003400:	b108      	cbz	r0, 8003406 <_printf_i+0x1da>
 8003402:	1b40      	subs	r0, r0, r5
 8003404:	6060      	str	r0, [r4, #4]
 8003406:	6863      	ldr	r3, [r4, #4]
 8003408:	6123      	str	r3, [r4, #16]
 800340a:	2300      	movs	r3, #0
 800340c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003410:	e79f      	b.n	8003352 <_printf_i+0x126>
 8003412:	6923      	ldr	r3, [r4, #16]
 8003414:	462a      	mov	r2, r5
 8003416:	4639      	mov	r1, r7
 8003418:	4630      	mov	r0, r6
 800341a:	47c0      	blx	r8
 800341c:	3001      	adds	r0, #1
 800341e:	d0a2      	beq.n	8003366 <_printf_i+0x13a>
 8003420:	6823      	ldr	r3, [r4, #0]
 8003422:	079b      	lsls	r3, r3, #30
 8003424:	d507      	bpl.n	8003436 <_printf_i+0x20a>
 8003426:	2500      	movs	r5, #0
 8003428:	f104 0919 	add.w	r9, r4, #25
 800342c:	68e3      	ldr	r3, [r4, #12]
 800342e:	9a03      	ldr	r2, [sp, #12]
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	429d      	cmp	r5, r3
 8003434:	db05      	blt.n	8003442 <_printf_i+0x216>
 8003436:	68e0      	ldr	r0, [r4, #12]
 8003438:	9b03      	ldr	r3, [sp, #12]
 800343a:	4298      	cmp	r0, r3
 800343c:	bfb8      	it	lt
 800343e:	4618      	movlt	r0, r3
 8003440:	e793      	b.n	800336a <_printf_i+0x13e>
 8003442:	2301      	movs	r3, #1
 8003444:	464a      	mov	r2, r9
 8003446:	4639      	mov	r1, r7
 8003448:	4630      	mov	r0, r6
 800344a:	47c0      	blx	r8
 800344c:	3001      	adds	r0, #1
 800344e:	d08a      	beq.n	8003366 <_printf_i+0x13a>
 8003450:	3501      	adds	r5, #1
 8003452:	e7eb      	b.n	800342c <_printf_i+0x200>
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1a7      	bne.n	80033a8 <_printf_i+0x17c>
 8003458:	780b      	ldrb	r3, [r1, #0]
 800345a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800345e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003462:	e765      	b.n	8003330 <_printf_i+0x104>
 8003464:	08003b22 	.word	0x08003b22
 8003468:	08003b11 	.word	0x08003b11

0800346c <_sbrk_r>:
 800346c:	b538      	push	{r3, r4, r5, lr}
 800346e:	4c06      	ldr	r4, [pc, #24]	; (8003488 <_sbrk_r+0x1c>)
 8003470:	2300      	movs	r3, #0
 8003472:	4605      	mov	r5, r0
 8003474:	4608      	mov	r0, r1
 8003476:	6023      	str	r3, [r4, #0]
 8003478:	f7ff f8a4 	bl	80025c4 <_sbrk>
 800347c:	1c43      	adds	r3, r0, #1
 800347e:	d102      	bne.n	8003486 <_sbrk_r+0x1a>
 8003480:	6823      	ldr	r3, [r4, #0]
 8003482:	b103      	cbz	r3, 8003486 <_sbrk_r+0x1a>
 8003484:	602b      	str	r3, [r5, #0]
 8003486:	bd38      	pop	{r3, r4, r5, pc}
 8003488:	20000408 	.word	0x20000408

0800348c <__sread>:
 800348c:	b510      	push	{r4, lr}
 800348e:	460c      	mov	r4, r1
 8003490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003494:	f000 f896 	bl	80035c4 <_read_r>
 8003498:	2800      	cmp	r0, #0
 800349a:	bfab      	itete	ge
 800349c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800349e:	89a3      	ldrhlt	r3, [r4, #12]
 80034a0:	181b      	addge	r3, r3, r0
 80034a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80034a6:	bfac      	ite	ge
 80034a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80034aa:	81a3      	strhlt	r3, [r4, #12]
 80034ac:	bd10      	pop	{r4, pc}

080034ae <__swrite>:
 80034ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034b2:	461f      	mov	r7, r3
 80034b4:	898b      	ldrh	r3, [r1, #12]
 80034b6:	05db      	lsls	r3, r3, #23
 80034b8:	4605      	mov	r5, r0
 80034ba:	460c      	mov	r4, r1
 80034bc:	4616      	mov	r6, r2
 80034be:	d505      	bpl.n	80034cc <__swrite+0x1e>
 80034c0:	2302      	movs	r3, #2
 80034c2:	2200      	movs	r2, #0
 80034c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034c8:	f000 f868 	bl	800359c <_lseek_r>
 80034cc:	89a3      	ldrh	r3, [r4, #12]
 80034ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034d6:	81a3      	strh	r3, [r4, #12]
 80034d8:	4632      	mov	r2, r6
 80034da:	463b      	mov	r3, r7
 80034dc:	4628      	mov	r0, r5
 80034de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034e2:	f000 b817 	b.w	8003514 <_write_r>

080034e6 <__sseek>:
 80034e6:	b510      	push	{r4, lr}
 80034e8:	460c      	mov	r4, r1
 80034ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034ee:	f000 f855 	bl	800359c <_lseek_r>
 80034f2:	1c43      	adds	r3, r0, #1
 80034f4:	89a3      	ldrh	r3, [r4, #12]
 80034f6:	bf15      	itete	ne
 80034f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80034fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80034fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003502:	81a3      	strheq	r3, [r4, #12]
 8003504:	bf18      	it	ne
 8003506:	81a3      	strhne	r3, [r4, #12]
 8003508:	bd10      	pop	{r4, pc}

0800350a <__sclose>:
 800350a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800350e:	f000 b813 	b.w	8003538 <_close_r>
	...

08003514 <_write_r>:
 8003514:	b538      	push	{r3, r4, r5, lr}
 8003516:	4c07      	ldr	r4, [pc, #28]	; (8003534 <_write_r+0x20>)
 8003518:	4605      	mov	r5, r0
 800351a:	4608      	mov	r0, r1
 800351c:	4611      	mov	r1, r2
 800351e:	2200      	movs	r2, #0
 8003520:	6022      	str	r2, [r4, #0]
 8003522:	461a      	mov	r2, r3
 8003524:	f7ff f840 	bl	80025a8 <_write>
 8003528:	1c43      	adds	r3, r0, #1
 800352a:	d102      	bne.n	8003532 <_write_r+0x1e>
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	b103      	cbz	r3, 8003532 <_write_r+0x1e>
 8003530:	602b      	str	r3, [r5, #0]
 8003532:	bd38      	pop	{r3, r4, r5, pc}
 8003534:	20000408 	.word	0x20000408

08003538 <_close_r>:
 8003538:	b538      	push	{r3, r4, r5, lr}
 800353a:	4c06      	ldr	r4, [pc, #24]	; (8003554 <_close_r+0x1c>)
 800353c:	2300      	movs	r3, #0
 800353e:	4605      	mov	r5, r0
 8003540:	4608      	mov	r0, r1
 8003542:	6023      	str	r3, [r4, #0]
 8003544:	f7ff f858 	bl	80025f8 <_close>
 8003548:	1c43      	adds	r3, r0, #1
 800354a:	d102      	bne.n	8003552 <_close_r+0x1a>
 800354c:	6823      	ldr	r3, [r4, #0]
 800354e:	b103      	cbz	r3, 8003552 <_close_r+0x1a>
 8003550:	602b      	str	r3, [r5, #0]
 8003552:	bd38      	pop	{r3, r4, r5, pc}
 8003554:	20000408 	.word	0x20000408

08003558 <_fstat_r>:
 8003558:	b538      	push	{r3, r4, r5, lr}
 800355a:	4c07      	ldr	r4, [pc, #28]	; (8003578 <_fstat_r+0x20>)
 800355c:	2300      	movs	r3, #0
 800355e:	4605      	mov	r5, r0
 8003560:	4608      	mov	r0, r1
 8003562:	4611      	mov	r1, r2
 8003564:	6023      	str	r3, [r4, #0]
 8003566:	f7ff f84a 	bl	80025fe <_fstat>
 800356a:	1c43      	adds	r3, r0, #1
 800356c:	d102      	bne.n	8003574 <_fstat_r+0x1c>
 800356e:	6823      	ldr	r3, [r4, #0]
 8003570:	b103      	cbz	r3, 8003574 <_fstat_r+0x1c>
 8003572:	602b      	str	r3, [r5, #0]
 8003574:	bd38      	pop	{r3, r4, r5, pc}
 8003576:	bf00      	nop
 8003578:	20000408 	.word	0x20000408

0800357c <_isatty_r>:
 800357c:	b538      	push	{r3, r4, r5, lr}
 800357e:	4c06      	ldr	r4, [pc, #24]	; (8003598 <_isatty_r+0x1c>)
 8003580:	2300      	movs	r3, #0
 8003582:	4605      	mov	r5, r0
 8003584:	4608      	mov	r0, r1
 8003586:	6023      	str	r3, [r4, #0]
 8003588:	f7ff f83e 	bl	8002608 <_isatty>
 800358c:	1c43      	adds	r3, r0, #1
 800358e:	d102      	bne.n	8003596 <_isatty_r+0x1a>
 8003590:	6823      	ldr	r3, [r4, #0]
 8003592:	b103      	cbz	r3, 8003596 <_isatty_r+0x1a>
 8003594:	602b      	str	r3, [r5, #0]
 8003596:	bd38      	pop	{r3, r4, r5, pc}
 8003598:	20000408 	.word	0x20000408

0800359c <_lseek_r>:
 800359c:	b538      	push	{r3, r4, r5, lr}
 800359e:	4c07      	ldr	r4, [pc, #28]	; (80035bc <_lseek_r+0x20>)
 80035a0:	4605      	mov	r5, r0
 80035a2:	4608      	mov	r0, r1
 80035a4:	4611      	mov	r1, r2
 80035a6:	2200      	movs	r2, #0
 80035a8:	6022      	str	r2, [r4, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	f7ff f82e 	bl	800260c <_lseek>
 80035b0:	1c43      	adds	r3, r0, #1
 80035b2:	d102      	bne.n	80035ba <_lseek_r+0x1e>
 80035b4:	6823      	ldr	r3, [r4, #0]
 80035b6:	b103      	cbz	r3, 80035ba <_lseek_r+0x1e>
 80035b8:	602b      	str	r3, [r5, #0]
 80035ba:	bd38      	pop	{r3, r4, r5, pc}
 80035bc:	20000408 	.word	0x20000408

080035c0 <__malloc_lock>:
 80035c0:	4770      	bx	lr

080035c2 <__malloc_unlock>:
 80035c2:	4770      	bx	lr

080035c4 <_read_r>:
 80035c4:	b538      	push	{r3, r4, r5, lr}
 80035c6:	4c07      	ldr	r4, [pc, #28]	; (80035e4 <_read_r+0x20>)
 80035c8:	4605      	mov	r5, r0
 80035ca:	4608      	mov	r0, r1
 80035cc:	4611      	mov	r1, r2
 80035ce:	2200      	movs	r2, #0
 80035d0:	6022      	str	r2, [r4, #0]
 80035d2:	461a      	mov	r2, r3
 80035d4:	f7fe ffda 	bl	800258c <_read>
 80035d8:	1c43      	adds	r3, r0, #1
 80035da:	d102      	bne.n	80035e2 <_read_r+0x1e>
 80035dc:	6823      	ldr	r3, [r4, #0]
 80035de:	b103      	cbz	r3, 80035e2 <_read_r+0x1e>
 80035e0:	602b      	str	r3, [r5, #0]
 80035e2:	bd38      	pop	{r3, r4, r5, pc}
 80035e4:	20000408 	.word	0x20000408

080035e8 <_init>:
 80035e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ea:	bf00      	nop
 80035ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ee:	bc08      	pop	{r3}
 80035f0:	469e      	mov	lr, r3
 80035f2:	4770      	bx	lr

080035f4 <_fini>:
 80035f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035f6:	bf00      	nop
 80035f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035fa:	bc08      	pop	{r3}
 80035fc:	469e      	mov	lr, r3
 80035fe:	4770      	bx	lr
